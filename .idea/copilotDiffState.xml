<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Badge.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Badge.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;/**&#10; * Data class representing a badge that users can earn&#10; */&#10;data class Badge(&#10;    val id: String,&#10;    val name: String,&#10;    val description: String,&#10;    val imageUrl: String,&#10;    val icon: Int,  // Resource ID for the icon&#10;    val badgeType: BadgeType,&#10;    val threshold: Int,  // Threshold to achieve this badge&#10;    val dateEarned: String? = null&#10;)&#10;&#10;/**&#10; * Enum representing different types of badges&#10; */&#10;enum class BadgeType {&#10;    REVIEW,&#10;    VENUE_VISIT,&#10;    SPECIAL_EVENT&#10;    // Removed unused badge types&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.data.model&#13;&#10;&#13;&#10;/**&#13;&#10; * Data class representing a badge that users can earn&#13;&#10; */&#13;&#10;data class Badge(&#13;&#10;    val id: String,&#13;&#10;    val name: String,&#13;&#10;    val description: String,&#13;&#10;    val imageUrl: String,&#13;&#10;    val icon: Int,  // Resource ID for the icon&#13;&#10;    val badgeType: BadgeType,&#13;&#10;    val threshold: Int,  // Threshold to achieve this badge&#13;&#10;    val dateEarned: String? = null&#13;&#10;) {&#13;&#10;    companion object {&#13;&#10;        /**&#13;&#10;         * Returns a list of sample badges for development and testing&#13;&#10;         */&#13;&#10;        fun getSampleBadges(): List&lt;Badge&gt; {&#13;&#10;            return listOf(&#13;&#10;                Badge(&#13;&#10;                    id = &quot;badge1&quot;,&#13;&#10;                    name = &quot;Venue Explorer&quot;,&#13;&#10;                    description = &quot;Visit 5 different venues&quot;,&#13;&#10;                    imageUrl = &quot;&quot;,&#13;&#10;                    icon = android.R.drawable.ic_menu_compass,&#13;&#10;                    badgeType = BadgeType.VENUE_VISIT,&#13;&#10;                    threshold = 5&#13;&#10;                ),&#13;&#10;                Badge(&#13;&#10;                    id = &quot;badge2&quot;,&#13;&#10;                    name = &quot;Review Master&quot;,&#13;&#10;                    description = &quot;Write 10 reviews&quot;,&#13;&#10;                    imageUrl = &quot;&quot;,&#13;&#10;                    icon = android.R.drawable.ic_menu_edit,&#13;&#10;                    badgeType = BadgeType.REVIEW,&#13;&#10;                    threshold = 10&#13;&#10;                ),&#13;&#10;                Badge(&#13;&#10;                    id = &quot;badge3&quot;,&#13;&#10;                    name = &quot;Feedback Pro&quot;,&#13;&#10;                    description = &quot;Receive 15 helpful votes on your reviews&quot;,&#13;&#10;                    imageUrl = &quot;&quot;,&#13;&#10;                    icon = android.R.drawable.ic_menu_send,&#13;&#10;                    badgeType = BadgeType.REVIEW,&#13;&#10;                    threshold = 15&#13;&#10;                ),&#13;&#10;                Badge(&#13;&#10;                    id = &quot;badge4&quot;,&#13;&#10;                    name = &quot;Night Owl&quot;,&#13;&#10;                    description = &quot;Attend 3 shows that started after 10pm&quot;,&#13;&#10;                    imageUrl = &quot;&quot;,&#13;&#10;                    icon = android.R.drawable.ic_menu_recent_history,&#13;&#10;                    badgeType = BadgeType.SPECIAL_EVENT,&#13;&#10;                    threshold = 3&#13;&#10;                ),&#13;&#10;                Badge(&#13;&#10;                    id = &quot;badge5&quot;,&#13;&#10;                    name = &quot;Local Champion&quot;,&#13;&#10;                    description = &quot;Visit 8 venues in your city&quot;,&#13;&#10;                    imageUrl = &quot;&quot;,&#13;&#10;                    icon = android.R.drawable.ic_menu_myplaces,&#13;&#10;                    badgeType = BadgeType.VENUE_VISIT,&#13;&#10;                    threshold = 8&#13;&#10;                )&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;/**&#13;&#10; * Enum representing different types of badges&#13;&#10; */&#13;&#10;enum class BadgeType {&#13;&#10;    REVIEW,&#13;&#10;    VENUE_VISIT,&#13;&#10;    SPECIAL_EVENT&#13;&#10;    // Removed unused badge types&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/BadgeProgress.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/BadgeProgress.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;/**&#10; * Data class representing a user's progress towards earning a badge&#10; */&#10;data class BadgeProgress(&#10;    val badge: Badge,&#10;    val currentValue: Int,&#10;    val isEarned: Boolean = currentValue &gt;= badge.threshold,&#10;    val percentComplete: Float = (currentValue.toFloat() / badge.threshold).coerceAtMost(1f) * 100f,&#10;    val tier: String = calculateTier(percentComplete, isEarned)&#10;) {&#10;    companion object {&#10;        /**&#10;         * Calculate badge tier based on completion percentage&#10;         */&#10;        private fun calculateTier(percent: Float, earned: Boolean): String {&#10;            return when {&#10;                earned -&gt; &quot;Gold&quot;&#10;                percent &gt;= 66 -&gt; &quot;Silver&quot;&#10;                percent &gt;= 33 -&gt; &quot;Bronze&quot;&#10;                else -&gt; &quot;None&quot;&#10;            }&#10;        }&#10;&#10;        /**&#10;         * Creates a list of sample badge progress objects for testing&#10;         */&#10;        fun getSampleBadgeProgress(): List&lt;BadgeProgress&gt; {&#10;            return Badge.getSampleBadges().mapIndexed { index, badge -&gt;&#10;                // Create varied progress for each badge&#10;                val progress = when (index % 3) {&#10;                    0 -&gt; badge.threshold // Completed&#10;                    1 -&gt; (badge.threshold * 0.7).toInt() // In progress&#10;                    else -&gt; (badge.threshold * 0.2).toInt() // Just started&#10;                }&#10;                BadgeProgress(&#10;                    badge = badge,&#10;                    currentValue = progress&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.data.model&#13;&#10;&#13;&#10;/**&#13;&#10; * Data class representing a user's progress towards earning a badge&#13;&#10; */&#13;&#10;data class BadgeProgress(&#13;&#10;    val badge: Badge,&#13;&#10;    val currentValue: Int,&#13;&#10;    val isEarned: Boolean = currentValue &gt;= badge.threshold,&#13;&#10;    val percentComplete: Float = (currentValue.toFloat() / badge.threshold).coerceAtMost(1f) * 100f,&#13;&#10;    val tier: String = calculateTier(percentComplete, isEarned)&#13;&#10;) {&#13;&#10;    companion object {&#13;&#10;        /**&#13;&#10;         * Calculate badge tier based on completion percentage&#13;&#10;         */&#13;&#10;        private fun calculateTier(percent: Float, earned: Boolean): String {&#13;&#10;            return when {&#13;&#10;                earned -&gt; &quot;Gold&quot;&#13;&#10;                percent &gt;= 66 -&gt; &quot;Silver&quot;&#13;&#10;                percent &gt;= 33 -&gt; &quot;Bronze&quot;&#13;&#10;                else -&gt; &quot;None&quot;&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Creates a list of sample badge progress objects for testing&#13;&#10;         */&#13;&#10;        @Suppress(&quot;unused&quot;)&#13;&#10;        fun getSampleBadgeProgress(): List&lt;BadgeProgress&gt; {&#13;&#10;            return Badge.getSampleBadges().mapIndexed { index, badge -&gt;&#13;&#10;                // Create varied progress for each badge&#13;&#10;                val progress = when (index % 3) {&#13;&#10;                    0 -&gt; badge.threshold // Completed&#13;&#10;                    1 -&gt; (badge.threshold * 0.7).toInt() // In progress&#13;&#10;                    else -&gt; (badge.threshold * 0.2).toInt() // Just started&#13;&#10;                }&#13;&#10;                BadgeProgress(&#13;&#10;                    badge = badge,&#13;&#10;                    currentValue = progress&#13;&#10;                )&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Band.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Band.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;/**&#10; * Data class representing a music band or artist&#10; */&#10;data class Band(&#10;    val id: String,&#10;    val name: String,&#10;    val genre: String = &quot;&quot;,&#10;    val bio: String = &quot;&quot;,&#10;    val imageUrl: String = &quot;&quot;,&#10;    val image: String = &quot;&quot;,  // Added for backward compatibility&#10;    val formationYear: Int = 0,&#10;    val location: String = &quot;&quot;,&#10;    val rating: Float = 0f,&#10;    val reviewCount: Int = 0,&#10;    val genres: List&lt;String&gt; = listOf(),&#10;    val nextShow: String = &quot;&quot;,&#10;    val members: List&lt;BandMember&gt; = emptyList(),&#10;    val upcomingEvents: List&lt;Event&gt; = emptyList(),&#10;    val upcomingShows: List&lt;String&gt; = emptyList(),  // Added for backward compatibility&#10;    val socialLinks: List&lt;Pair&lt;String, String&gt;&gt; = listOf() // Format: (platform, url)&#10;) {&#10;    companion object {&#10;        /**&#10;         * Returns a list of sample bands for development and testing&#10;         */&#10;        fun getSampleBands(): List&lt;Band&gt; {&#10;            return listOf(&#10;                Band(&#10;                    id = &quot;b1&quot;,&#10;                    name = &quot;Electric Harmony&quot;,&#10;                    genre = &quot;Rock&quot;,&#10;                    bio = &quot;A four-piece band known for energetic performances&quot;,&#10;                    imageUrl = &quot;https://picsum.photos/id/1038/500/300&quot;,&#10;                    image = &quot;https://picsum.photos/id/1038/500/300&quot;,&#10;                    formationYear = 2018,&#10;                    location = &quot;Brooklyn, NY&quot;,&#10;                    rating = 4.7f,&#10;                    reviewCount = 156,&#10;                    genres = listOf(&quot;Rock&quot;, &quot;Alternative&quot;, &quot;Indie&quot;),&#10;                    nextShow = &quot;Tonight at The Sound Garden&quot;,&#10;                    upcomingShows = listOf(&#10;                        &quot;Tonight at The Sound Garden&quot;,&#10;                        &quot;July 5 at The Basement&quot;,&#10;                        &quot;July 15 at Mercury Lounge&quot;&#10;                    ),&#10;                    socialLinks = listOf(&#10;                        Pair(&quot;Instagram&quot;, &quot;https://instagram.com/electricharmony&quot;),&#10;                        Pair(&quot;Twitter&quot;, &quot;https://twitter.com/electricharmony&quot;),&#10;                        Pair(&quot;Spotify&quot;, &quot;https://open.spotify.com/artist/electricharmony&quot;)&#10;                    )&#10;                ),&#10;                Band(&#10;                    id = &quot;b2&quot;,&#10;                    name = &quot;Midnight Groove&quot;,&#10;                    genre = &quot;R&amp;B&quot;,&#10;                    bio = &quot;Soul collective bringing back classic sounds with a modern twist&quot;,&#10;                    imageUrl = &quot;https://picsum.photos/id/1039/500/300&quot;,&#10;                    image = &quot;https://picsum.photos/id/1039/500/300&quot;,&#10;                    formationYear = 2016,&#10;                    location = &quot;Queens, NY&quot;,&#10;                    rating = 4.3f,&#10;                    reviewCount = 98,&#10;                    genres = listOf(&quot;R&amp;B&quot;, &quot;Soul&quot;, &quot;Funk&quot;),&#10;                    nextShow = &quot;Tomorrow at Electric Avenue&quot;,&#10;                    upcomingShows = listOf(&#10;                        &quot;Tomorrow at Electric Avenue&quot;,&#10;                        &quot;July 8 at Blue Note&quot;,&#10;                        &quot;July 22 at Soul Kitchen&quot;&#10;                    ),&#10;                    socialLinks = listOf(&#10;                        Pair(&quot;Instagram&quot;, &quot;https://instagram.com/midnightgroove&quot;),&#10;                        Pair(&quot;YouTube&quot;, &quot;https://youtube.com/midnightgroove&quot;)&#10;                    )&#10;                ),&#10;                Band(&#10;                    id = &quot;b3&quot;,&#10;                    name = &quot;Cosmic Travelers&quot;,&#10;                    genre = &quot;Psychedelic&quot;,&#10;                    bio = &quot;Experimental space rock outfit pushing musical boundaries&quot;,&#10;                    imageUrl = &quot;https://picsum.photos/id/1040/500/300&quot;,&#10;                    image = &quot;https://picsum.photos/id/1040/500/300&quot;,&#10;                    formationYear = 2020,&#10;                    location = &quot;Manhattan, NY&quot;,&#10;                    rating = 4.9f,&#10;                    reviewCount = 230,&#10;                    genres = listOf(&quot;Psychedelic&quot;, &quot;Space Rock&quot;, &quot;Experimental&quot;),&#10;                    nextShow = &quot;Sat at The Basement&quot;,&#10;                    upcomingShows = listOf(&#10;                        &quot;Sat at The Basement&quot;,&#10;                        &quot;July 12 at Cosmic Factory&quot;,&#10;                        &quot;July 29 at Star Lounge&quot;&#10;                    ),&#10;                    socialLinks = listOf(&#10;                        Pair(&quot;Bandcamp&quot;, &quot;https://cosmictravelers.bandcamp.com&quot;),&#10;                        Pair(&quot;Instagram&quot;, &quot;https://instagram.com/cosmictravelers&quot;),&#10;                        Pair(&quot;SoundCloud&quot;, &quot;https://soundcloud.com/cosmictravelers&quot;)&#10;                    )&#10;                )&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Data class representing a band member&#10; */&#10;data class BandMember(&#10;    val id: String,&#10;    val name: String,&#10;    val role: String,&#10;    val imageUrl: String = &quot;&quot;&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;/**&#10; * Data class representing a music band or artist&#10; */&#10;data class Band(&#10;    val id: String,&#10;    val name: String,&#10;    val genre: String = &quot;&quot;,&#10;    val bio: String = &quot;&quot;,&#10;    val imageUrl: String = &quot;&quot;,&#10;    val image: String = &quot;&quot;,  // Added for backward compatibility&#10;    val formationYear: Int = 0,&#10;    val location: String = &quot;&quot;,&#10;    val rating: Float = 0f,&#10;    val reviewCount: Int = 0,&#10;    val genres: List&lt;String&gt; = listOf(),&#10;    val nextShow: String = &quot;&quot;,&#10;    val members: List&lt;BandMember&gt; = emptyList(),&#10;    val upcomingEvents: List&lt;Event&gt; = emptyList(),&#10;    val upcomingShows: List&lt;String&gt; = emptyList(),  // Added for backward compatibility&#10;    val socialLinks: List&lt;Pair&lt;String, String&gt;&gt; = listOf(), // Format: (platform, url)&#10;    val performanceRatings: Map&lt;String, Double&gt; = emptyMap() // Added for BandCard component&#10;) {&#10;    companion object {&#10;        /**&#10;         * Returns a list of sample bands for development and testing&#10;         */&#10;        fun getSampleBands(): List&lt;Band&gt; {&#10;            return listOf(&#10;                Band(&#10;                    id = &quot;b1&quot;,&#10;                    name = &quot;Electric Harmony&quot;,&#10;                    genre = &quot;Rock&quot;,&#10;                    bio = &quot;A four-piece band known for energetic performances&quot;,&#10;                    imageUrl = &quot;https://picsum.photos/id/1038/500/300&quot;,&#10;                    image = &quot;https://picsum.photos/id/1038/500/300&quot;,&#10;                    formationYear = 2018,&#10;                    location = &quot;Brooklyn, NY&quot;,&#10;                    rating = 4.7f,&#10;                    reviewCount = 156,&#10;                    genres = listOf(&quot;Rock&quot;, &quot;Alternative&quot;, &quot;Indie&quot;),&#10;                    nextShow = &quot;Tonight at The Sound Garden&quot;,&#10;                    upcomingShows = listOf(&#10;                        &quot;Tonight at The Sound Garden&quot;,&#10;                        &quot;July 5 at The Basement&quot;,&#10;                        &quot;July 15 at Mercury Lounge&quot;&#10;                    ),&#10;                    socialLinks = listOf(&#10;                        Pair(&quot;Instagram&quot;, &quot;https://instagram.com/electricharmony&quot;),&#10;                        Pair(&quot;Twitter&quot;, &quot;https://twitter.com/electricharmony&quot;),&#10;                        Pair(&quot;Spotify&quot;, &quot;https://open.spotify.com/artist/electricharmony&quot;)&#10;                    ),&#10;                    performanceRatings = mapOf(&#10;                        &quot;Live Performance&quot; to 4.8,&#10;                        &quot;Crowd Engagement&quot; to 4.6,&#10;                        &quot;Setlist&quot; to 4.7,&#10;                        &quot;Sound Quality&quot; to 4.5&#10;                    )&#10;                ),&#10;                Band(&#10;                    id = &quot;b2&quot;,&#10;                    name = &quot;Midnight Groove&quot;,&#10;                    genre = &quot;R&amp;B&quot;,&#10;                    bio = &quot;Soul collective bringing back classic sounds with a modern twist&quot;,&#10;                    imageUrl = &quot;https://picsum.photos/id/1039/500/300&quot;,&#10;                    image = &quot;https://picsum.photos/id/1039/500/300&quot;,&#10;                    formationYear = 2016,&#10;                    location = &quot;Queens, NY&quot;,&#10;                    rating = 4.3f,&#10;                    reviewCount = 98,&#10;                    genres = listOf(&quot;R&amp;B&quot;, &quot;Soul&quot;, &quot;Funk&quot;),&#10;                    nextShow = &quot;Tomorrow at Electric Avenue&quot;,&#10;                    upcomingShows = listOf(&#10;                        &quot;Tomorrow at Electric Avenue&quot;,&#10;                        &quot;July 8 at Blue Note&quot;,&#10;                        &quot;July 22 at Soul Kitchen&quot;&#10;                    ),&#10;                    socialLinks = listOf(&#10;                        Pair(&quot;Instagram&quot;, &quot;https://instagram.com/midnightgroove&quot;),&#10;                        Pair(&quot;YouTube&quot;, &quot;https://youtube.com/midnightgroove&quot;)&#10;                    ),&#10;                    performanceRatings = mapOf(&#10;                        &quot;Live Performance&quot; to 4.5,&#10;                        &quot;Crowd Engagement&quot; to 4.7,&#10;                        &quot;Setlist&quot; to 4.2,&#10;                        &quot;Sound Quality&quot; to 4.4&#10;                    )&#10;                ),&#10;                Band(&#10;                    id = &quot;b3&quot;,&#10;                    name = &quot;Cosmic Travelers&quot;,&#10;                    genre = &quot;Psychedelic&quot;,&#10;                    bio = &quot;Experimental space rock outfit pushing musical boundaries&quot;,&#10;                    imageUrl = &quot;https://picsum.photos/id/1040/500/300&quot;,&#10;                    image = &quot;https://picsum.photos/id/1040/500/300&quot;,&#10;                    formationYear = 2020,&#10;                    location = &quot;Manhattan, NY&quot;,&#10;                    rating = 4.9f,&#10;                    reviewCount = 230,&#10;                    genres = listOf(&quot;Psychedelic&quot;, &quot;Space Rock&quot;, &quot;Experimental&quot;),&#10;                    nextShow = &quot;Sat at The Basement&quot;,&#10;                    upcomingShows = listOf(&#10;                        &quot;Sat at The Basement&quot;,&#10;                        &quot;July 12 at Cosmic Factory&quot;,&#10;                        &quot;July 29 at Star Lounge&quot;&#10;                    ),&#10;                    socialLinks = listOf(&#10;                        Pair(&quot;Bandcamp&quot;, &quot;https://cosmictravelers.bandcamp.com&quot;),&#10;                        Pair(&quot;Instagram&quot;, &quot;https://instagram.com/cosmictravelers&quot;),&#10;                        Pair(&quot;SoundCloud&quot;, &quot;https://soundcloud.com/cosmictravelers&quot;)&#10;                    ),&#10;                    performanceRatings = mapOf(&#10;                        &quot;Live Performance&quot; to 4.9,&#10;                        &quot;Crowd Engagement&quot; to 4.8,&#10;                        &quot;Setlist&quot; to 4.9,&#10;                        &quot;Sound Quality&quot; to 4.7&#10;                    )&#10;                )&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Data class representing a band member&#10; */&#10;data class BandMember(&#10;    val id: String,&#10;    val name: String,&#10;    val role: String,&#10;    val imageUrl: String = &quot;&quot;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Event.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Event.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;import java.util.Date&#10;&#10;/**&#10; * Data class representing an event (concert, show, etc.)&#10; */&#10;data class Event(&#10;    val id: String,&#10;    val name: String,&#10;    val description: String,&#10;    val venueId: String,&#10;    val venueName: String,&#10;    val date: String,&#10;    val time: String,&#10;    val imageUrl: String = &quot;&quot;,&#10;    val bandIds: List&lt;String&gt; = emptyList(),&#10;    val bandNames: List&lt;String&gt; = emptyList(),&#10;    val ticketPrice: Double = 0.0,&#10;    val ticketUrl: String = &quot;&quot;,&#10;    val isSoldOut: Boolean = false&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.data.model&#13;&#10;&#13;&#10;/**&#13;&#10; * Data class representing an event (concert, show, etc.)&#13;&#10; */&#13;&#10;data class Event(&#13;&#10;    val id: String,&#13;&#10;    val name: String,&#13;&#10;    val description: String,&#13;&#10;    val venueId: String,&#13;&#10;    val venueName: String,&#13;&#10;    val date: String,&#13;&#10;    val time: String,&#13;&#10;    val imageUrl: String = &quot;&quot;,&#13;&#10;    val bandIds: List&lt;String&gt; = emptyList(),&#13;&#10;    val bandNames: List&lt;String&gt; = emptyList(),&#13;&#10;    val ticketPrice: Double = 0.0,&#13;&#10;    val ticketUrl: String = &quot;&quot;,&#13;&#10;    val isSoldOut: Boolean = false&#13;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/User.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/User.kt" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;/**&#10; * Data class representing a user in the application&#10; */&#10;data class User(&#10;    val id: String,&#10;    val username: String,&#10;    val email: String,&#10;    val level: Int,&#10;    val reviewCount: Int,&#10;    val badgeCount: Int,&#10;    val badges: List&lt;Badge&gt; = emptyList(),&#10;    val profileImageUrl: String = &quot;&quot;,&#10;    val bio: String = &quot;&quot;,&#10;    val joinDate: String = &quot;&quot;,&#10;    val followersCount: Int = 0,&#10;    val followingCount: Int = 0&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/UserProfile.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/UserProfile.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;/**&#10; * Data class representing a user profile with extended information&#10; */&#10;data class UserProfile(&#10;    val user: User,&#10;    val favoriteVenues: List&lt;String&gt; = emptyList(),&#10;    val favoriteBands: List&lt;String&gt; = emptyList(),&#10;    val recentActivity: List&lt;UserActivity&gt; = emptyList(),&#10;    val preferences: UserPreferences = UserPreferences()&#10;)&#10;&#10;/**&#10; * Data class for user activity&#10; */&#10;data class UserActivity(&#10;    val id: String,&#10;    val type: ActivityType,&#10;    val timestamp: String,&#10;    val details: String,&#10;    val relatedEntityId: String? = null&#10;)&#10;&#10;/**&#10; * Enum for different types of user activities&#10; */&#10;enum class ActivityType {&#10;    REVIEW_ADDED,&#10;    VENUE_VISITED,&#10;    BADGE_EARNED,&#10;    FOLLOWED_BAND,&#10;    FOLLOWED_VENUE&#10;}&#10;&#10;/**&#10; * Data class for user preferences&#10; */&#10;data class UserPreferences(&#10;    val notificationsEnabled: Boolean = true,&#10;    val darkModeEnabled: Boolean = false,&#10;    val privacySettings: PrivacySettings = PrivacySettings()&#10;)&#10;&#10;/**&#10; * Data class for privacy settings&#10; */&#10;data class PrivacySettings(&#10;    val profileVisibility: ProfileVisibility = ProfileVisibility.PUBLIC,&#10;    val showRecentActivity: Boolean = true,&#10;    val showFollowers: Boolean = true&#10;)&#10;&#10;/**&#10; * Enum for profile visibility options&#10; */&#10;enum class ProfileVisibility {&#10;    PUBLIC,&#10;    FOLLOWERS_ONLY,&#10;    PRIVATE&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;/**&#10; * Data class representing a user profile with extended information&#10; */&#10;data class UserProfile(&#10;    val user: User,&#10;    val favoriteVenues: List&lt;String&gt; = emptyList(),&#10;    val favoriteBands: List&lt;String&gt; = emptyList(),&#10;    val recentActivity: List&lt;UserActivity&gt; = emptyList(),&#10;    val preferences: UserPreferences = UserPreferences()&#10;)&#10;&#10;/**&#10; * Data class for user activity&#10; */&#10;data class UserActivity(&#10;    val id: String,&#10;    val type: ActivityType,&#10;    val timestamp: String,&#10;    val details: String,&#10;    val relatedEntityId: String? = null&#10;)&#10;&#10;/**&#10; * Enum for different types of user activities&#10; */&#10;enum class ActivityType {&#10;    REVIEW_ADDED,&#10;    BADGE_EARNED&#10;    // Removed unused activity types&#10;}&#10;&#10;/**&#10; * Data class for user preferences&#10; */&#10;data class UserPreferences(&#10;    val notificationsEnabled: Boolean = true,&#10;    val darkModeEnabled: Boolean = false,&#10;    val privacySettings: PrivacySettings = PrivacySettings()&#10;)&#10;&#10;/**&#10; * Data class for privacy settings&#10; */&#10;data class PrivacySettings(&#10;    val profileVisibility: ProfileVisibility = ProfileVisibility.PUBLIC,&#10;    val showRecentActivity: Boolean = true,&#10;    val showFollowers: Boolean = true&#10;)&#10;&#10;/**&#10; * Enum for profile visibility options&#10; */&#10;enum class ProfileVisibility {&#10;    PUBLIC&#10;    // Removed unused visibility options&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Venue.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Venue.kt" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;data class Venue(&#10;    val id: String,&#10;    val name: String,&#10;    val address: String,&#10;    val city: String,&#10;    val state: String,&#10;    val zipCode: String,&#10;    val description: String,&#10;    val capacity: Int,&#10;    val amenities: List&lt;String&gt;,&#10;    val contactInfo: String,&#10;    val image: String,&#10;    val rating: Float,&#10;    val reviewCount: Int,&#10;    val distance: String&#10;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/bands/BandDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/bands/BandDetailScreen.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.bands&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material.icons.filled.MusicNote&#10;import androidx.compose.material.icons.filled.Share&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BandDetailScreen(&#10;    bandId: String,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    // In a real app, you would fetch the band by ID from a repository&#10;    val band = Band.getSampleBands().find { it.id == bandId } ?: Band.getSampleBands().first()&#10;    var isFavorite by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(band.name) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { isFavorite = !isFavorite }) {&#10;                        Icon(&#10;                            imageVector = if (isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                            contentDescription = if (isFavorite) &quot;Remove from favorites&quot; else &quot;Add to favorites&quot;&#10;                        )&#10;                    }&#10;                    IconButton(onClick = { /* Handle share */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Share,&#10;                            contentDescription = &quot;Share&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Band image placeholder&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Band Image&quot;,&#10;                        style = MaterialTheme.typography.titleLarge&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Band info&#10;            Column {&#10;                Text(&#10;                    text = band.name,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.MusicNote,&#10;                        contentDescription = &quot;Genre&quot;,&#10;                        modifier = Modifier.padding(end = 4.dp)&#10;                    )&#10;                    Text(&#10;                        text = band.genre,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.LocationOn,&#10;                        contentDescription = &quot;Location&quot;,&#10;                        modifier = Modifier.padding(end = 4.dp)&#10;                    )&#10;                    Text(&#10;                        text = band.location,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Bio&#10;            Column {&#10;                Text(&#10;                    text = &quot;Biography&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = band.bio,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Formation year&#10;            Column {&#10;                Text(&#10;                    text = &quot;Formed&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = band.formationYear.toString(),&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            if (band.socialLinks.isNotEmpty()) {&#10;                HorizontalDivider()&#10;&#10;                // Social links&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Social Media&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    band.socialLinks.forEach { (platform, link) -&gt;&#10;                        Text(&#10;                            text = &quot;• $platform&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            modifier = Modifier.padding(vertical = 2.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Action buttons&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Button(&#10;                    onClick = { /* Handle click */ },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;View Shows&quot;)&#10;                }&#10;&#10;                Button(&#10;                    onClick = { /* Handle click */ },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;Follow&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun BandDetailScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        BandDetailScreen(&#10;            bandId = &quot;band1&quot;,&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.bands&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material.icons.filled.MusicNote&#10;import androidx.compose.material.icons.filled.Share&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BandDetailScreen(&#10;    bandId: String,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    // In a real app, you would fetch the band by ID from a repository&#10;    val band = Band.getSampleBands().find { it.id == bandId } ?: Band.getSampleBands().first()&#10;    var isFavorite by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(band.name) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { isFavorite = !isFavorite }) {&#10;                        Icon(&#10;                            imageVector = if (isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                            contentDescription = if (isFavorite) &quot;Remove from favorites&quot; else &quot;Add to favorites&quot;&#10;                        )&#10;                    }&#10;                    IconButton(onClick = { /* Handle share */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Share,&#10;                            contentDescription = &quot;Share&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Band image placeholder&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Band Image&quot;,&#10;                        style = MaterialTheme.typography.titleLarge&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Band info&#10;            Column {&#10;                Text(&#10;                    text = band.name,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.MusicNote,&#10;                        contentDescription = &quot;Genre&quot;,&#10;                        modifier = Modifier.padding(end = 4.dp)&#10;                    )&#10;                    Text(&#10;                        text = band.genre,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.LocationOn,&#10;                        contentDescription = &quot;Location&quot;,&#10;                        modifier = Modifier.padding(end = 4.dp)&#10;                    )&#10;                    Text(&#10;                        text = band.location,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Bio&#10;            Column {&#10;                Text(&#10;                    text = &quot;Biography&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = band.bio,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Formation year&#10;            Column {&#10;                Text(&#10;                    text = &quot;Formed&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = band.formationYear.toString(),&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            if (band.socialLinks.isNotEmpty()) {&#10;                HorizontalDivider()&#10;&#10;                // Social links&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Social Media&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    band.socialLinks.forEach { (platform, _) -&gt;&#10;                        Text(&#10;                            text = &quot;• $platform&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            modifier = Modifier.padding(vertical = 2.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Action buttons&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Button(&#10;                    onClick = { /* Handle click */ },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;View Shows&quot;)&#10;                }&#10;&#10;                Button(&#10;                    onClick = { /* Handle click */ },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;Follow&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun BandDetailScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        BandDetailScreen(&#10;            bandId = &quot;band1&quot;,&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/bands/BandDetailViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/bands/BandDetailViewModel.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.bands&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.data.repository.Repository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class BandDetailViewModel(private val repository: Repository, private val bandId: String) : ViewModel() {&#10;&#10;    private val _band = MutableStateFlow&lt;Band?&gt;(null)&#10;    val band: StateFlow&lt;Band?&gt; = _band.asStateFlow()&#10;&#10;    private val _relatedBands = MutableStateFlow&lt;List&lt;Band&gt;&gt;(emptyList())&#10;    val relatedBands: StateFlow&lt;List&lt;Band&gt;&gt; = _relatedBands.asStateFlow()&#10;&#10;    private val _reviews = MutableStateFlow&lt;List&lt;String&gt;&gt;(emptyList())&#10;    val reviews: StateFlow&lt;List&lt;String&gt;&gt; = _reviews.asStateFlow()&#10;&#10;    init {&#10;        viewModelScope.launch {&#10;            _band.value = repository.getBandDetails(bandId)&#10;            _relatedBands.value = repository.getRelatedBands(bandId)&#10;            _reviews.value = repository.getReviewsForBand(bandId)&#10;        }&#10;    }&#10;&#10;    class Factory(private val repository: Repository, private val bandId: String) : ViewModelProvider.Factory {&#10;        @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;        override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;            if (modelClass.isAssignableFrom(BandDetailViewModel::class.java)) {&#10;                return BandDetailViewModel(repository, bandId) as T&#10;            }&#10;            throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.bands&#13;&#10;&#13;&#10;import androidx.lifecycle.ViewModel&#13;&#10;import androidx.lifecycle.ViewModelProvider&#13;&#10;import androidx.lifecycle.viewModelScope&#13;&#10;import com.example.pitpulseandroid.data.model.Band&#13;&#10;import com.example.pitpulseandroid.data.repository.Repository&#13;&#10;import kotlinx.coroutines.flow.MutableStateFlow&#13;&#10;import kotlinx.coroutines.flow.StateFlow&#13;&#10;import kotlinx.coroutines.flow.asStateFlow&#13;&#10;import kotlinx.coroutines.launch&#13;&#10;&#13;&#10;@Suppress(&quot;unused&quot;)&#13;&#10;class BandDetailViewModel(private val repository: Repository, private val bandId: String) : ViewModel() {&#13;&#10;&#13;&#10;    private val _band = MutableStateFlow&lt;Band?&gt;(null)&#13;&#10;    val band: StateFlow&lt;Band?&gt; = _band.asStateFlow()&#13;&#10;&#13;&#10;    private val _relatedBands = MutableStateFlow&lt;List&lt;Band&gt;&gt;(emptyList())&#13;&#10;    val relatedBands: StateFlow&lt;List&lt;Band&gt;&gt; = _relatedBands.asStateFlow()&#13;&#10;&#13;&#10;    private val _reviews = MutableStateFlow&lt;List&lt;String&gt;&gt;(emptyList())&#13;&#10;    val reviews: StateFlow&lt;List&lt;String&gt;&gt; = _reviews.asStateFlow()&#13;&#10;&#13;&#10;    init {&#13;&#10;        viewModelScope.launch {&#13;&#10;            _band.value = repository.getBandDetails(bandId)&#13;&#10;            _relatedBands.value = repository.getRelatedBands(bandId)&#13;&#10;            _reviews.value = repository.getReviewsForBand(bandId)&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    class Factory(private val repository: Repository, private val bandId: String) : ViewModelProvider.Factory {&#13;&#10;        @Suppress(&quot;UNCHECKED_CAST&quot;)&#13;&#10;        override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#13;&#10;            if (modelClass.isAssignableFrom(BandDetailViewModel::class.java)) {&#13;&#10;                return BandDetailViewModel(repository, bandId) as T&#13;&#10;            }&#13;&#10;            throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/bands/BandsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/bands/BandsScreen.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.bands&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BandsScreen(&#10;    onBandClick: (Band) -&gt; Unit,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    val bands = Band.getSampleBands()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Bands&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 8.dp),&#10;                placeholder = { Text(&quot;Search bands...&quot;) },&#10;                trailingIcon = {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Search,&#10;                        contentDescription = &quot;Search&quot;&#10;                    )&#10;                },&#10;                singleLine = true&#10;            )&#10;&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxSize(),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp),&#10;                contentPadding = PaddingValues(vertical = 8.dp)&#10;            ) {&#10;                items(bands.filter {&#10;                    searchQuery.isEmpty() ||&#10;                    it.name.contains(searchQuery, ignoreCase = true) ||&#10;                    it.genre.contains(searchQuery, ignoreCase = true)&#10;                }) { band -&gt;&#10;                    BandListItem(&#10;                        band = band,&#10;                        onClick = { onBandClick(band) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BandListItem(&#10;    band: Band,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Placeholder for band image&#10;            Card(&#10;                modifier = Modifier.size(80.dp)&#10;            ) {&#10;                // This would be an AsyncImage in a real app&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = band.name.take(1),&#10;                        style = MaterialTheme.typography.headlineMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = band.name,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = band.genre,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = band.bio,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun BandsScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        BandsScreen(&#10;            onBandClick = {},&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.bands&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BandsScreen(&#10;    onBandClick: (Band) -&gt; Unit,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    val bands = Band.getSampleBands()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Bands&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 8.dp),&#10;                placeholder = { Text(&quot;Search bands...&quot;) },&#10;                trailingIcon = {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Search,&#10;                        contentDescription = &quot;Search&quot;&#10;                    )&#10;                },&#10;                singleLine = true&#10;            )&#10;&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxSize(),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp),&#10;                contentPadding = PaddingValues(vertical = 8.dp)&#10;            ) {&#10;                items(bands.filter {&#10;                    searchQuery.isEmpty() ||&#10;                    it.name.contains(searchQuery, ignoreCase = true) ||&#10;                    it.genre.contains(searchQuery, ignoreCase = true)&#10;                }) { band -&gt;&#10;                    BandListItem(&#10;                        band = band,&#10;                        onClick = { onBandClick(band) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BandListItem(&#10;    band: Band,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Placeholder for band image&#10;            Card(&#10;                modifier = Modifier.size(80.dp)&#10;            ) {&#10;                // This would be an AsyncImage in a real app&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = band.name.take(1),&#10;                        style = MaterialTheme.typography.headlineMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = band.name,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = band.genre,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = band.bio,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun BandsScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        BandsScreen(&#10;            onBandClick = {},&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/common/LoadingState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/common/LoadingState.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.common&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextAlign&#10;&#10;/**&#10; * Displays a loading indicator centered on the screen.&#10; */&#10;@Composable&#10;fun LoadingIndicator() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        CircularProgressIndicator()&#10;    }&#10;}&#10;&#10;/**&#10; * Displays an error message centered on the screen.&#10; * &#10; * @param message The error message to display&#10; */&#10;@Composable&#10;fun ErrorState(message: String) {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = message,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            textAlign = TextAlign.Center,&#10;            color = MaterialTheme.colorScheme.error&#10;        )&#10;    }&#10;}&#10;&#10;/**&#10; * Displays a loading state with the option to show an error message.&#10; * &#10; * @param isLoading Whether content is loading&#10; * @param error Error message, null if no error&#10; * @param content Content to display when not loading and no error&#10; */&#10;@Composable&#10;    data: T?,&#10;    isLoading: Boolean,&#10;    error: String? = null,&#10;    content: @Composable (T) -&gt; Unit&#10;) {&#10;    when {&#10;        isLoading -&gt; LoadingIndicator()&#10;        error != null -&gt; ErrorState(message = error)&#10;        data != null -&gt; content(data)&#10;        else -&gt; ErrorState(message = &quot;No data available&quot;)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.common&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextAlign&#10;&#10;/**&#10; * Displays a loading indicator centered on the screen.&#10; */&#10;@Composable&#10;fun LoadingIndicator() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        CircularProgressIndicator()&#10;    }&#10;}&#10;&#10;/**&#10; * Displays an error message centered on the screen.&#10; * &#10; * @param message The error message to display&#10; */&#10;@Composable&#10;fun ErrorState(message: String) {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = message,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            textAlign = TextAlign.Center,&#10;            color = MaterialTheme.colorScheme.error&#10;        )&#10;    }&#10;}&#10;&#10;/**&#10; * Displays a loading state with the option to show an error message.&#10; * &#10; * @param isLoading Whether content is loading&#10; * @param error Error message, null if no error&#10; * @param content Content to display when not loading and no error&#10; */&#10;@Composable&#10;@Suppress(&quot;unused&quot;) // Will be used in future implementations&#10;fun &lt;T&gt; LoadingState(&#10;    data: T?,&#10;    isLoading: Boolean,&#10;    error: String? = null,&#10;    content: @Composable (T) -&gt; Unit&#10;) {&#10;    when {&#10;        isLoading -&gt; LoadingIndicator()&#10;        error != null -&gt; ErrorState(message = error)&#10;        data != null -&gt; content(data)&#10;        else -&gt; ErrorState(message = &quot;No data available&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/components/BandCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/components/BandCard.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.components&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;/**&#10; * A card component that displays band information.&#10; *&#10; * @param band The band to display&#10; * @param onBandClick Callback when the card is clicked&#10; * @param modifier Modifier to be applied to the card&#10; * @param showBio Whether to show the band's bio&#10; */&#10;@Composable&#10;fun BandCard(&#10;    band: Band,&#10;    onBandClick: (Band) -&gt; Unit = {},&#10;    modifier: Modifier = Modifier,&#10;    showBio: Boolean = false&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clickable { onBandClick(band) },&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column {&#10;            // Band image&#10;            AsyncImage(&#10;                model = band.image,&#10;                contentDescription = band.name,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(160.dp)&#10;                    .clip(MaterialTheme.shapes.medium)&#10;            )&#10;&#10;            // Band details&#10;            Column(modifier = Modifier.padding(16.dp)) {&#10;                // Band name&#10;                Text(&#10;                    text = band.name,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                // Rating&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Star,&#10;                        contentDescription = &quot;Rating&quot;,&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&#10;                        text = band.rating.toString(),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&#10;                        text = &quot;(${band.reviewCount} reviews)&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = Color.Gray&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // Genres&#10;                Row {&#10;                    if (band.genres.isNotEmpty()) {&#10;                        // Use genres list if available&#10;                        band.genres.take(3).forEach { genre -&gt;&#10;                            BadgeComponent(&#10;                                text = genre,&#10;                                modifier = Modifier.padding(end = 4.dp)&#10;                            )&#10;                        }&#10;                    } else if (band.genre.isNotEmpty()) {&#10;                        // Fall back to single genre if genres list is empty&#10;                        BadgeComponent(&#10;                            text = band.genre,&#10;                            modifier = Modifier.padding(end = 4.dp)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Next show if available&#10;                if (band.nextShow != null) {&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Next show: ${band.nextShow}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;&#10;                // Bio if requested and available&#10;                if (showBio &amp;&amp; band.bio.isNotEmpty()) {&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = band.bio,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun BandCardPreview() {&#10;    PitPulseAndroidTheme {&#10;        BandCard(&#10;            band = Band(&#10;                id = &quot;1&quot;,&#10;                name = &quot;Radiohead&quot;,&#10;                image = &quot;placeholder&quot;,&#10;                rating = 4.9f,&#10;                reviewCount = 1245,&#10;                genre = &quot;Alternative Rock&quot;,&#10;                bio = &quot;Radiohead are an English rock band formed in Abingdon, Oxfordshire, in 1985. The band consists of Thom Yorke, brothers Jonny Greenwood and Colin Greenwood, Ed O'Brien and Philip Selway.&quot;&#10;            ),&#10;            modifier = Modifier.padding(16.dp)&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.components&#13;&#10;&#13;&#10;import androidx.compose.foundation.clickable&#13;&#10;import androidx.compose.foundation.layout.Column&#13;&#10;import androidx.compose.foundation.layout.Row&#13;&#10;import androidx.compose.foundation.layout.Spacer&#13;&#10;import androidx.compose.foundation.layout.fillMaxWidth&#13;&#10;import androidx.compose.foundation.layout.height&#13;&#10;import androidx.compose.foundation.layout.padding&#13;&#10;import androidx.compose.foundation.layout.width&#13;&#10;import androidx.compose.material.icons.Icons&#13;&#10;import androidx.compose.material.icons.filled.Star&#13;&#10;import androidx.compose.material3.Card&#13;&#10;import androidx.compose.material3.CardDefaults&#13;&#10;import androidx.compose.material3.Icon&#13;&#10;import androidx.compose.material3.MaterialTheme&#13;&#10;import androidx.compose.material3.Text&#13;&#10;import androidx.compose.runtime.Composable&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.draw.clip&#13;&#10;import androidx.compose.ui.graphics.Color&#13;&#10;import androidx.compose.ui.layout.ContentScale&#13;&#10;import androidx.compose.ui.text.font.FontWeight&#13;&#10;import androidx.compose.ui.text.style.TextOverflow&#13;&#10;import androidx.compose.ui.tooling.preview.Preview&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import coil.compose.AsyncImage&#13;&#10;import com.example.pitpulseandroid.data.model.Band&#13;&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#13;&#10;&#13;&#10;/**&#13;&#10; * A card component that displays band information.&#13;&#10; *&#13;&#10; * @param band The band to display&#13;&#10; * @param onBandClick Callback when the card is clicked&#13;&#10; * @param modifier Modifier to be applied to the card&#13;&#10; * @param showBio Whether to show the band's bio&#13;&#10; */&#13;&#10;@Composable&#13;&#10;fun BandCard(&#13;&#10;    modifier: Modifier = Modifier,&#13;&#10;    band: Band,&#13;&#10;    onBandClick: (Band) -&gt; Unit = {},&#13;&#10;    showBio: Boolean = false&#13;&#10;) {&#13;&#10;    Card(&#13;&#10;        modifier = modifier&#13;&#10;            .fillMaxWidth()&#13;&#10;            .clickable { onBandClick(band) },&#13;&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#13;&#10;    ) {&#13;&#10;        Column {&#13;&#10;            // Band image&#13;&#10;            AsyncImage(&#13;&#10;                model = band.image,&#13;&#10;                contentDescription = band.name,&#13;&#10;                contentScale = ContentScale.Crop,&#13;&#10;                modifier = Modifier&#13;&#10;                    .fillMaxWidth()&#13;&#10;                    .height(160.dp)&#13;&#10;                    .clip(MaterialTheme.shapes.medium)&#13;&#10;            )&#13;&#10;&#13;&#10;            // Band details&#13;&#10;            Column(modifier = Modifier.padding(16.dp)) {&#13;&#10;                // Band name&#13;&#10;                Text(&#13;&#10;                    text = band.name,&#13;&#10;                    style = MaterialTheme.typography.titleLarge,&#13;&#10;                    maxLines = 1,&#13;&#10;                    overflow = TextOverflow.Ellipsis&#13;&#10;                )&#13;&#10;&#13;&#10;                Spacer(modifier = Modifier.height(4.dp))&#13;&#10;&#13;&#10;                // Rating&#13;&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#13;&#10;                    Icon(&#13;&#10;                        imageVector = Icons.Default.Star,&#13;&#10;                        contentDescription = &quot;Rating&quot;,&#13;&#10;                        tint = MaterialTheme.colorScheme.primary&#13;&#10;                    )&#13;&#10;                    Spacer(modifier = Modifier.width(4.dp))&#13;&#10;                    Text(&#13;&#10;                        text = band.rating.toString(),&#13;&#10;                        style = MaterialTheme.typography.bodyMedium,&#13;&#10;                        fontWeight = FontWeight.Bold&#13;&#10;                    )&#13;&#10;                    Spacer(modifier = Modifier.width(8.dp))&#13;&#10;                    Text(&#13;&#10;                        text = &quot;(${band.reviewCount} reviews)&quot;,&#13;&#10;                        style = MaterialTheme.typography.bodyMedium,&#13;&#10;                        color = Color.Gray&#13;&#10;                    )&#13;&#10;                }&#13;&#10;&#13;&#10;                Spacer(modifier = Modifier.height(8.dp))&#13;&#10;&#13;&#10;                // Genres&#13;&#10;                Row {&#13;&#10;                    if (band.genres.isNotEmpty()) {&#13;&#10;                        // Use genres list if available&#13;&#10;                        band.genres.take(3).forEach { genre -&gt;&#13;&#10;                            BadgeComponent(&#13;&#10;                                text = genre,&#13;&#10;                                modifier = Modifier.padding(end = 4.dp)&#13;&#10;                            )&#13;&#10;                        }&#13;&#10;                    } else if (band.genre.isNotEmpty()) {&#13;&#10;                        // Fall back to single genre if genres list is empty&#13;&#10;                        BadgeComponent(&#13;&#10;                            text = band.genre,&#13;&#10;                            modifier = Modifier.padding(end = 4.dp)&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                // Next show if available&#13;&#10;                if (band.nextShow.isNotEmpty()) {&#13;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#13;&#10;                    Text(&#13;&#10;                        text = &quot;Next show: ${band.nextShow}&quot;,&#13;&#10;                        style = MaterialTheme.typography.bodyMedium,&#13;&#10;                        color = MaterialTheme.colorScheme.primary&#13;&#10;                    )&#13;&#10;                }&#13;&#10;&#13;&#10;                // Bio if requested and available&#13;&#10;                if (showBio &amp;&amp; band.bio.isNotEmpty()) {&#13;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#13;&#10;                    Text(&#13;&#10;                        text = band.bio,&#13;&#10;                        style = MaterialTheme.typography.bodyMedium,&#13;&#10;                        maxLines = 2,&#13;&#10;                        overflow = TextOverflow.Ellipsis&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Preview(showBackground = true)&#13;&#10;@Composable&#13;&#10;fun BandCardPreview() {&#13;&#10;    PitPulseAndroidTheme {&#13;&#10;        BandCard(&#13;&#10;            band = Band(&#13;&#10;                id = &quot;1&quot;,&#13;&#10;                name = &quot;Radiohead&quot;,&#13;&#10;                image = &quot;placeholder&quot;,&#13;&#10;                rating = 4.9f,&#13;&#10;                reviewCount = 1245,&#13;&#10;                genre = &quot;Alternative Rock&quot;,&#13;&#10;                bio = &quot;Radiohead are an English rock band formed in Abingdon, Oxfordshire, in 1985. The band consists of Thom Yorke, brothers Jonny Greenwood and Colin Greenwood, Ed O'Brien and Philip Selway.&quot;&#13;&#10;            ),&#13;&#10;            modifier = Modifier.padding(16.dp)&#13;&#10;        )&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/components/CommonComponents.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/components/CommonComponents.kt" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.components&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;&#10;@Composable&#10;fun SectionHeader(&#10;    title: String,&#10;    modifier: Modifier = Modifier,&#10;    onActionClick: (() -&gt; Unit)? = null,&#10;    actionText: String = &quot;See All&quot;&#10;) {&#10;    Row(&#10;        modifier = modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Text(&#10;            text = title,&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.onSurface&#10;        )&#10;&#10;        onActionClick?.let {&#10;            TextButton(onClick = it) {&#10;                Text(&#10;                    text = actionText,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/components/UserStatsCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/components/UserStatsCard.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Badge&#10;import com.example.pitpulseandroid.data.model.User&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;import com.example.pitpulseandroid.ui.theme.Purple600&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Star&#10;&#10;/**&#10; * A card component that displays user statistics.&#10; * &#10; * @param user The user whose stats to display&#10; * @param modifier Modifier to be applied to the card&#10; * @param onClick Callback when the card is clicked&#10; */&#10;@Composable&#10;fun UserStatsCard(&#10;    modifier: Modifier = Modifier,&#10;    user: User,&#10;    onClick: (User) -&gt; Unit = {}&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClick(user) },&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            // User info row&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Avatar&#10;                AvatarComponent(&#10;                    imageUrl = &quot;&quot;,&#10;                    fallbackText = user.username,&#10;                    size = 48.dp&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.width(12.dp))&#10;                &#10;                // User details&#10;                Column {&#10;                    Text(&#10;                        text = user.username,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    &#10;                    Text(&#10;                        text = &quot;Level ${user.level}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            HorizontalDivider()&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            // Stats row&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                // Reviews stat&#10;                StatItem(&#10;                    value = user.reviewCount.toString(),&#10;                    label = &quot;Reviews&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;                &#10;                // Badges stat&#10;                StatItem(&#10;                    value = user.badgeCount.toString(),&#10;                    label = &quot;Badges&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            // Recent badge (if any)&#10;            if (user.badges.isNotEmpty()) {&#10;                val recentBadge = user.badges.first()&#10;                RecentBadgeItem(badge = recentBadge)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatItem(&#10;    value: String,&#10;    label: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        modifier = modifier&#10;    ) {&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = Color.Gray&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun RecentBadgeItem(&#10;    badge: Badge,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Row(&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clip(RoundedCornerShape(8.dp))&#10;            .background(MaterialTheme.colorScheme.surfaceVariant)&#10;            .padding(12.dp)&#10;    ) {&#10;        // Badge icon&#10;        Box(&#10;            contentAlignment = Alignment.Center,&#10;            modifier = Modifier&#10;                .size(40.dp)&#10;                .clip(CircleShape)&#10;                .background(Purple600)&#10;        ) {&#10;            // Using an Icon component instead of directly referencing the icon&#10;            androidx.compose.material3.Icon(&#10;                imageVector = Icons.Filled.Star,&#10;                contentDescription = &quot;Badge icon&quot;,&#10;                tint = androidx.compose.ui.graphics.Color.White&#10;            )&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.width(12.dp))&#10;        &#10;        // Badge details&#10;        Column {&#10;            Text(&#10;                text = &quot;New Badge: ${badge.name}&quot;,&#10;                style = MaterialTheme.typography.titleSmall,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            &#10;            Text(&#10;                text = badge.description,&#10;                style = MaterialTheme.typography.bodySmall&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun UserStatsCardPreview() {&#10;    PitPulseAndroidTheme {&#10;        UserStatsCard(&#10;            user = User(&#10;                id = &quot;user123&quot;,&#10;                username = &quot;rockfan92&quot;,&#10;                email = &quot;rockfan92@example.com&quot;,&#10;                level = 12,&#10;                reviewCount = 47,&#10;                badgeCount = 15,&#10;                badges = listOf(&#10;                    Badge(&#10;                        id = &quot;badge123&quot;,&#10;                        name = &quot;Night Owl&quot;,&#10;                        description = &quot;Attended 5 shows that started after 10pm&quot;,&#10;                        imageUrl = &quot;&quot;,&#10;                        icon = android.R.drawable.ic_dialog_info, // Using a public system icon instead&#10;                        badgeType = com.example.pitpulseandroid.data.model.BadgeType.SPECIAL_EVENT,&#10;                        threshold = 5&#10;                    )&#10;                )&#10;            ),&#10;            modifier = Modifier.padding(16.dp)&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Badge&#10;import com.example.pitpulseandroid.data.model.User&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;import com.example.pitpulseandroid.ui.theme.Purple600&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Star&#10;&#10;/**&#10; * A card component that displays user statistics.&#10; * &#10; * @param user The user whose stats to display&#10; * @param modifier Modifier to be applied to the card&#10; * @param onClick Callback when the card is clicked&#10; */&#10;@Composable&#10;fun UserStatsCard(&#10;    modifier: Modifier = Modifier,&#10;    user: User,&#10;    onClick: (User) -&gt; Unit = {}&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClick(user) },&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            // User info row&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Avatar&#10;                AvatarComponent(&#10;                    imageUrl = &quot;&quot;,&#10;                    fallbackText = user.username,&#10;                    size = 48.dp&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.width(12.dp))&#10;                &#10;                // User details&#10;                Column {&#10;                    Text(&#10;                        text = user.username,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    &#10;                    Text(&#10;                        text = &quot;Level ${user.level}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            HorizontalDivider()&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            // Stats row&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                // Reviews stat&#10;                StatItem(&#10;                    value = user.reviewCount.toString(),&#10;                    label = &quot;Reviews&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;                &#10;                // Badges stat&#10;                StatItem(&#10;                    value = user.badgeCount.toString(),&#10;                    label = &quot;Badges&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            // Recent badge (if any)&#10;            if (user.badges.isNotEmpty()) {&#10;                val recentBadge = user.badges.first()&#10;                RecentBadgeItem(badge = recentBadge)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatItem(&#10;    value: String,&#10;    label: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        modifier = modifier&#10;    ) {&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = Color.Gray&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun RecentBadgeItem(&#10;    badge: Badge,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Row(&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clip(RoundedCornerShape(8.dp))&#10;            .background(MaterialTheme.colorScheme.surfaceVariant)&#10;            .padding(12.dp)&#10;    ) {&#10;        // Badge icon&#10;        Box(&#10;            contentAlignment = Alignment.Center,&#10;            modifier = Modifier&#10;                .size(40.dp)&#10;                .clip(CircleShape)&#10;                .background(Purple600)&#10;        ) {&#10;            // Using an Icon component instead of directly referencing the icon&#10;            androidx.compose.material3.Icon(&#10;                imageVector = Icons.Filled.Star,&#10;                contentDescription = &quot;Badge icon&quot;,&#10;                tint = Color.White&#10;            )&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.width(12.dp))&#10;        &#10;        // Badge details&#10;        Column {&#10;            Text(&#10;                text = &quot;New Badge: ${badge.name}&quot;,&#10;                style = MaterialTheme.typography.titleSmall,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            &#10;            Text(&#10;                text = badge.description,&#10;                style = MaterialTheme.typography.bodySmall&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun UserStatsCardPreview() {&#10;    PitPulseAndroidTheme {&#10;        UserStatsCard(&#10;            user = User(&#10;                id = &quot;user123&quot;,&#10;                username = &quot;rockfan92&quot;,&#10;                email = &quot;rockfan92@example.com&quot;,&#10;                level = 12,&#10;                reviewCount = 47,&#10;                badgeCount = 15,&#10;                badges = listOf(&#10;                    Badge(&#10;                        id = &quot;badge123&quot;,&#10;                        name = &quot;Night Owl&quot;,&#10;                        description = &quot;Attended 5 shows that started after 10pm&quot;,&#10;                        imageUrl = &quot;&quot;,&#10;                        icon = android.R.drawable.ic_dialog_info, // Using a public system icon instead&#10;                        badgeType = com.example.pitpulseandroid.data.model.BadgeType.SPECIAL_EVENT,&#10;                        threshold = 5&#10;                    )&#10;                )&#10;            ),&#10;            modifier = Modifier.padding(16.dp)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/components/VenueCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/components/VenueCard.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.components&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Place&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;/**&#10; * A card component that displays venue information.&#10; *&#10; * @param venue The venue to display&#10; * @param onClick Callback when the card is clicked&#10; * @param modifier Modifier to be applied to the card&#10; */&#10;@Composable&#10;fun VenueCard(&#10;    venue: Venue,&#10;    onClick: (Venue) -&gt; Unit = {},&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClick(venue) },&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Column {&#10;            // Venue image&#10;            Image(&#10;                painter = rememberAsyncImagePainter(venue.image),&#10;                contentDescription = venue.name,&#10;                modifier = Modifier&#10;                    .height(180.dp)&#10;                    .fillMaxWidth()&#10;                    .clip(RoundedCornerShape(topStart = 8.dp, topEnd = 8.dp)),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            // Venue details&#10;            Column(modifier = Modifier.padding(16.dp)) {&#10;                // Venue name&#10;                Text(&#10;                    text = venue.name,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // Rating&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Star,&#10;                        contentDescription = &quot;Rating&quot;,&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&#10;                        text = &quot;${venue.rating} (${venue.reviewCount} reviews)&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // Address and distance&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Place,&#10;                        contentDescription = &quot;Address&quot;,&#10;                        tint = Color.Gray&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&#10;                        text = venue.address,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = Color.Gray&#10;                    )&#10;                }&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Distance: ${venue.distance}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = Color.Gray&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // Amenities&#10;                Row {&#10;                    venue.amenities.take(3).forEach { amenity -&gt;&#10;                        Chip(label = amenity)&#10;                        Spacer(modifier = Modifier.width(4.dp))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Chip(label: String) {&#10;    Surface(&#10;        modifier = Modifier.padding(end = 4.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        color = MaterialTheme.colorScheme.secondaryContainer&#10;    ) {&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun VenueCardPreview() {&#10;    PitPulseAndroidTheme {&#10;        VenueCard(&#10;            venue = Venue(&#10;                id = &quot;1&quot;,&#10;                name = &quot;The Fillmore&quot;,&#10;                address = &quot;1805 Geary Blvd, San Francisco, CA 94115&quot;,&#10;                city = &quot;San Francisco&quot;,&#10;                state = &quot;CA&quot;,&#10;                zipCode = &quot;94115&quot;,&#10;                description = &quot;Legendary music venue&quot;,&#10;                capacity = 1000,&#10;                amenities = listOf(&quot;Bar&quot;, &quot;Restrooms&quot;, &quot;Merch&quot;),&#10;                contactInfo = &quot;test@test.com&quot;,&#10;                image = &quot;&quot;,&#10;                rating = 4.5f,&#10;                reviewCount = 120,&#10;                distance = &quot;1.2 mi&quot;&#10;            ),&#10;            onClick = {}&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.components&#13;&#10;&#13;&#10;import androidx.compose.foundation.Image&#13;&#10;import androidx.compose.foundation.clickable&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#13;&#10;import androidx.compose.material.icons.Icons&#13;&#10;import androidx.compose.material.icons.filled.Place&#13;&#10;import androidx.compose.material.icons.filled.Star&#13;&#10;import androidx.compose.material3.*&#13;&#10;import androidx.compose.runtime.Composable&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.draw.clip&#13;&#10;import androidx.compose.ui.graphics.Color&#13;&#10;import androidx.compose.ui.layout.ContentScale&#13;&#10;import androidx.compose.ui.text.font.FontWeight&#13;&#10;import androidx.compose.ui.tooling.preview.Preview&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import coil.compose.rememberAsyncImagePainter&#13;&#10;import com.example.pitpulseandroid.data.model.Venue&#13;&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;/**&#13;&#10; * A card component that displays venue information.&#13;&#10; *&#13;&#10; * @param venue The venue to display&#13;&#10; * @param onClick Callback when the card is clicked&#13;&#10; * @param modifier Modifier to be applied to the card&#13;&#10; */&#13;&#10;@Composable&#13;&#10;fun VenueCard(&#13;&#10;    modifier: Modifier = Modifier,&#13;&#10;    venue: Venue,&#13;&#10;    onClick: (Venue) -&gt; Unit = {}&#13;&#10;) {&#13;&#10;    Card(&#13;&#10;        modifier = modifier&#13;&#10;            .fillMaxWidth()&#13;&#10;            .clickable { onClick(venue) },&#13;&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#13;&#10;        shape = RoundedCornerShape(8.dp)&#13;&#10;    ) {&#13;&#10;        Column {&#13;&#10;            // Venue image&#13;&#10;            Image(&#13;&#10;                painter = rememberAsyncImagePainter(venue.image),&#13;&#10;                contentDescription = venue.name,&#13;&#10;                modifier = Modifier&#13;&#10;                    .height(180.dp)&#13;&#10;                    .fillMaxWidth()&#13;&#10;                    .clip(RoundedCornerShape(topStart = 8.dp, topEnd = 8.dp)),&#13;&#10;                contentScale = ContentScale.Crop&#13;&#10;            )&#13;&#10;&#13;&#10;            // Venue details&#13;&#10;            Column(modifier = Modifier.padding(16.dp)) {&#13;&#10;                // Venue name&#13;&#10;                Text(&#13;&#10;                    text = venue.name,&#13;&#10;                    style = MaterialTheme.typography.headlineSmall,&#13;&#10;                    fontWeight = FontWeight.Bold&#13;&#10;                )&#13;&#10;&#13;&#10;                Spacer(modifier = Modifier.height(8.dp))&#13;&#10;&#13;&#10;                // Rating&#13;&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#13;&#10;                    Icon(&#13;&#10;                        imageVector = Icons.Default.Star,&#13;&#10;                        contentDescription = &quot;Rating&quot;,&#13;&#10;                        tint = MaterialTheme.colorScheme.primary&#13;&#10;                    )&#13;&#10;                    Spacer(modifier = Modifier.width(4.dp))&#13;&#10;                    Text(&#13;&#10;                        text = &quot;${venue.rating} (${venue.reviewCount} reviews)&quot;,&#13;&#10;                        style = MaterialTheme.typography.bodyMedium&#13;&#10;                    )&#13;&#10;                }&#13;&#10;&#13;&#10;                Spacer(modifier = Modifier.height(8.dp))&#13;&#10;&#13;&#10;                // Address and distance&#13;&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#13;&#10;                    Icon(&#13;&#10;                        imageVector = Icons.Default.Place,&#13;&#10;                        contentDescription = &quot;Address&quot;,&#13;&#10;                        tint = Color.Gray&#13;&#10;                    )&#13;&#10;                    Spacer(modifier = Modifier.width(4.dp))&#13;&#10;                    Text(&#13;&#10;                        text = venue.address,&#13;&#10;                        style = MaterialTheme.typography.bodyMedium,&#13;&#10;                        color = Color.Gray&#13;&#10;                    )&#13;&#10;                }&#13;&#10;                Spacer(modifier = Modifier.height(4.dp))&#13;&#10;                Text(&#13;&#10;                    text = &quot;Distance: ${venue.distance}&quot;,&#13;&#10;                    style = MaterialTheme.typography.bodyMedium,&#13;&#10;                    color = Color.Gray&#13;&#10;                )&#13;&#10;&#13;&#10;                Spacer(modifier = Modifier.height(8.dp))&#13;&#10;&#13;&#10;                // Amenities&#13;&#10;                Row {&#13;&#10;                    venue.amenities.take(3).forEach { amenity -&gt;&#13;&#10;                        Chip(label = amenity)&#13;&#10;                        Spacer(modifier = Modifier.width(4.dp))&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun Chip(label: String) {&#13;&#10;    Surface(&#13;&#10;        modifier = Modifier.padding(end = 4.dp),&#13;&#10;        shape = RoundedCornerShape(16.dp),&#13;&#10;        color = MaterialTheme.colorScheme.secondaryContainer&#13;&#10;    ) {&#13;&#10;        Text(&#13;&#10;            text = label,&#13;&#10;            style = MaterialTheme.typography.bodySmall,&#13;&#10;            modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp)&#13;&#10;        )&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Preview(showBackground = true)&#13;&#10;@Composable&#13;&#10;fun VenueCardPreview() {&#13;&#10;    PitPulseAndroidTheme {&#13;&#10;        VenueCard(&#13;&#10;            venue = Venue(&#13;&#10;                id = &quot;1&quot;,&#13;&#10;                name = &quot;The Fillmore&quot;,&#13;&#10;                address = &quot;1805 Geary Blvd, San Francisco, CA 94115&quot;,&#13;&#10;                city = &quot;San Francisco&quot;,&#13;&#10;                state = &quot;CA&quot;,&#13;&#10;                zipCode = &quot;94115&quot;,&#13;&#10;                description = &quot;Legendary music venue&quot;,&#13;&#10;                capacity = 1000,&#13;&#10;                amenities = listOf(&quot;Bar&quot;, &quot;Restrooms&quot;, &quot;Merch&quot;),&#13;&#10;                contactInfo = &quot;test@test.com&quot;,&#13;&#10;                image = &quot;&quot;,&#13;&#10;                rating = 4.5f,&#13;&#10;                reviewCount = 120,&#13;&#10;                distance = &quot;1.2 mi&quot;&#13;&#10;            ),&#13;&#10;            onClick = {}&#13;&#10;        )&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeScreen.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.home&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.pitpulseandroid.data.repository.Repository&#10;import com.example.pitpulseandroid.ui.components.SectionHeader&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HomeScreen(&#10;    modifier: Modifier = Modifier,&#10;    viewModel: HomeViewModel = viewModel(factory = HomeViewModelFactory(Repository())),&#10;    onNavigateToVenue: (String) -&gt; Unit = {}&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;&#10;    Column(&#10;        modifier = modifier.fillMaxSize()&#10;    ) {&#10;        when {&#10;            uiState.isLoading -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            }&#10;&#10;            uiState.error != null -&gt; {&#10;                ErrorMessage(&#10;                    error = uiState.error!!,&#10;                    onRetry = { viewModel.retryLoading() }&#10;                )&#10;            }&#10;&#10;            else -&gt; {&#10;                HomeContent(&#10;                    onNavigateToVenue = onNavigateToVenue,&#10;                    onRefresh = { viewModel.refreshData() }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ErrorMessage(&#10;    error: String,&#10;    onRetry: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Text(&#10;            text = error,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            color = MaterialTheme.colorScheme.error,&#10;            textAlign = TextAlign.Center&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Button(onClick = onRetry) {&#10;            Text(&quot;Retry&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun HomeContent(&#10;    onNavigateToVenue: (String) -&gt; Unit,&#10;    onRefresh: () -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    viewModel: HomeViewModel = viewModel(factory = HomeViewModelFactory(Repository()))&#10;) {&#10;    val featuredVenues by viewModel.getFeaturedVenues().collectAsState()&#10;    val popularBands by viewModel.getPopularBands().collectAsState()&#10;    &#10;    LazyColumn(&#10;        modifier = modifier.fillMaxSize(),&#10;        contentPadding = PaddingValues(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        item {&#10;            SectionHeader(title = &quot;Featured Venues&quot;)&#10;        }&#10;&#10;        item {&#10;            FeaturedVenuesSection(&#10;                venues = featuredVenues,&#10;                onNavigateToVenue = onNavigateToVenue&#10;            )&#10;        }&#10;&#10;        item {&#10;            SectionHeader(title = &quot;Popular Bands&quot;)&#10;        }&#10;&#10;        item {&#10;            PopularBandsSection(bands = popularBands)&#10;        }&#10;        &#10;        item {&#10;            Button(onClick = onRefresh) {&#10;                Text(&quot;Refresh Data&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FeaturedVenuesSection(&#10;    venues: List&lt;Venue&gt;,&#10;    onNavigateToVenue: (String) -&gt; Unit&#10;) {&#10;    if (venues.isEmpty()) {&#10;        Text(&quot;No featured venues available&quot;)&#10;    } else {&#10;        venues.forEach { venue -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 4.dp),&#10;                onClick = { onNavigateToVenue(venue.id) }&#10;            ) {&#10;                Column(modifier = Modifier.padding(16.dp)) {&#10;                    Text(&#10;                        text = venue.name,&#10;                        style = MaterialTheme.typography.headlineSmall&#10;                    )&#10;                    Text(&#10;                        text = venue.location,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PopularBandsSection(bands: List&lt;Band&gt;) {&#10;    if (bands.isEmpty()) {&#10;        Text(&quot;No popular bands available&quot;)&#10;    } else {&#10;        bands.forEach { band -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 4.dp)&#10;            ) {&#10;                Column(modifier = Modifier.padding(16.dp)) {&#10;                    Text(&#10;                        text = band.name,&#10;                        style = MaterialTheme.typography.headlineSmall&#10;                    )&#10;                    Text(&#10;                        text = band.genre,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.home&#13;&#10;&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.foundation.lazy.LazyColumn&#13;&#10;import androidx.compose.foundation.lazy.LazyRow&#13;&#10;import androidx.compose.foundation.lazy.items&#13;&#10;import androidx.compose.material.icons.Icons&#13;&#10;import androidx.compose.material.icons.filled.Notifications&#13;&#10;import androidx.compose.material.icons.filled.Refresh&#13;&#10;import androidx.compose.material3.*&#13;&#10;import androidx.compose.runtime.Composable&#13;&#10;import androidx.compose.runtime.collectAsState&#13;&#10;import androidx.compose.runtime.getValue&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.text.style.TextAlign&#13;&#10;import androidx.compose.ui.tooling.preview.Preview&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#13;&#10;import com.example.pitpulseandroid.data.model.Band&#13;&#10;import com.example.pitpulseandroid.data.model.Venue&#13;&#10;import com.example.pitpulseandroid.data.repository.Repository&#13;&#10;import com.example.pitpulseandroid.ui.components.BandCard&#13;&#10;import com.example.pitpulseandroid.ui.components.SectionHeader&#13;&#10;import com.example.pitpulseandroid.ui.components.VenueCard&#13;&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;fun HomeScreen(&#13;&#10;    onVenueClick: (Venue) -&gt; Unit = {},&#13;&#10;    onBandClick: (Band) -&gt; Unit = {},&#13;&#10;    onUserClick: () -&gt; Unit = {},&#13;&#10;    onNotificationClick: () -&gt; Unit = {},&#13;&#10;    homeViewModel: HomeViewModel = viewModel(factory = HomeViewModelFactory(Repository()))&#13;&#10;) {&#13;&#10;    val uiState by homeViewModel.uiState.collectAsState()&#13;&#10;    val featuredVenues by homeViewModel.featuredVenues.collectAsState()&#13;&#10;    val popularBands by homeViewModel.popularBands.collectAsState()&#13;&#10;&#13;&#10;    Scaffold(&#13;&#10;        topBar = {&#13;&#10;            TopAppBar(&#13;&#10;                title = { Text(&quot;PitPulse&quot;) },&#13;&#10;                actions = {&#13;&#10;                    IconButton(onClick = { homeViewModel.refreshData() }) {&#13;&#10;                        Icon(&#13;&#10;                            imageVector = Icons.Default.Refresh,&#13;&#10;                            contentDescription = &quot;Refresh&quot;&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                    IconButton(onClick = onNotificationClick) {&#13;&#10;                        Icon(&#13;&#10;                            imageVector = Icons.Default.Notifications,&#13;&#10;                            contentDescription = &quot;Notifications&quot;&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            )&#13;&#10;        }&#13;&#10;    ) { paddingValues -&gt;&#13;&#10;        when {&#13;&#10;            uiState.isLoading -&gt; {&#13;&#10;                Box(&#13;&#10;                    modifier = Modifier&#13;&#10;                        .fillMaxSize()&#13;&#10;                        .padding(paddingValues),&#13;&#10;                    contentAlignment = Alignment.Center&#13;&#10;                ) {&#13;&#10;                    CircularProgressIndicator()&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            uiState.error != null -&gt; {&#13;&#10;                ErrorMessage(&#13;&#10;                    error = uiState.error!!,&#13;&#10;                    onRetry = { homeViewModel.retryLoading() },&#13;&#10;                    modifier = Modifier.padding(paddingValues)&#13;&#10;                )&#13;&#10;            }&#13;&#10;&#13;&#10;            else -&gt; {&#13;&#10;                LazyColumn(&#13;&#10;                    modifier = Modifier&#13;&#10;                        .fillMaxSize()&#13;&#10;                        .padding(paddingValues),&#13;&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp),&#13;&#10;                    contentPadding = PaddingValues(16.dp)&#13;&#10;                ) {&#13;&#10;                    item {&#13;&#10;                        SectionHeader(&#13;&#10;                            title = &quot;Featured Venues&quot;,&#13;&#10;                            onActionClick = { /* Navigate to all venues */ }&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                    item {&#13;&#10;                        VenueRow(&#13;&#10;                            venues = featuredVenues,&#13;&#10;                            onVenueClick = onVenueClick&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                    item {&#13;&#10;                        SectionHeader(&#13;&#10;                            title = &quot;Popular Bands&quot;,&#13;&#10;                            onActionClick = { /* Navigate to all bands */ }&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                    items(popularBands) { band -&gt;&#13;&#10;                        BandCard(band = band, onBandClick = onBandClick)&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;private fun ErrorMessage(&#13;&#10;    error: String,&#13;&#10;    onRetry: () -&gt; Unit,&#13;&#10;    modifier: Modifier = Modifier&#13;&#10;) {&#13;&#10;    Column(&#13;&#10;        modifier = modifier&#13;&#10;            .fillMaxSize()&#13;&#10;            .padding(16.dp),&#13;&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#13;&#10;        verticalArrangement = Arrangement.Center&#13;&#10;    ) {&#13;&#10;        Text(&#13;&#10;            text = error,&#13;&#10;            style = MaterialTheme.typography.bodyLarge,&#13;&#10;            color = MaterialTheme.colorScheme.error,&#13;&#10;            textAlign = TextAlign.Center&#13;&#10;        )&#13;&#10;&#13;&#10;        Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;        Button(onClick = onRetry) {&#13;&#10;            Text(&quot;Retry&quot;)&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun VenueRow(&#13;&#10;    venues: List&lt;Venue&gt;,&#13;&#10;    onVenueClick: (Venue) -&gt; Unit&#13;&#10;) {&#13;&#10;    LazyRow(&#13;&#10;        horizontalArrangement = Arrangement.spacedBy(16.dp)&#13;&#10;    ) {&#13;&#10;        items(venues) { venue -&gt;&#13;&#10;            VenueCard(&#13;&#10;                venue = venue,&#13;&#10;                onClick = { onVenueClick(venue) }&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Suppress(&quot;unused&quot;)&#13;&#10;@Preview(showBackground = true)&#13;&#10;@Composable&#13;&#10;fun HomeScreenPreview() {&#13;&#10;    PitPulseAndroidTheme {&#13;&#10;        HomeScreen()&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeViewModel.kt.fixed">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeViewModel.kt.fixed" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.home&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.pitpulseandroid.data.repository.Repository&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.data.model.User&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.catch&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * ViewModel for the Home screen.&#10; * This class is used by the Home screen to display venues, bands, and user information.&#10; */&#10;@Suppress(&quot;unused&quot;)&#10;class HomeViewModel(private val repository: Repository) : ViewModel() {&#10;&#10;    // UI state for the Home screen&#10;    private val _uiState = MutableStateFlow(HomeUiState())&#10;    &#10;    /**&#10;     * Public accessor for the UI state.&#10;     * This is observed by the Home screen to display content and handle loading/error states.&#10;     */&#10;    @Suppress(&quot;unused&quot;)&#10;    val uiState: StateFlow&lt;HomeUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        // Initialize repository with mock data&#10;        repository.initMockData()&#10;        loadData()&#10;    }&#10;&#10;    /**&#10;     * Load all data needed for the Home screen.&#10;     */&#10;    private fun loadData() {&#10;        viewModelScope.launch {&#10;            // Load venues&#10;            repository.getVenues()&#10;                .catch { &#10;                    _uiState.value = _uiState.value.copy(error = it.message)&#10;                    // Load sample venues as fallback&#10;                    _uiState.value = _uiState.value.copy(&#10;                        venues = getSampleVenues(),&#10;                        isLoading = false&#10;                    )&#10;                }&#10;                .collect { venues -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        venues = venues,&#10;                        isLoading = false&#10;                    )&#10;                }&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            // Load bands&#10;            repository.getBands()&#10;                .catch { &#10;                    _uiState.value = _uiState.value.copy(error = it.message)&#10;                    // Load sample bands as fallback&#10;                    _uiState.value = _uiState.value.copy(&#10;                        bands = getSampleBands(),&#10;                        isLoading = false&#10;                    )&#10;                }&#10;                .collect { bands -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        bands = bands,&#10;                        isLoading = false&#10;                    )&#10;                }&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            // Load user&#10;            repository.getCurrentUser()&#10;                .catch { _uiState.value = _uiState.value.copy(error = it.message) }&#10;                .collect { user -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        user = user,&#10;                        isLoading = false&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Search venues and bands.&#10;     */&#10;    @Suppress(&quot;unused&quot;)&#10;    fun search(query: String) {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isSearching = true)&#10;&#10;            repository.searchVenues(query)&#10;                .catch { _uiState.value = _uiState.value.copy(error = it.message) }&#10;                .collect { venues -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        venues = venues,&#10;                        isSearching = false&#10;                    )&#10;                }&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            repository.searchBands(query)&#10;                .catch { _uiState.value = _uiState.value.copy(error = it.message) }&#10;                .collect { bands -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        bands = bands,&#10;                        isSearching = false&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get sample venues data for testing or fallback.&#10;     */&#10;    private fun getSampleVenues(): List&lt;Venue&gt; {&#10;        return listOf(&#10;            Venue(&#10;                id = &quot;v1&quot;,&#10;                name = &quot;The Sound Garden&quot;,&#10;                address = &quot;123 Main St&quot;,&#10;                city = &quot;Brooklyn&quot;,&#10;                state = &quot;NY&quot;,&#10;                zipCode = &quot;11201&quot;,&#10;                description = &quot;A legendary venue known for launching indie bands&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1035/500/300&quot;,&#10;                rating = 4.5f,&#10;                reviewCount = 120,&#10;                capacity = 500,&#10;                contactInfo = &quot;info@soundgarden.com&quot;,&#10;                distance = 0.8f&#10;            ),&#10;            Venue(&#10;                id = &quot;v2&quot;,&#10;                name = &quot;Electric Avenue&quot;,&#10;                address = &quot;456 Park Ave&quot;,&#10;                city = &quot;Brooklyn&quot;,&#10;                state = &quot;NY&quot;,&#10;                zipCode = &quot;11205&quot;,&#10;                description = &quot;Modern venue with great acoustics and lighting&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1036/500/300&quot;,&#10;                rating = 4.2f,&#10;                reviewCount = 85,&#10;                capacity = 350,&#10;                contactInfo = &quot;contact@electricavenue.com&quot;,&#10;                distance = 1.2f&#10;            ),&#10;            Venue(&#10;                id = &quot;v3&quot;,&#10;                name = &quot;The Basement&quot;,&#10;                address = &quot;789 Broadway&quot;,&#10;                city = &quot;Brooklyn&quot;,&#10;                state = &quot;NY&quot;,&#10;                zipCode = &quot;11206&quot;,&#10;                description = &quot;Underground venue featuring indie bands and craft beer&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1037/500/300&quot;,&#10;                rating = 4.8f,&#10;                reviewCount = 210,&#10;                capacity = 200,&#10;                contactInfo = &quot;basement@music.com&quot;,&#10;                distance = 1.5f&#10;            )&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Get sample bands data for testing or fallback.&#10;     */&#10;    private fun getSampleBands(): List&lt;Band&gt; {&#10;        return listOf(&#10;            Band(&#10;                id = &quot;b1&quot;,&#10;                name = &quot;Electric Harmony&quot;,&#10;                genre = &quot;Rock&quot;,&#10;                bio = &quot;A four-piece band known for energetic performances&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1038/500/300&quot;,&#10;                formationYear = 2018,&#10;                location = &quot;Brooklyn, NY&quot;,&#10;                rating = 4.7f,&#10;                reviewCount = 156,&#10;                genres = listOf(&quot;Rock&quot;, &quot;Alternative&quot;, &quot;Indie&quot;),&#10;                nextShow = &quot;Tonight at The Sound Garden&quot;&#10;            ),&#10;            Band(&#10;                id = &quot;b2&quot;,&#10;                name = &quot;Midnight Groove&quot;,&#10;                genre = &quot;R&amp;B&quot;,&#10;                bio = &quot;Soul collective bringing back classic sounds with a modern twist&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1039/500/300&quot;,&#10;                formationYear = 2016,&#10;                location = &quot;Queens, NY&quot;,&#10;                rating = 4.3f,&#10;                reviewCount = 98,&#10;                genres = listOf(&quot;R&amp;B&quot;, &quot;Soul&quot;, &quot;Funk&quot;),&#10;                nextShow = &quot;Tomorrow at Electric Avenue&quot;&#10;            ),&#10;            Band(&#10;                id = &quot;b3&quot;,&#10;                name = &quot;Cosmic Travelers&quot;,&#10;                genre = &quot;Psychedelic&quot;,&#10;                bio = &quot;Experimental space rock outfit pushing musical boundaries&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1040/500/300&quot;,&#10;                formationYear = 2020,&#10;                location = &quot;Manhattan, NY&quot;,&#10;                rating = 4.9f,&#10;                reviewCount = 230,&#10;                genres = listOf(&quot;Psychedelic&quot;, &quot;Space Rock&quot;, &quot;Experimental&quot;),&#10;                nextShow = &quot;Sat at The Basement&quot;&#10;            )&#10;        )&#10;    }&#10;}&#10;&#10;/**&#10; * UI state for the Home screen.&#10; */&#10;data class HomeUiState(&#10;    val venues: List&lt;Venue&gt; = emptyList(),&#10;    val bands: List&lt;Band&gt; = emptyList(),&#10;    val user: User? = null,&#10;    val isLoading: Boolean = true,&#10;    val isSearching: Boolean = false,&#10;    val error: String? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeViewModel.kt.new">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeViewModel.kt.new" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.home&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.pitpulseandroid.data.repository.Repository&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.data.model.User&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.catch&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * ViewModel for the Home screen.&#10; */&#10;class HomeViewModel(private val repository: Repository) : ViewModel() {&#10;&#10;    // UI state for the Home screen&#10;    private val _uiState = MutableStateFlow(HomeUiState())&#10;    val uiState: StateFlow&lt;HomeUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        // Initialize repository with mock data&#10;        repository.initMockData()&#10;        loadData()&#10;    }&#10;&#10;    /**&#10;     * Load all data needed for the Home screen.&#10;     */&#10;    private fun loadData() {&#10;        viewModelScope.launch {&#10;            // Load venues&#10;            repository.getVenues()&#10;                .catch { &#10;                    _uiState.value = _uiState.value.copy(error = it.message)&#10;                    // Load sample venues as fallback&#10;                    _uiState.value = _uiState.value.copy(&#10;                        venues = getSampleVenues(),&#10;                        isLoading = false&#10;                    )&#10;                }&#10;                .collect { venues -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        venues = venues,&#10;                        isLoading = false&#10;                    )&#10;                }&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            // Load bands&#10;            repository.getBands()&#10;                .catch { &#10;                    _uiState.value = _uiState.value.copy(error = it.message)&#10;                    // Load sample bands as fallback&#10;                    _uiState.value = _uiState.value.copy(&#10;                        bands = getSampleBands(),&#10;                        isLoading = false&#10;                    )&#10;                }&#10;                .collect { bands -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        bands = bands,&#10;                        isLoading = false&#10;                    )&#10;                }&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            // Load user&#10;            repository.getCurrentUser()&#10;                .catch { _uiState.value = _uiState.value.copy(error = it.message) }&#10;                .collect { user -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        user = user,&#10;                        isLoading = false&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Search venues and bands.&#10;     */&#10;    fun search(query: String) {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isSearching = true)&#10;&#10;            repository.searchVenues(query)&#10;                .catch { _uiState.value = _uiState.value.copy(error = it.message) }&#10;                .collect { venues -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        venues = venues,&#10;                        isSearching = false&#10;                    )&#10;                }&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            repository.searchBands(query)&#10;                .catch { _uiState.value = _uiState.value.copy(error = it.message) }&#10;                .collect { bands -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        bands = bands,&#10;                        isSearching = false&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get sample venues data for testing or fallback.&#10;     */&#10;    private fun getSampleVenues(): List&lt;Venue&gt; {&#10;        return listOf(&#10;            Venue(&#10;                id = &quot;v1&quot;,&#10;                name = &quot;The Sound Garden&quot;,&#10;                address = &quot;123 Main St&quot;,&#10;                city = &quot;Brooklyn&quot;,&#10;                state = &quot;NY&quot;,&#10;                zipCode = &quot;11201&quot;,&#10;                description = &quot;A legendary venue known for launching indie bands&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1035/500/300&quot;,&#10;                rating = 4.5f,&#10;                reviewCount = 120,&#10;                capacity = 500,&#10;                contactInfo = &quot;info@soundgarden.com&quot;,&#10;                distance = 0.8f&#10;            ),&#10;            Venue(&#10;                id = &quot;v2&quot;,&#10;                name = &quot;Electric Avenue&quot;,&#10;                address = &quot;456 Park Ave&quot;,&#10;                city = &quot;Brooklyn&quot;,&#10;                state = &quot;NY&quot;,&#10;                zipCode = &quot;11205&quot;,&#10;                description = &quot;Modern venue with great acoustics and lighting&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1036/500/300&quot;,&#10;                rating = 4.2f,&#10;                reviewCount = 85,&#10;                capacity = 350,&#10;                contactInfo = &quot;contact@electricavenue.com&quot;,&#10;                distance = 1.2f&#10;            ),&#10;            Venue(&#10;                id = &quot;v3&quot;,&#10;                name = &quot;The Basement&quot;,&#10;                address = &quot;789 Broadway&quot;,&#10;                city = &quot;Brooklyn&quot;,&#10;                state = &quot;NY&quot;,&#10;                zipCode = &quot;11206&quot;,&#10;                description = &quot;Underground venue featuring indie bands and craft beer&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1037/500/300&quot;,&#10;                rating = 4.8f,&#10;                reviewCount = 210,&#10;                capacity = 200,&#10;                contactInfo = &quot;basement@music.com&quot;,&#10;                distance = 1.5f&#10;            )&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Get sample bands data for testing or fallback.&#10;     */&#10;    private fun getSampleBands(): List&lt;Band&gt; {&#10;        return listOf(&#10;            Band(&#10;                id = &quot;b1&quot;,&#10;                name = &quot;Electric Harmony&quot;,&#10;                genre = &quot;Rock&quot;,&#10;                bio = &quot;A four-piece band known for energetic performances&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1038/500/300&quot;,&#10;                formationYear = 2018,&#10;                location = &quot;Brooklyn, NY&quot;,&#10;                rating = 4.7f,&#10;                reviewCount = 156,&#10;                genres = listOf(&quot;Rock&quot;, &quot;Alternative&quot;, &quot;Indie&quot;),&#10;                nextShow = &quot;Tonight at The Sound Garden&quot;&#10;            ),&#10;            Band(&#10;                id = &quot;b2&quot;,&#10;                name = &quot;Midnight Groove&quot;,&#10;                genre = &quot;R&amp;B&quot;,&#10;                bio = &quot;Soul collective bringing back classic sounds with a modern twist&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1039/500/300&quot;,&#10;                formationYear = 2016,&#10;                location = &quot;Queens, NY&quot;,&#10;                rating = 4.3f,&#10;                reviewCount = 98,&#10;                genres = listOf(&quot;R&amp;B&quot;, &quot;Soul&quot;, &quot;Funk&quot;),&#10;                nextShow = &quot;Tomorrow at Electric Avenue&quot;&#10;            ),&#10;            Band(&#10;                id = &quot;b3&quot;,&#10;                name = &quot;Cosmic Travelers&quot;,&#10;                genre = &quot;Psychedelic&quot;,&#10;                bio = &quot;Experimental space rock outfit pushing musical boundaries&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1040/500/300&quot;,&#10;                formationYear = 2020,&#10;                location = &quot;Manhattan, NY&quot;,&#10;                rating = 4.9f,&#10;                reviewCount = 230,&#10;                genres = listOf(&quot;Psychedelic&quot;, &quot;Space Rock&quot;, &quot;Experimental&quot;),&#10;                nextShow = &quot;Sat at The Basement&quot;&#10;            )&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Factory for creating HomeViewModel instances.&#10;     */&#10;    class Factory : ViewModelProvider.Factory {&#10;        @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;        override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;            if (modelClass.isAssignableFrom(HomeViewModel::class.java)) {&#10;                return HomeViewModel(Repository()) as T&#10;            }&#10;            throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * UI state for the Home screen.&#10; */&#10;data class HomeUiState(&#10;    val venues: List&lt;Venue&gt; = emptyList(),&#10;    val bands: List&lt;Band&gt; = emptyList(),&#10;    val user: User? = null,&#10;    val isLoading: Boolean = true,&#10;    val isSearching: Boolean = false,&#10;    val error: String? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeViewModel.kt.updated">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeViewModel.kt.updated" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.home&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.pitpulseandroid.data.repository.Repository&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.data.model.User&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.catch&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * ViewModel for the Home screen.&#10; * This class is used by the Home screen to display venues, bands, and user information.&#10; */&#10;class HomeViewModel(private val repository: Repository) : ViewModel() {&#10;&#10;    // UI state for the Home screen&#10;    private val _uiState = MutableStateFlow(HomeUiState())&#10;    &#10;    /**&#10;     * Public accessor for the UI state.&#10;     * This is observed by the Home screen to display content and handle loading/error states.&#10;     */&#10;    val uiState: StateFlow&lt;HomeUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        // Initialize repository with mock data&#10;        repository.initMockData()&#10;        loadData()&#10;    }&#10;&#10;    /**&#10;     * Load all data needed for the Home screen.&#10;     */&#10;    private fun loadData() {&#10;        viewModelScope.launch {&#10;            // Load venues&#10;            repository.getVenues()&#10;                .catch { &#10;                    _uiState.value = _uiState.value.copy(error = it.message)&#10;                    // Load sample venues as fallback&#10;                    _uiState.value = _uiState.value.copy(&#10;                        venues = getSampleVenues(),&#10;                        isLoading = false&#10;                    )&#10;                }&#10;                .collect { venues -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        venues = venues,&#10;                        isLoading = false&#10;                    )&#10;                }&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            // Load bands&#10;            repository.getBands()&#10;                .catch { &#10;                    _uiState.value = _uiState.value.copy(error = it.message)&#10;                    // Load sample bands as fallback&#10;                    _uiState.value = _uiState.value.copy(&#10;                        bands = getSampleBands(),&#10;                        isLoading = false&#10;                    )&#10;                }&#10;                .collect { bands -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        bands = bands,&#10;                        isLoading = false&#10;                    )&#10;                }&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            // Load user&#10;            repository.getCurrentUser()&#10;                .catch { _uiState.value = _uiState.value.copy(error = it.message) }&#10;                .collect { user -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        user = user,&#10;                        isLoading = false&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Search venues and bands.&#10;     */&#10;    fun search(query: String) {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isSearching = true)&#10;&#10;            repository.searchVenues(query)&#10;                .catch { _uiState.value = _uiState.value.copy(error = it.message) }&#10;                .collect { venues -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        venues = venues,&#10;                        isSearching = false&#10;                    )&#10;                }&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            repository.searchBands(query)&#10;                .catch { _uiState.value = _uiState.value.copy(error = it.message) }&#10;                .collect { bands -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        bands = bands,&#10;                        isSearching = false&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get sample venues data for testing or fallback.&#10;     */&#10;    private fun getSampleVenues(): List&lt;Venue&gt; {&#10;        return listOf(&#10;            Venue(&#10;                id = &quot;v1&quot;,&#10;                name = &quot;The Sound Garden&quot;,&#10;                address = &quot;123 Main St&quot;,&#10;                city = &quot;Brooklyn&quot;,&#10;                state = &quot;NY&quot;,&#10;                zipCode = &quot;11201&quot;,&#10;                description = &quot;A legendary venue known for launching indie bands&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1035/500/300&quot;,&#10;                rating = 4.5f,&#10;                reviewCount = 120,&#10;                capacity = 500,&#10;                contactInfo = &quot;info@soundgarden.com&quot;,&#10;                distance = 0.8f&#10;            ),&#10;            Venue(&#10;                id = &quot;v2&quot;,&#10;                name = &quot;Electric Avenue&quot;,&#10;                address = &quot;456 Park Ave&quot;,&#10;                city = &quot;Brooklyn&quot;,&#10;                state = &quot;NY&quot;,&#10;                zipCode = &quot;11205&quot;,&#10;                description = &quot;Modern venue with great acoustics and lighting&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1036/500/300&quot;,&#10;                rating = 4.2f,&#10;                reviewCount = 85,&#10;                capacity = 350,&#10;                contactInfo = &quot;contact@electricavenue.com&quot;,&#10;                distance = 1.2f&#10;            ),&#10;            Venue(&#10;                id = &quot;v3&quot;,&#10;                name = &quot;The Basement&quot;,&#10;                address = &quot;789 Broadway&quot;,&#10;                city = &quot;Brooklyn&quot;,&#10;                state = &quot;NY&quot;,&#10;                zipCode = &quot;11206&quot;,&#10;                description = &quot;Underground venue featuring indie bands and craft beer&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1037/500/300&quot;,&#10;                rating = 4.8f,&#10;                reviewCount = 210,&#10;                capacity = 200,&#10;                contactInfo = &quot;basement@music.com&quot;,&#10;                distance = 1.5f&#10;            )&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Get sample bands data for testing or fallback.&#10;     */&#10;    private fun getSampleBands(): List&lt;Band&gt; {&#10;        return listOf(&#10;            Band(&#10;                id = &quot;b1&quot;,&#10;                name = &quot;Electric Harmony&quot;,&#10;                genre = &quot;Rock&quot;,&#10;                bio = &quot;A four-piece band known for energetic performances&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1038/500/300&quot;,&#10;                formationYear = 2018,&#10;                location = &quot;Brooklyn, NY&quot;,&#10;                rating = 4.7f,&#10;                reviewCount = 156,&#10;                genres = listOf(&quot;Rock&quot;, &quot;Alternative&quot;, &quot;Indie&quot;),&#10;                nextShow = &quot;Tonight at The Sound Garden&quot;&#10;            ),&#10;            Band(&#10;                id = &quot;b2&quot;,&#10;                name = &quot;Midnight Groove&quot;,&#10;                genre = &quot;R&amp;B&quot;,&#10;                bio = &quot;Soul collective bringing back classic sounds with a modern twist&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1039/500/300&quot;,&#10;                formationYear = 2016,&#10;                location = &quot;Queens, NY&quot;,&#10;                rating = 4.3f,&#10;                reviewCount = 98,&#10;                genres = listOf(&quot;R&amp;B&quot;, &quot;Soul&quot;, &quot;Funk&quot;),&#10;                nextShow = &quot;Tomorrow at Electric Avenue&quot;&#10;            ),&#10;            Band(&#10;                id = &quot;b3&quot;,&#10;                name = &quot;Cosmic Travelers&quot;,&#10;                genre = &quot;Psychedelic&quot;,&#10;                bio = &quot;Experimental space rock outfit pushing musical boundaries&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1040/500/300&quot;,&#10;                formationYear = 2020,&#10;                location = &quot;Manhattan, NY&quot;,&#10;                rating = 4.9f,&#10;                reviewCount = 230,&#10;                genres = listOf(&quot;Psychedelic&quot;, &quot;Space Rock&quot;, &quot;Experimental&quot;),&#10;                nextShow = &quot;Sat at The Basement&quot;&#10;            )&#10;        )&#10;    }&#10;}&#10;&#10;/**&#10; * UI state for the Home screen.&#10; */&#10;data class HomeUiState(&#10;    val venues: List&lt;Venue&gt; = emptyList(),&#10;    val bands: List&lt;Band&gt; = emptyList(),&#10;    val user: User? = null,&#10;    val isLoading: Boolean = true,&#10;    val isSearching: Boolean = false,&#10;    val error: String? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeViewModelFactory.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeViewModelFactory.kt" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.home&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import com.example.pitpulseandroid.data.repository.Repository&#10;&#10;class HomeViewModelFactory(private val repository: Repository) : ViewModelProvider.Factory {&#10;    @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;    override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;        if (modelClass.isAssignableFrom(HomeViewModel::class.java)) {&#10;            return HomeViewModel(repository) as T&#10;        }&#10;        throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/profile/ProfileScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/profile/ProfileScreen.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.profile&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Info&#10;import androidx.compose.material.icons.filled.Notifications&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Divider&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProfileScreen(&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    // This would be user data from a repository in a real app&#10;    val userName = &quot;John Doe&quot;&#10;    val userEmail = &quot;john.doe@example.com&quot;&#10;    var notificationsEnabled by remember { mutableStateOf(true) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Profile&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { /* Open settings */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Settings,&#10;                            contentDescription = &quot;Settings&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Profile header&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // Profile image&#10;                Surface(&#10;                    modifier = Modifier&#10;                        .size(120.dp)&#10;                        .clip(CircleShape),&#10;                    color = MaterialTheme.colorScheme.primaryContainer&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Profile picture&quot;,&#10;                        modifier = Modifier&#10;                            .padding(24.dp)&#10;                            .size(72.dp)&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Text(&#10;                    text = userName,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Text(&#10;                    text = userEmail,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Button(&#10;                    onClick = { /* Edit profile */ }&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Edit,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.padding(end = 8.dp)&#10;                    )&#10;                    Text(&quot;Edit Profile&quot;)&#10;                }&#10;            }&#10;&#10;            Divider()&#10;&#10;            // Profile sections&#10;            ProfileSection(&#10;                title = &quot;Account Settings&quot;,&#10;                items = listOf(&#10;                    ProfileMenuItem(&quot;Notifications&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.SpaceBetween&#10;                        ) {&#10;                            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Notifications,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.padding(end = 16.dp)&#10;                                )&#10;                                Text(&quot;Push Notifications&quot;)&#10;                            }&#10;                            Switch(&#10;                                checked = notificationsEnabled,&#10;                                onCheckedChange = { notificationsEnabled = it }&#10;                            )&#10;                        }&#10;                    },&#10;                    ProfileMenuItem(&quot;Privacy Settings&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Info,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.padding(end = 16.dp)&#10;                            )&#10;                            Text(&quot;Privacy Settings&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            )&#10;&#10;            Divider()&#10;&#10;            ProfileSection(&#10;                title = &quot;Content&quot;,&#10;                items = listOf(&#10;                    ProfileMenuItem(&quot;Favorite Venues&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Favorite,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.padding(end = 16.dp)&#10;                            )&#10;                            Text(&quot;Favorite Venues&quot;)&#10;                        }&#10;                    },&#10;                    ProfileMenuItem(&quot;Following Bands&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Star,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.padding(end = 16.dp)&#10;                            )&#10;                            Text(&quot;Following Bands&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            )&#10;&#10;            Divider()&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = { /* Sign out */ },&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;Sign Out&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileSection(&#10;    title: String,&#10;    items: List&lt;ProfileMenuItem&gt;&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 16.dp)&#10;    ) {&#10;        Text(&#10;            text = title,&#10;            style = MaterialTheme.typography.titleMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        items.forEach { item -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 4.dp)&#10;            ) {&#10;                item.content()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;data class ProfileMenuItem(&#10;    val title: String,&#10;    val content: @Composable () -&gt; Unit&#10;)&#10;&#10;@Preview&#10;@Composable&#10;fun ProfileScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        ProfileScreen(&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.profile&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Info&#10;import androidx.compose.material.icons.filled.Notifications&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProfileScreen(&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    // This would be user data from a repository in a real app&#10;    val userName = &quot;John Doe&quot;&#10;    val userEmail = &quot;john.doe@example.com&quot;&#10;    var notificationsEnabled by remember { mutableStateOf(true) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Profile&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { /* Open settings */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Settings,&#10;                            contentDescription = &quot;Settings&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Profile header&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // Profile image&#10;                Surface(&#10;                    modifier = Modifier&#10;                        .size(120.dp)&#10;                        .clip(CircleShape),&#10;                    color = MaterialTheme.colorScheme.primaryContainer&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Profile picture&quot;,&#10;                        modifier = Modifier&#10;                            .padding(24.dp)&#10;                            .size(72.dp)&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Text(&#10;                    text = userName,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Text(&#10;                    text = userEmail,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Button(&#10;                    onClick = { /* Edit profile */ }&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Edit,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.padding(end = 8.dp)&#10;                    )&#10;                    Text(&quot;Edit Profile&quot;)&#10;                }&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Profile sections&#10;            ProfileSection(&#10;                title = &quot;Account Settings&quot;,&#10;                items = listOf(&#10;                    ProfileMenuItem(&quot;Notifications&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.SpaceBetween&#10;                        ) {&#10;                            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Notifications,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.padding(end = 16.dp)&#10;                                )&#10;                                Text(&quot;Push Notifications&quot;)&#10;                            }&#10;                            Switch(&#10;                                checked = notificationsEnabled,&#10;                                onCheckedChange = { notificationsEnabled = it }&#10;                            )&#10;                        }&#10;                    },&#10;                    ProfileMenuItem(&quot;Privacy Settings&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Info,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.padding(end = 16.dp)&#10;                            )&#10;                            Text(&quot;Privacy Settings&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            )&#10;&#10;            HorizontalDivider()&#10;&#10;            ProfileSection(&#10;                title = &quot;Content&quot;,&#10;                items = listOf(&#10;                    ProfileMenuItem(&quot;Favorite Venues&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Favorite,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.padding(end = 16.dp)&#10;                            )&#10;                            Text(&quot;Favorite Venues&quot;)&#10;                        }&#10;                    },&#10;                    ProfileMenuItem(&quot;Following Bands&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Star,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.padding(end = 16.dp)&#10;                            )&#10;                            Text(&quot;Following Bands&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            )&#10;&#10;            HorizontalDivider()&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = { /* Sign out */ },&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;Sign Out&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileSection(&#10;    title: String,&#10;    items: List&lt;ProfileMenuItem&gt;&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 16.dp)&#10;    ) {&#10;        Text(&#10;            text = title,&#10;            style = MaterialTheme.typography.titleMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        items.forEach { item -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 4.dp)&#10;            ) {&#10;                item.content()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;data class ProfileMenuItem(&#10;    val title: String,&#10;    val content: @Composable () -&gt; Unit&#10;)&#10;&#10;@Preview&#10;@Composable&#10;fun ProfileScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        ProfileScreen(&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/profile/ProfileViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/profile/ProfileViewModel.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.profile&#10;&#10;import androidx.lifecycle.ViewModel&#10;import com.example.pitpulseandroid.data.model.*&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;&#10;/**&#10; * ViewModel for the Profile screen.&#10; * This is used in the Profile screen to display user profile information.&#10; */&#10;class ProfileViewModel : ViewModel() {&#10;    // Mock data for user profile&#10;    private val _userProfile = MutableStateFlow(&#10;        UserProfile(&#10;            user = User(&#10;                id = &quot;u1&quot;,&#10;                username = &quot;alexjmusic&quot;,&#10;                email = &quot;alex.j@example.com&quot;,&#10;                level = 4,&#10;                reviewCount = 42,&#10;                badgeCount = 8,&#10;                badges = listOf(&#10;                    Badge(&#10;                        id = &quot;badge1&quot;,&#10;                        name = &quot;Review Pro&quot;,&#10;                        description = &quot;Posted 25+ reviews&quot;,&#10;                        imageUrl = &quot;&quot;,&#10;                        icon = 0,&#10;                        badgeType = BadgeType.REVIEW,&#10;                        threshold = 25&#10;                    ),&#10;                    Badge(&#10;                        id = &quot;badge2&quot;,&#10;                        name = &quot;Venue Explorer&quot;,&#10;                        description = &quot;Visited 10+ venues&quot;,&#10;                        imageUrl = &quot;&quot;,&#10;                        icon = 0,&#10;                        badgeType = BadgeType.VENUE_VISIT,&#10;                        threshold = 10&#10;                    )&#10;                ),&#10;                profileImageUrl = &quot;https://picsum.photos/id/1012/300/300&quot;,&#10;                bio = &quot;Music enthusiast and concert-goer. Always on the lookout for new sounds and experiences. Based in Brooklyn, NY.&quot;,&#10;                joinDate = &quot;January 2023&quot;&#10;            ),&#10;            favoriteVenues = listOf(&quot;venue1&quot;, &quot;venue2&quot;),&#10;            favoriteBands = listOf(&quot;band1&quot;, &quot;band3&quot;),&#10;            recentActivity = listOf(&#10;                UserActivity(&#10;                    id = &quot;activity1&quot;,&#10;                    type = ActivityType.REVIEW_ADDED,&#10;                    timestamp = &quot;2023-08-15&quot;,&#10;                    details = &quot;Reviewed The Sound Garden&quot;,&#10;                    relatedEntityId = &quot;venue1&quot;&#10;                ),&#10;                UserActivity(&#10;                    id = &quot;activity2&quot;,&#10;                    type = ActivityType.BADGE_EARNED,&#10;                    timestamp = &quot;2023-07-28&quot;,&#10;                    details = &quot;Earned the Review Pro badge&quot;,&#10;                    relatedEntityId = &quot;badge1&quot;&#10;                )&#10;            )&#10;        )&#10;    )&#10;&#10;    /**&#10;     * Public accessor for the user profile.&#10;     * This is observed by the Profile screen to display user information.&#10;     */&#10;    val userProfile: StateFlow&lt;UserProfile&gt; = _userProfile&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.profile&#13;&#10;&#13;&#10;import androidx.lifecycle.ViewModel&#13;&#10;import com.example.pitpulseandroid.data.model.*&#13;&#10;import kotlinx.coroutines.flow.MutableStateFlow&#13;&#10;import kotlinx.coroutines.flow.StateFlow&#13;&#10;&#13;&#10;/**&#13;&#10; * ViewModel for the Profile screen.&#13;&#10; * This is used in the Profile screen to display user profile information.&#13;&#10; */&#13;&#10;@Suppress(&quot;unused&quot;)&#13;&#10;class ProfileViewModel : ViewModel() {&#13;&#10;    // Mock data for user profile&#13;&#10;    private val _userProfile = MutableStateFlow(&#13;&#10;        UserProfile(&#13;&#10;            user = User(&#13;&#10;                id = &quot;u1&quot;,&#13;&#10;                username = &quot;alexjmusic&quot;,&#13;&#10;                email = &quot;alex.j@example.com&quot;,&#13;&#10;                level = 4,&#13;&#10;                reviewCount = 42,&#13;&#10;                badgeCount = 8,&#13;&#10;                badges = listOf(&#13;&#10;                    Badge(&#13;&#10;                        id = &quot;badge1&quot;,&#13;&#10;                        name = &quot;Review Pro&quot;,&#13;&#10;                        description = &quot;Posted 25+ reviews&quot;,&#13;&#10;                        imageUrl = &quot;&quot;,&#13;&#10;                        icon = 0,&#13;&#10;                        badgeType = BadgeType.REVIEW,&#13;&#10;                        threshold = 25&#13;&#10;                    ),&#13;&#10;                    Badge(&#13;&#10;                        id = &quot;badge2&quot;,&#13;&#10;                        name = &quot;Venue Explorer&quot;,&#13;&#10;                        description = &quot;Visited 10+ venues&quot;,&#13;&#10;                        imageUrl = &quot;&quot;,&#13;&#10;                        icon = 0,&#13;&#10;                        badgeType = BadgeType.VENUE_VISIT,&#13;&#10;                        threshold = 10&#13;&#10;                    )&#13;&#10;                ),&#13;&#10;                profileImageUrl = &quot;https://picsum.photos/id/1012/300/300&quot;,&#13;&#10;                bio = &quot;Music enthusiast and concert-goer. Always on the lookout for new sounds and experiences. Based in Brooklyn, NY.&quot;,&#13;&#10;                joinDate = &quot;January 2023&quot;&#13;&#10;            ),&#13;&#10;            favoriteVenues = listOf(&quot;venue1&quot;, &quot;venue2&quot;),&#13;&#10;            favoriteBands = listOf(&quot;band1&quot;, &quot;band3&quot;),&#13;&#10;            recentActivity = listOf(&#13;&#10;                UserActivity(&#13;&#10;                    id = &quot;activity1&quot;,&#13;&#10;                    type = ActivityType.REVIEW_ADDED,&#13;&#10;                    timestamp = &quot;2023-08-15&quot;,&#13;&#10;                    details = &quot;Reviewed The Sound Garden&quot;,&#13;&#10;                    relatedEntityId = &quot;venue1&quot;&#13;&#10;                ),&#13;&#10;                UserActivity(&#13;&#10;                    id = &quot;activity2&quot;,&#13;&#10;                    type = ActivityType.BADGE_EARNED,&#13;&#10;                    timestamp = &quot;2023-07-28&quot;,&#13;&#10;                    details = &quot;Earned the Review Pro badge&quot;,&#13;&#10;                    relatedEntityId = &quot;badge1&quot;&#13;&#10;                )&#13;&#10;            )&#13;&#10;        )&#13;&#10;    )&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Public accessor for the user profile.&#13;&#10;     * This is observed by the Profile screen to display user information.&#13;&#10;     */&#13;&#10;    @Suppress(&quot;unused&quot;)&#13;&#10;    val userProfile: StateFlow&lt;UserProfile&gt; = _userProfile&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/theme/Color.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/theme/Color.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.theme&#10;&#10;import androidx.compose.ui.graphics.Color&#10;&#10;// Only keeping the colors that are actually used&#10;val Purple600 = Color(0xFF4B01D0)  // Used in UserStatsCard&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.theme&#13;&#10;&#13;&#10;import androidx.compose.ui.graphics.Color&#13;&#10;&#13;&#10;// Primary colors&#13;&#10;val Purple600 = Color(0xFF4B01D0)  // Used in UserStatsCard&#13;&#10;&#13;&#10;// Rating colors&#13;&#10;val Yellow500 = Color(0xFFFFC107)  // Used in RatingComponent" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/theme/Theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/theme/Theme.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.theme&#10;&#10;import android.app.Activity&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.SideEffect&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalView&#10;import androidx.core.view.WindowCompat&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Color(0xFF6200EE),&#10;    secondary = Color(0xFF03DAC5),&#10;    tertiary = Color(0xFF3700B3),&#10;    background = Color(0xFF121212),&#10;    surface = Color(0xFF121212),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.Black,&#10;    onTertiary = Color.White,&#10;    onBackground = Color.White,&#10;    onSurface = Color.White&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Color(0xFF6200EE),&#10;    secondary = Color(0xFF03DAC5),&#10;    tertiary = Color(0xFF3700B3),&#10;    background = Color.White,&#10;    surface = Color.White,&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.Black,&#10;    onTertiary = Color.White,&#10;    onBackground = Color.Black,&#10;    onSurface = Color.Black&#10;)&#10;&#10;@Composable&#10;fun PitPulseAndroidTheme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;    val view = LocalView.current&#10;    if (!view.isInEditMode) {&#10;        SideEffect {&#10;            val window = (view.context as Activity).window&#10;            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = !darkTheme&#10;        }&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.theme&#10;&#10;import android.app.Activity&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.SideEffect&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalView&#10;import androidx.core.view.WindowCompat&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Color(0xFF6200EE),&#10;    secondary = Color(0xFF03DAC5),&#10;    tertiary = Color(0xFF3700B3),&#10;    background = Color(0xFF121212),&#10;    surface = Color(0xFF121212),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.Black,&#10;    onTertiary = Color.White,&#10;    onBackground = Color.White,&#10;    onSurface = Color.White&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Color(0xFF6200EE),&#10;    secondary = Color(0xFF03DAC5),&#10;    tertiary = Color(0xFF3700B3),&#10;    background = Color.White,&#10;    surface = Color.White,&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.Black,&#10;    onTertiary = Color.White,&#10;    onBackground = Color.Black,&#10;    onSurface = Color.Black&#10;)&#10;&#10;@Composable&#10;fun PitPulseAndroidTheme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;    val view = LocalView.current&#10;    if (!view.isInEditMode) {&#10;        SideEffect {&#10;            val window = (view.context as Activity).window&#10;            @Suppress(&quot;DEPRECATION&quot;)&#10;            window.statusBarColor = colorScheme.primary.toArgb()&#10;            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = !darkTheme&#10;        }&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/theme/Type.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/theme/Type.kt" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.theme&#10;&#10;import androidx.compose.material3.Typography&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;&#10;// Set of Material typography styles to start with&#10;val Typography = Typography(&#10;    bodyLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 16.sp,&#10;        lineHeight = 24.sp,&#10;        letterSpacing = 0.5.sp&#10;    ),&#10;    titleLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 22.sp,&#10;        lineHeight = 28.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    labelSmall = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 11.sp,&#10;        lineHeight = 16.sp,&#10;        letterSpacing = 0.5.sp&#10;    )&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/venues/VenuesScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/venues/VenuesScreen.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.venues&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.ui.components.VenueCard&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun VenuesScreen(&#10;    onVenueClick: (Venue) -&gt; Unit,&#10;    onBackClick: () -&gt; Unit,&#10;    viewModel: VenuesViewModel = viewModel()&#10;) {&#10;    val venues by viewModel.venues.collectAsState()&#10;    val searchQuery by viewModel.searchQuery.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Venues&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { viewModel.onSearchQueryChange(it) },&#10;                label = { Text(&quot;Search Venues&quot;) },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 8.dp),&#10;                trailingIcon = {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Search,&#10;                        contentDescription = &quot;Search&quot;&#10;                    )&#10;                },&#10;                singleLine = true&#10;            )&#10;&#10;            LazyColumn(&#10;                contentPadding = PaddingValues(horizontal = 16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                items(venues) { venue -&gt;&#10;                    VenueCard(venue = venue, onClick = onVenueClick)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun VenuesScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        VenuesScreen(&#10;            onVenueClick = {},&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.venues&#13;&#10;&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.foundation.lazy.LazyColumn&#13;&#10;import androidx.compose.foundation.lazy.items&#13;&#10;import androidx.compose.material.icons.Icons&#13;&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#13;&#10;import androidx.compose.material.icons.filled.Search&#13;&#10;import androidx.compose.material3.*&#13;&#10;import androidx.compose.runtime.Composable&#13;&#10;import androidx.compose.runtime.collectAsState&#13;&#10;import androidx.compose.runtime.getValue&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.tooling.preview.Preview&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#13;&#10;import com.example.pitpulseandroid.data.model.Venue&#13;&#10;import com.example.pitpulseandroid.ui.components.VenueCard&#13;&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;fun VenuesScreen(&#13;&#10;    onVenueClick: (Venue) -&gt; Unit,&#13;&#10;    onBackClick: () -&gt; Unit,&#13;&#10;    viewModel: VenuesViewModel = viewModel()&#13;&#10;) {&#13;&#10;    val venues by viewModel.venues.collectAsState()&#13;&#10;    val searchQuery by viewModel.searchQuery.collectAsState()&#13;&#10;&#13;&#10;    Scaffold(&#13;&#10;        topBar = {&#13;&#10;            TopAppBar(&#13;&#10;                title = { Text(&quot;Venues&quot;) },&#13;&#10;                navigationIcon = {&#13;&#10;                    IconButton(onClick = onBackClick) {&#13;&#10;                        Icon(&#13;&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#13;&#10;                            contentDescription = &quot;Back&quot;&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            )&#13;&#10;        }&#13;&#10;    ) { paddingValues -&gt;&#13;&#10;        Column(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxSize()&#13;&#10;                .padding(paddingValues)&#13;&#10;                .padding(horizontal = 16.dp)&#13;&#10;        ) {&#13;&#10;            OutlinedTextField(&#13;&#10;                value = searchQuery,&#13;&#10;                onValueChange = { viewModel.onSearchQueryChange(it) },&#13;&#10;                label = { Text(&quot;Search Venues&quot;) },&#13;&#10;                modifier = Modifier&#13;&#10;                    .fillMaxWidth()&#13;&#10;                    .padding(vertical = 8.dp),&#13;&#10;                trailingIcon = {&#13;&#10;                    Icon(&#13;&#10;                        imageVector = Icons.Default.Search,&#13;&#10;                        contentDescription = &quot;Search&quot;&#13;&#10;                    )&#13;&#10;                },&#13;&#10;                singleLine = true&#13;&#10;            )&#13;&#10;&#13;&#10;            LazyColumn(&#13;&#10;                contentPadding = PaddingValues(horizontal = 16.dp),&#13;&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#13;&#10;            ) {&#13;&#10;                items(venues) { venue -&gt;&#13;&#10;                    VenueCard(venue = venue, onClick = onVenueClick)&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Suppress(&quot;unused&quot;)&#13;&#10;@Preview(showBackground = true)&#13;&#10;@Composable&#13;&#10;fun VenuesScreenPreview() {&#13;&#10;    PitPulseAndroidTheme {&#13;&#10;        VenuesScreen(&#13;&#10;            onVenueClick = {},&#13;&#10;            onBackClick = {}&#13;&#10;        )&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/venues/VenuesViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/venues/VenuesViewModel.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.venues&#10;&#10;import androidx.lifecycle.ViewModel&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;&#10;class VenuesViewModel : ViewModel() {&#10;    private val _searchQuery = MutableStateFlow(&quot;&quot;)&#10;    val searchQuery: StateFlow&lt;String&gt; = _searchQuery.asStateFlow()&#10;&#10;    // Mock data for venues&#10;    private val allVenues = listOf(&#10;        Venue(&#10;            id = &quot;v1&quot;,&#10;            name = &quot;The Sound Garden&quot;,&#10;            image = &quot;https://picsum.photos/id/1035/500/300&quot;,&#10;            rating = 4.5,&#10;            reviewCount = 120,&#10;            address = &quot;123 Main St, Brooklyn, NY&quot;,&#10;            distance = &quot;0.8 mi&quot;,&#10;            amenities = listOf(&quot;Live Music&quot;, &quot;Full Bar&quot;, &quot;Food&quot;)&#10;        ),&#10;        Venue(&#10;            id = &quot;v2&quot;,&#10;            name = &quot;Electric Avenue&quot;,&#10;            image = &quot;https://picsum.photos/id/1036/500/300&quot;,&#10;            rating = 4.2,&#10;            reviewCount = 85,&#10;            address = &quot;456 Park Ave, Brooklyn, NY&quot;,&#10;            distance = &quot;1.2 mi&quot;,&#10;            amenities = listOf(&quot;DJ Booth&quot;, &quot;Dance Floor&quot;, &quot;Cocktails&quot;)&#10;        ),&#10;        Venue(&#10;            id = &quot;v3&quot;,&#10;            name = &quot;The Basement&quot;,&#10;            image = &quot;https://picsum.photos/id/1037/500/300&quot;,&#10;            rating = 4.8,&#10;            reviewCount = 210,&#10;            address = &quot;789 Broadway, Brooklyn, NY&quot;,&#10;            distance = &quot;1.5 mi&quot;,&#10;            amenities = listOf(&quot;Underground&quot;, &quot;Indie Bands&quot;, &quot;Craft Beer&quot;)&#10;        ),&#10;        Venue(&#10;            id = &quot;v4&quot;,&#10;            name = &quot;Harmony Hall&quot;,&#10;            image = &quot;https://picsum.photos/id/1041/500/300&quot;,&#10;            rating = 4.4,&#10;            reviewCount = 112,&#10;            address = &quot;234 Fifth Ave, Brooklyn, NY&quot;,&#10;            distance = &quot;2.1 mi&quot;,&#10;            amenities = listOf(&quot;Acoustic&quot;, &quot;Intimate&quot;, &quot;Wine Bar&quot;)&#10;        ),&#10;        Venue(&#10;            id = &quot;v5&quot;,&#10;            name = &quot;The Echo Chamber&quot;,&#10;            image = &quot;https://picsum.photos/id/1042/500/300&quot;,&#10;            rating = 4.6,&#10;            reviewCount = 189,&#10;            address = &quot;567 Sixth St, Brooklyn, NY&quot;,&#10;            distance = &quot;1.7 mi&quot;,&#10;            amenities = listOf(&quot;Electronic&quot;, &quot;Light Show&quot;, &quot;Late Night&quot;)&#10;        )&#10;    )&#10;&#10;    private val _venues = MutableStateFlow(allVenues)&#10;    val venues: StateFlow&lt;List&lt;Venue&gt;&gt; = _venues.asStateFlow()&#10;&#10;    fun onSearchQueryChange(query: String) {&#10;        _searchQuery.value = query&#10;&#10;        // Filter venues based on search query&#10;        if (query.isBlank()) {&#10;            _venues.value = allVenues&#10;        } else {&#10;            _venues.value = allVenues.filter { venue -&gt;&#10;                venue.name.contains(query, ignoreCase = true) ||&#10;                venue.address.contains(query, ignoreCase = true) ||&#10;                venue.amenities.any { it.contains(query, ignoreCase = true) }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.venues&#13;&#10;&#13;&#10;import androidx.lifecycle.ViewModel&#13;&#10;import com.example.pitpulseandroid.data.model.Venue&#13;&#10;import kotlinx.coroutines.flow.MutableStateFlow&#13;&#10;import kotlinx.coroutines.flow.StateFlow&#13;&#10;import kotlinx.coroutines.flow.asStateFlow&#13;&#10;&#13;&#10;class VenuesViewModel : ViewModel() {&#13;&#10;    private val _searchQuery = MutableStateFlow(&quot;&quot;)&#13;&#10;    val searchQuery: StateFlow&lt;String&gt; = _searchQuery.asStateFlow()&#13;&#10;&#13;&#10;    // Mock data for venues&#13;&#10;    private val allVenues = listOf(&#13;&#10;        Venue(&#13;&#10;            id = &quot;v1&quot;,&#13;&#10;            name = &quot;The Sound Garden&quot;,&#13;&#10;            image = &quot;https://picsum.photos/id/1035/500/300&quot;,&#13;&#10;            rating = 4.5f,&#13;&#10;            reviewCount = 120,&#13;&#10;            address = &quot;123 Main St, Brooklyn, NY&quot;,&#13;&#10;            distance = &quot;0.8 mi&quot;,&#13;&#10;            amenities = listOf(&quot;Live Music&quot;, &quot;Full Bar&quot;, &quot;Food&quot;),&#13;&#10;            city = &quot;Brooklyn&quot;,&#13;&#10;            state = &quot;NY&quot;,&#13;&#10;            zipCode = &quot;11201&quot;,&#13;&#10;            description = &quot;A legendary venue known for launching indie bands&quot;,&#13;&#10;            capacity = 500,&#13;&#10;            contactInfo = &quot;info@soundgarden.com&quot;&#13;&#10;        ),&#13;&#10;        Venue(&#13;&#10;            id = &quot;v2&quot;,&#13;&#10;            name = &quot;Electric Avenue&quot;,&#13;&#10;            image = &quot;https://picsum.photos/id/1036/500/300&quot;,&#13;&#10;            rating = 4.2f,&#13;&#10;            reviewCount = 85,&#13;&#10;            address = &quot;456 Park Ave, Brooklyn, NY&quot;,&#13;&#10;            distance = &quot;1.2 mi&quot;,&#13;&#10;            amenities = listOf(&quot;DJ Booth&quot;, &quot;Dance Floor&quot;, &quot;Cocktails&quot;),&#13;&#10;            city = &quot;Brooklyn&quot;,&#13;&#10;            state = &quot;NY&quot;,&#13;&#10;            zipCode = &quot;11205&quot;,&#13;&#10;            description = &quot;Modern venue with great acoustics and lighting&quot;,&#13;&#10;            capacity = 350,&#13;&#10;            contactInfo = &quot;contact@electricavenue.com&quot;&#13;&#10;        ),&#13;&#10;        Venue(&#13;&#10;            id = &quot;v3&quot;,&#13;&#10;            name = &quot;The Basement&quot;,&#13;&#10;            image = &quot;https://picsum.photos/id/1037/500/300&quot;,&#13;&#10;            rating = 4.8f,&#13;&#10;            reviewCount = 210,&#13;&#10;            address = &quot;789 Broadway, Brooklyn, NY&quot;,&#13;&#10;            distance = &quot;1.5 mi&quot;,&#13;&#10;            amenities = listOf(&quot;Underground&quot;, &quot;Indie Bands&quot;, &quot;Craft Beer&quot;),&#13;&#10;            city = &quot;Brooklyn&quot;,&#13;&#10;            state = &quot;NY&quot;,&#13;&#10;            zipCode = &quot;11206&quot;,&#13;&#10;            description = &quot;Underground venue featuring indie bands and craft beer&quot;,&#13;&#10;            capacity = 200,&#13;&#10;            contactInfo = &quot;basement@music.com&quot;&#13;&#10;        ),&#13;&#10;        Venue(&#13;&#10;            id = &quot;v4&quot;,&#13;&#10;            name = &quot;Harmony Hall&quot;,&#13;&#10;            image = &quot;https://picsum.photos/id/1041/500/300&quot;,&#13;&#10;            rating = 4.4f,&#13;&#10;            reviewCount = 112,&#13;&#10;            address = &quot;234 Fifth Ave, Brooklyn, NY&quot;,&#13;&#10;            distance = &quot;2.1 mi&quot;,&#13;&#10;            amenities = listOf(&quot;Acoustic&quot;, &quot;Intimate&quot;, &quot;Wine Bar&quot;),&#13;&#10;            city = &quot;Brooklyn&quot;,&#13;&#10;            state = &quot;NY&quot;,&#13;&#10;            zipCode = &quot;11205&quot;,&#13;&#10;            description = &quot;Harmony Hall is an intimate venue perfect for acoustic performances and jazz nights.&quot;,&#13;&#10;            capacity = 150,&#13;&#10;            contactInfo = &quot;contact@harmonyhall.com&quot;&#13;&#10;        ),&#13;&#10;        Venue(&#13;&#10;            id = &quot;v5&quot;,&#13;&#10;            name = &quot;The Echo Chamber&quot;,&#13;&#10;            image = &quot;https://picsum.photos/id/1042/500/300&quot;,&#13;&#10;            rating = 4.6f,&#13;&#10;            reviewCount = 189,&#13;&#10;            address = &quot;567 Sixth St, Brooklyn, NY&quot;,&#13;&#10;            distance = &quot;1.7 mi&quot;,&#13;&#10;            amenities = listOf(&quot;Electronic&quot;, &quot;Light Show&quot;, &quot;Late Night&quot;),&#13;&#10;            city = &quot;Brooklyn&quot;,&#13;&#10;            state = &quot;NY&quot;,&#13;&#10;            zipCode = &quot;11215&quot;,&#13;&#10;            description = &quot;The Echo Chamber is a cutting-edge venue specializing in electronic music and immersive experiences.&quot;,&#13;&#10;            capacity = 400,&#13;&#10;            contactInfo = &quot;contact@echochamber.com&quot;&#13;&#10;        )&#13;&#10;    )&#13;&#10;&#13;&#10;    private val _venues = MutableStateFlow(allVenues)&#13;&#10;    val venues: StateFlow&lt;List&lt;Venue&gt;&gt; = _venues.asStateFlow()&#13;&#10;&#13;&#10;    fun onSearchQueryChange(query: String) {&#13;&#10;        _searchQuery.value = query&#13;&#10;&#13;&#10;        // Filter venues based on search query&#13;&#10;        if (query.isBlank()) {&#13;&#10;            _venues.value = allVenues&#13;&#10;        } else {&#13;&#10;            _venues.value = allVenues.filter { venue -&gt;&#13;&#10;                venue.name.contains(query, ignoreCase = true) ||&#13;&#10;                venue.address.contains(query, ignoreCase = true) ||&#13;&#10;                venue.amenities.any { it.contains(query, ignoreCase = true) }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
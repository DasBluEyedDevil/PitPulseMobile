<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.pitpulseandroid&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.pitpulseandroid&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;    // Accompanist for SystemUiController&#10;    implementation(libs.accompanist.systemuicontroller)&#10;&#10;    // Navigation Compose&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // Material Icons Extended&#10;    implementation(libs.androidx.compose.material.icons.extended)&#10;&#10;    // ViewModel Compose&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;&#10;    // Coil for image loading&#10;    implementation(libs.coil.compose)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.pitpulseandroid&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.pitpulseandroid&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlin {&#10;        compilerOptions {&#10;            jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_11)&#10;        }&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;    // Accompanist for SystemUiController&#10;    implementation(libs.accompanist.systemuicontroller)&#10;&#10;    // Navigation Compose&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // Material Icons Extended&#10;    implementation(libs.androidx.compose.material.icons.extended)&#10;&#10;    // ViewModel Compose&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;&#10;    // Coil for image loading&#10;    implementation(libs.coil.compose)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/MainActivity.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.MusicNote&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Place&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.navigation.navArgument&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.navigation.Screen&#10;import com.example.pitpulseandroid.ui.bands.BandDetailScreen&#10;import com.example.pitpulseandroid.ui.bands.BandsScreen&#10;import com.example.pitpulseandroid.ui.home.HomeScreen&#10;import com.example.pitpulseandroid.ui.profile.ProfileScreen&#10;import com.example.pitpulseandroid.ui.splash.SplashScreen&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;import com.example.pitpulseandroid.ui.venues.VenueDetailScreen&#10;import com.example.pitpulseandroid.ui.venues.VenuesScreen&#10;import com.example.pitpulseandroid.util.NavigationUtils.getStringArgument&#10;import com.example.pitpulseandroid.util.NavigationUtils.navigateSingleTop&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            PitPulseAndroidTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    PitPulseApp()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PitPulseApp() {&#10;    // State to track whether to show splash screen or main app - use rememberSaveable to preserve state&#10;    var showSplashScreen by rememberSaveable { mutableStateOf(true) }&#10;    val navController = rememberNavController()&#10;&#10;    // Clean up any resources when the composable is disposed&#10;    DisposableEffect(Unit) {&#10;        onDispose {}&#10;    }&#10;&#10;    if (showSplashScreen) {&#10;        // Show splash screen&#10;        SplashScreen(&#10;            onTimeout = { showSplashScreen = false }&#10;        )&#10;    } else {&#10;        // Main app content with navigation&#10;        MainContent(navController)&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MainContent(navController: NavHostController) {&#10;    // Observe current back stack entry for navigation state&#10;    val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;    val currentRoute = navBackStackEntry?.destination?.route&#10;&#10;    // Define tabs&#10;    val tabs = listOf(&#10;        TabItem(Screen.Home, Icons.Filled.Home, &quot;Home&quot;),&#10;        TabItem(Screen.Venues, Icons.Filled.Place, &quot;Venues&quot;),&#10;        TabItem(Screen.Bands, Icons.Filled.MusicNote, &quot;Bands&quot;),&#10;        TabItem(Screen.Profile, Icons.Filled.Person, &quot;Profile&quot;)&#10;    )&#10;&#10;    Scaffold(&#10;        bottomBar = {&#10;            NavigationBar {&#10;                tabs.forEach { tab -&gt;&#10;                    val selected = currentRoute == tab.screen.route ||&#10;                            (currentRoute?.startsWith(tab.screen.route) == true &amp;&amp; &#10;                             tab.screen.route != Screen.Home.route)&#10;&#10;                    NavigationBarItem(&#10;                        icon = { &#10;                            Icon(&#10;                                imageVector = tab.icon, &#10;                                contentDescription = tab.title + &quot; Tab&quot;&#10;                            ) &#10;                        },&#10;                        label = { Text(tab.title) },&#10;                        selected = selected,&#10;                        onClick = { &#10;                            if (!selected) {&#10;                                navController.navigateSingleTop(tab.screen.route)&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        NavHost(&#10;            navController = navController,&#10;            startDestination = Screen.Home.route,&#10;            modifier = Modifier.padding(innerPadding)&#10;        ) {&#10;            // Home screen&#10;            composable(Screen.Home.route) {&#10;                HomeScreen(&#10;                    onVenueClick = { venue: Venue -&gt;&#10;                        navController.navigateSingleTop(Screen.VenueDetail(venue.id).route)&#10;                    },&#10;                    onBandClick = { band: Band -&gt;&#10;                        navController.navigateSingleTop(Screen.BandDetail(band.id).route)&#10;                    },&#10;                    onUserClick = {&#10;                        navController.navigateSingleTop(Screen.Profile.route)&#10;                    },&#10;                    onNotificationClick = { /* Open notifications */ }&#10;                )&#10;            }&#10;&#10;            // Venues screen&#10;            composable(Screen.Venues.route) {&#10;                VenuesScreen(&#10;                    onVenueClick = { venue -&gt;&#10;                        navController.navigateSingleTop(Screen.VenueDetail(venue.id).route)&#10;                    },&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;&#10;            // Venue detail screen&#10;            composable(&#10;                route = Screen.VenueDetail.route,&#10;                arguments = listOf(&#10;                    navArgument(Screen.VenueDetail.venueIdArg) {&#10;                        type = NavType.StringType&#10;                        nullable = false&#10;                    }&#10;                )&#10;            ) { backStackEntry -&gt;&#10;                val venueId = navController.getStringArgument(Screen.VenueDetail.venueIdArg)&#10;                VenueDetailScreen(&#10;                    venueId = venueId,&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;&#10;            // Bands screen&#10;            composable(Screen.Bands.route) {&#10;                BandsScreen(&#10;                    onBandClick = { band -&gt;&#10;                        navController.navigateSingleTop(Screen.BandDetail(band.id).route)&#10;                    },&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;&#10;            // Band detail screen&#10;            composable(&#10;                route = Screen.BandDetail.route,&#10;                arguments = listOf(&#10;                    navArgument(Screen.BandDetail.bandIdArg) {&#10;                        type = NavType.StringType&#10;                        nullable = false&#10;                    }&#10;                )&#10;            ) { backStackEntry -&gt;&#10;                val bandId = navController.getStringArgument(Screen.BandDetail.bandIdArg)&#10;                BandDetailScreen(&#10;                    bandId = bandId,&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;&#10;            // Profile screen&#10;            composable(Screen.Profile.route) {&#10;                ProfileScreen(&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Data class representing a navigation tab item.&#10; */&#10;data class TabItem(&#10;    val screen: Screen,&#10;    val icon: ImageVector,&#10;    val title: String&#10;)&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PitPulseAppPreview() {&#10;    PitPulseAndroidTheme {&#10;        PitPulseApp()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.EmojiEvents&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.MusicNote&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Place&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.navigation.navArgument&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.navigation.Screen&#10;import com.example.pitpulseandroid.ui.badges.BadgesScreen&#10;import com.example.pitpulseandroid.ui.bands.BandDetailScreen&#10;import com.example.pitpulseandroid.ui.bands.BandsScreen&#10;import com.example.pitpulseandroid.ui.home.HomeScreen&#10;import com.example.pitpulseandroid.ui.profile.ProfileScreen&#10;import com.example.pitpulseandroid.ui.splash.SplashScreen&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;import com.example.pitpulseandroid.ui.venues.VenueDetailScreen&#10;import com.example.pitpulseandroid.ui.venues.VenuesScreen&#10;import com.example.pitpulseandroid.util.NavigationUtils.getStringArgument&#10;import com.example.pitpulseandroid.util.NavigationUtils.navigateSingleTop&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            PitPulseAndroidTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    PitPulseApp()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PitPulseApp() {&#10;    // State to track whether to show splash screen or main app - use rememberSaveable to preserve state&#10;    var showSplashScreen by rememberSaveable { mutableStateOf(true) }&#10;    val navController = rememberNavController()&#10;&#10;    // Clean up any resources when the composable is disposed&#10;    DisposableEffect(Unit) {&#10;        onDispose {}&#10;    }&#10;&#10;    if (showSplashScreen) {&#10;        // Show splash screen&#10;        SplashScreen(&#10;            onTimeout = { showSplashScreen = false }&#10;        )&#10;    } else {&#10;        // Main app content with navigation&#10;        MainContent(navController)&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MainContent(navController: NavHostController) {&#10;    // Observe current back stack entry for navigation state&#10;    val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;    val currentRoute = navBackStackEntry?.destination?.route&#10;&#10;    // Define tabs&#10;    val tabs = listOf(&#10;        TabItem(Screen.Home, Icons.Filled.Home, &quot;Home&quot;),&#10;        TabItem(Screen.Venues, Icons.Filled.Place, &quot;Venues&quot;),&#10;        TabItem(Screen.Bands, Icons.Filled.MusicNote, &quot;Bands&quot;),&#10;        TabItem(Screen.Profile, Icons.Filled.Person, &quot;Profile&quot;),&#10;        TabItem(Screen.Badges, Icons.Filled.EmojiEvents, &quot;Badges&quot;)&#10;    )&#10;&#10;    Scaffold(&#10;        bottomBar = {&#10;            NavigationBar {&#10;                tabs.forEach { tab -&gt;&#10;                    val selected = currentRoute == tab.screen.route ||&#10;                            (currentRoute?.startsWith(tab.screen.route) == true &amp;&amp; &#10;                             tab.screen.route != Screen.Home.route)&#10;&#10;                    NavigationBarItem(&#10;                        icon = { &#10;                            Icon(&#10;                                imageVector = tab.icon, &#10;                                contentDescription = tab.title + &quot; Tab&quot;&#10;                            ) &#10;                        },&#10;                        label = { Text(tab.title) },&#10;                        selected = selected,&#10;                        onClick = { &#10;                            if (!selected) {&#10;                                navController.navigateSingleTop(tab.screen.route)&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        NavHost(&#10;            navController = navController,&#10;            startDestination = Screen.Home.route,&#10;            modifier = Modifier.padding(innerPadding)&#10;        ) {&#10;            // Home screen&#10;            composable(Screen.Home.route) {&#10;                HomeScreen(&#10;                    onVenueClick = { venue: Venue -&gt;&#10;                        navController.navigateSingleTop(Screen.VenueDetail(venue.id).route)&#10;                    },&#10;                    onBandClick = { band: Band -&gt;&#10;                        navController.navigateSingleTop(Screen.BandDetail(band.id).route)&#10;                    },&#10;                    onUserClick = {&#10;                        navController.navigateSingleTop(Screen.Profile.route)&#10;                    },&#10;                    onNotificationClick = { /* Open notifications */ }&#10;                )&#10;            }&#10;&#10;            // Venues screen&#10;            composable(Screen.Venues.route) {&#10;                VenuesScreen(&#10;                    onVenueClick = { venue -&gt;&#10;                        navController.navigateSingleTop(Screen.VenueDetail(venue.id).route)&#10;                    },&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;&#10;            // Venue detail screen&#10;            composable(&#10;                route = Screen.VenueDetail.route,&#10;                arguments = listOf(&#10;                    navArgument(Screen.VenueDetail.venueIdArg) {&#10;                        type = NavType.StringType&#10;                        nullable = false&#10;                    }&#10;                )&#10;            ) { backStackEntry -&gt;&#10;                val venueId = navController.getStringArgument(Screen.VenueDetail.venueIdArg)&#10;                VenueDetailScreen(&#10;                    venueId = venueId,&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;&#10;            // Bands screen&#10;            composable(Screen.Bands.route) {&#10;                BandsScreen(&#10;                    onBandClick = { band -&gt;&#10;                        navController.navigateSingleTop(Screen.BandDetail(band.id).route)&#10;                    },&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;&#10;            // Band detail screen&#10;            composable(&#10;                route = Screen.BandDetail.route,&#10;                arguments = listOf(&#10;                    navArgument(Screen.BandDetail.bandIdArg) {&#10;                        type = NavType.StringType&#10;                        nullable = false&#10;                    }&#10;                )&#10;            ) { backStackEntry -&gt;&#10;                val bandId = navController.getStringArgument(Screen.BandDetail.bandIdArg)&#10;                BandDetailScreen(&#10;                    bandId = bandId,&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;&#10;            // Profile screen&#10;            composable(Screen.Profile.route) {&#10;                ProfileScreen(&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;&#10;            // Badges screen&#10;            composable(Screen.Badges.route) {&#10;                BadgesScreen(&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Data class representing a navigation tab item.&#10; */&#10;data class TabItem(&#10;    val screen: Screen,&#10;    val icon: ImageVector,&#10;    val title: String&#10;)&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PitPulseAppPreview() {&#10;    PitPulseAndroidTheme {&#10;        PitPulseApp()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Badge.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Badge.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;/**&#10; * Data class representing a badge that users can earn&#10; */&#10;data class Badge(&#10;    val id: String,&#10;    val name: String,&#10;    val description: String,&#10;    val imageUrl: String,&#10;    val icon: Int,  // Resource ID for the icon&#10;    val badgeType: BadgeType,&#10;    val threshold: Int,  // Threshold to achieve this badge&#10;    val dateEarned: String? = null&#10;)&#10;&#10;/**&#10; * Enum representing different types of badges&#10; */&#10;enum class BadgeType {&#10;    REVIEW,&#10;    VENUE_VISIT,&#10;    SPECIAL_EVENT&#10;    // Removed unused badge types&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.data.model&#13;&#10;&#13;&#10;/**&#13;&#10; * Data class representing a badge that users can earn&#13;&#10; */&#13;&#10;data class Badge(&#13;&#10;    val id: String,&#13;&#10;    val name: String,&#13;&#10;    val description: String,&#13;&#10;    val imageUrl: String,&#13;&#10;    val icon: Int,  // Resource ID for the icon&#13;&#10;    val badgeType: BadgeType,&#13;&#10;    val threshold: Int,  // Threshold to achieve this badge&#13;&#10;    val dateEarned: String? = null&#13;&#10;) {&#13;&#10;    companion object {&#13;&#10;        /**&#13;&#10;         * Returns a list of sample badges for development and testing&#13;&#10;         */&#13;&#10;        fun getSampleBadges(): List&lt;Badge&gt; {&#13;&#10;            return listOf(&#13;&#10;                Badge(&#13;&#10;                    id = &quot;badge1&quot;,&#13;&#10;                    name = &quot;Venue Explorer&quot;,&#13;&#10;                    description = &quot;Visit 5 different venues&quot;,&#13;&#10;                    imageUrl = &quot;&quot;,&#13;&#10;                    icon = android.R.drawable.ic_menu_compass,&#13;&#10;                    badgeType = BadgeType.VENUE_VISIT,&#13;&#10;                    threshold = 5&#13;&#10;                ),&#13;&#10;                Badge(&#13;&#10;                    id = &quot;badge2&quot;,&#13;&#10;                    name = &quot;Review Master&quot;,&#13;&#10;                    description = &quot;Write 10 reviews&quot;,&#13;&#10;                    imageUrl = &quot;&quot;,&#13;&#10;                    icon = android.R.drawable.ic_menu_edit,&#13;&#10;                    badgeType = BadgeType.REVIEW,&#13;&#10;                    threshold = 10&#13;&#10;                ),&#13;&#10;                Badge(&#13;&#10;                    id = &quot;badge3&quot;,&#13;&#10;                    name = &quot;Feedback Pro&quot;,&#13;&#10;                    description = &quot;Receive 15 helpful votes on your reviews&quot;,&#13;&#10;                    imageUrl = &quot;&quot;,&#13;&#10;                    icon = android.R.drawable.ic_menu_send,&#13;&#10;                    badgeType = BadgeType.REVIEW,&#13;&#10;                    threshold = 15&#13;&#10;                ),&#13;&#10;                Badge(&#13;&#10;                    id = &quot;badge4&quot;,&#13;&#10;                    name = &quot;Night Owl&quot;,&#13;&#10;                    description = &quot;Attend 3 shows that started after 10pm&quot;,&#13;&#10;                    imageUrl = &quot;&quot;,&#13;&#10;                    icon = android.R.drawable.ic_menu_recent_history,&#13;&#10;                    badgeType = BadgeType.SPECIAL_EVENT,&#13;&#10;                    threshold = 3&#13;&#10;                ),&#13;&#10;                Badge(&#13;&#10;                    id = &quot;badge5&quot;,&#13;&#10;                    name = &quot;Local Champion&quot;,&#13;&#10;                    description = &quot;Visit 8 venues in your city&quot;,&#13;&#10;                    imageUrl = &quot;&quot;,&#13;&#10;                    icon = android.R.drawable.ic_menu_myplaces,&#13;&#10;                    badgeType = BadgeType.VENUE_VISIT,&#13;&#10;                    threshold = 8&#13;&#10;                )&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;/**&#13;&#10; * Enum representing different types of badges&#13;&#10; */&#13;&#10;enum class BadgeType {&#13;&#10;    REVIEW,&#13;&#10;    VENUE_VISIT,&#13;&#10;    SPECIAL_EVENT&#13;&#10;    // Removed unused badge types&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/BadgeProgress.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/BadgeProgress.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;/**&#10; * Data class representing a user's progress towards earning a badge&#10; */&#10;data class BadgeProgress(&#10;    val badge: Badge,&#10;    val currentValue: Int,&#10;    val isEarned: Boolean = currentValue &gt;= badge.threshold,&#10;    val percentComplete: Float = getProgressPercentage(),&#10;    val tier: String = calculateTier()&#10;) {&#10;    /**&#10;     * Calculate the progress percentage (0-100)&#10;     */&#10;    fun getProgressPercentage(): Float {&#10;        if (isEarned) return 100f&#10;        if (badge.threshold &lt;= 0) return 0f&#10;        return (currentValue.toFloat() / badge.threshold) * 100&#10;    }&#10;    &#10;    /**&#10;     * Calculate badge tier based on completion percentage&#10;     */&#10;    private fun calculateTier(): String {&#10;        return when {&#10;            isEarned -&gt; &quot;Gold&quot;&#10;            percentComplete &gt;= 66 -&gt; &quot;Silver&quot;&#10;            percentComplete &gt;= 33 -&gt; &quot;Bronze&quot;&#10;            else -&gt; &quot;None&quot;&#10;        }&#10;    }&#10;    &#10;    companion object {&#10;        /**&#10;         * Creates a list of sample badge progress objects for testing&#10;         */&#10;        fun getSampleBadgeProgress(): List&lt;BadgeProgress&gt; {&#10;            return Badge.getSampleBadges().mapIndexed { index, badge -&gt;&#10;                // Create varied progress for each badge&#10;                val progress = when (index % 3) {&#10;                    0 -&gt; badge.threshold // Completed&#10;                    1 -&gt; (badge.threshold * 0.7).toInt() // In progress&#10;                    else -&gt; (badge.threshold * 0.2).toInt() // Just started&#10;                }&#10;                BadgeProgress(&#10;                    badge = badge,&#10;                    currentValue = progress&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;/**&#10; * Data class representing a user's progress towards earning a badge&#10; */&#10;data class BadgeProgress(&#10;    val badge: Badge,&#10;    val currentValue: Int,&#10;    val isEarned: Boolean = currentValue &gt;= badge.threshold&#10;) {&#10;    // Calculate progress percentage (0-100) on demand&#10;    val percentComplete: Float by lazy { getProgressPercentage() }&#10;    &#10;    // Calculate tier based on completion percentage&#10;    val tier: String by lazy { calculateTier() }&#10;    &#10;    /**&#10;     * Calculate the progress percentage (0-100)&#10;     */&#10;    private fun getProgressPercentage(): Float {&#10;        if (isEarned) return 100f&#10;        if (badge.threshold &lt;= 0) return 0f&#10;        return (currentValue.toFloat() / badge.threshold) * 100&#10;    }&#10;    &#10;    /**&#10;     * Calculate badge tier based on completion percentage&#10;     */&#10;    private fun calculateTier(): String {&#10;        val percent = percentComplete&#10;        return when {&#10;            isEarned -&gt; &quot;Gold&quot;&#10;            percent &gt;= 66 -&gt; &quot;Silver&quot;&#10;            percent &gt;= 33 -&gt; &quot;Bronze&quot;&#10;            else -&gt; &quot;None&quot;&#10;        }&#10;    }&#10;    &#10;    companion object {&#10;        /**&#10;         * Creates a list of sample badge progress objects for testing&#10;         */&#10;        fun getSampleBadgeProgress(): List&lt;BadgeProgress&gt; {&#10;            return Badge.getSampleBadges().mapIndexed { index, badge -&gt;&#10;                // Create varied progress for each badge&#10;                val progress = when (index % 3) {&#10;                    0 -&gt; badge.threshold // Completed&#10;                    1 -&gt; (badge.threshold * 0.7).toInt() // In progress&#10;                    else -&gt; (badge.threshold * 0.2).toInt() // Just started&#10;                }&#10;                BadgeProgress(&#10;                    badge = badge,&#10;                    currentValue = progress&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Band.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Band.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;/**&#10; * Data class representing a music band or artist&#10; */&#10;data class Band(&#10;    val id: String,&#10;    val name: String,&#10;    val genre: String,&#10;    val bio: String,&#10;    val imageUrl: String,&#10;    val formationYear: Int,&#10;    val location: String,&#10;    val rating: Float = 0f,&#10;    val reviewCount: Int = 0,&#10;    val genres: List&lt;String&gt; = listOf(),&#10;    val nextShow: String = &quot;&quot;,&#10;    val members: List&lt;BandMember&gt; = emptyList(),&#10;    val upcomingEvents: List&lt;Event&gt; = emptyList()&#10;)&#10;&#10;/**&#10; * Data class representing a band member&#10; */&#10;data class BandMember(&#10;    val id: String,&#10;    val name: String,&#10;    val role: String,&#10;    val imageUrl: String = &quot;&quot;&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;/**&#10; * Data class representing a music band or artist&#10; */&#10;data class Band(&#10;    val id: String,&#10;    val name: String,&#10;    val genre: String,&#10;    val bio: String,&#10;    val imageUrl: String,&#10;    val formationYear: Int,&#10;    val location: String,&#10;    val rating: Float = 0f,&#10;    val reviewCount: Int = 0,&#10;    val genres: List&lt;String&gt; = listOf(),&#10;    val nextShow: String = &quot;&quot;,&#10;    val members: List&lt;BandMember&gt; = emptyList(),&#10;    val upcomingEvents: List&lt;Event&gt; = emptyList(),&#10;    val socialLinks: List&lt;Pair&lt;String, String&gt;&gt; = listOf() // Format: (platform, url)&#10;) {&#10;    companion object {&#10;        /**&#10;         * Returns a list of sample bands for development and testing&#10;         */&#10;        fun getSampleBands(): List&lt;Band&gt; {&#10;            return listOf(&#10;                Band(&#10;                    id = &quot;b1&quot;,&#10;                    name = &quot;Electric Harmony&quot;,&#10;                    genre = &quot;Rock&quot;,&#10;                    bio = &quot;A four-piece band known for energetic performances&quot;,&#10;                    imageUrl = &quot;https://picsum.photos/id/1038/500/300&quot;,&#10;                    formationYear = 2018,&#10;                    location = &quot;Brooklyn, NY&quot;,&#10;                    rating = 4.7f,&#10;                    reviewCount = 156,&#10;                    genres = listOf(&quot;Rock&quot;, &quot;Alternative&quot;, &quot;Indie&quot;),&#10;                    nextShow = &quot;Tonight at The Sound Garden&quot;,&#10;                    socialLinks = listOf(&#10;                        Pair(&quot;Instagram&quot;, &quot;https://instagram.com/electricharmony&quot;),&#10;                        Pair(&quot;Twitter&quot;, &quot;https://twitter.com/electricharmony&quot;),&#10;                        Pair(&quot;Spotify&quot;, &quot;https://open.spotify.com/artist/electricharmony&quot;)&#10;                    )&#10;                ),&#10;                Band(&#10;                    id = &quot;b2&quot;,&#10;                    name = &quot;Midnight Groove&quot;,&#10;                    genre = &quot;R&amp;B&quot;,&#10;                    bio = &quot;Soul collective bringing back classic sounds with a modern twist&quot;,&#10;                    imageUrl = &quot;https://picsum.photos/id/1039/500/300&quot;,&#10;                    formationYear = 2016,&#10;                    location = &quot;Queens, NY&quot;,&#10;                    rating = 4.3f,&#10;                    reviewCount = 98,&#10;                    genres = listOf(&quot;R&amp;B&quot;, &quot;Soul&quot;, &quot;Funk&quot;),&#10;                    nextShow = &quot;Tomorrow at Electric Avenue&quot;,&#10;                    socialLinks = listOf(&#10;                        Pair(&quot;Instagram&quot;, &quot;https://instagram.com/midnightgroove&quot;),&#10;                        Pair(&quot;YouTube&quot;, &quot;https://youtube.com/midnightgroove&quot;)&#10;                    )&#10;                ),&#10;                Band(&#10;                    id = &quot;b3&quot;,&#10;                    name = &quot;Cosmic Travelers&quot;,&#10;                    genre = &quot;Psychedelic&quot;,&#10;                    bio = &quot;Experimental space rock outfit pushing musical boundaries&quot;,&#10;                    imageUrl = &quot;https://picsum.photos/id/1040/500/300&quot;,&#10;                    formationYear = 2020,&#10;                    location = &quot;Manhattan, NY&quot;,&#10;                    rating = 4.9f,&#10;                    reviewCount = 230,&#10;                    genres = listOf(&quot;Psychedelic&quot;, &quot;Space Rock&quot;, &quot;Experimental&quot;),&#10;                    nextShow = &quot;Sat at The Basement&quot;,&#10;                    socialLinks = listOf(&#10;                        Pair(&quot;Bandcamp&quot;, &quot;https://cosmictravelers.bandcamp.com&quot;),&#10;                        Pair(&quot;Instagram&quot;, &quot;https://instagram.com/cosmictravelers&quot;),&#10;                        Pair(&quot;SoundCloud&quot;, &quot;https://soundcloud.com/cosmictravelers&quot;)&#10;                    )&#10;                )&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Data class representing a band member&#10; */&#10;data class BandMember(&#10;    val id: String,&#10;    val name: String,&#10;    val role: String,&#10;    val imageUrl: String = &quot;&quot;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Event.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Event.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;import java.util.Date&#10;&#10;/**&#10; * Data class representing an event (concert, show, etc.)&#10; */&#10;data class Event(&#10;    val id: String,&#10;    val name: String,&#10;    val description: String,&#10;    val venueId: String,&#10;    val venueName: String,&#10;    val date: String,&#10;    val time: String,&#10;    val imageUrl: String = &quot;&quot;,&#10;    val bandIds: List&lt;String&gt; = emptyList(),&#10;    val bandNames: List&lt;String&gt; = emptyList(),&#10;    val ticketPrice: Double = 0.0,&#10;    val ticketUrl: String = &quot;&quot;,&#10;    val isSoldOut: Boolean = false&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.data.model&#13;&#10;&#13;&#10;/**&#13;&#10; * Data class representing an event (concert, show, etc.)&#13;&#10; */&#13;&#10;data class Event(&#13;&#10;    val id: String,&#13;&#10;    val name: String,&#13;&#10;    val description: String,&#13;&#10;    val venueId: String,&#13;&#10;    val venueName: String,&#13;&#10;    val date: String,&#13;&#10;    val time: String,&#13;&#10;    val imageUrl: String = &quot;&quot;,&#13;&#10;    val bandIds: List&lt;String&gt; = emptyList(),&#13;&#10;    val bandNames: List&lt;String&gt; = emptyList(),&#13;&#10;    val ticketPrice: Double = 0.0,&#13;&#10;    val ticketUrl: String = &quot;&quot;,&#13;&#10;    val isSoldOut: Boolean = false&#13;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/User.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/User.kt" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;/**&#10; * Data class representing a user in the application&#10; */&#10;data class User(&#10;    val id: String,&#10;    val username: String,&#10;    val email: String,&#10;    val level: Int,&#10;    val reviewCount: Int,&#10;    val badgeCount: Int,&#10;    val badges: List&lt;Badge&gt; = emptyList(),&#10;    val profileImageUrl: String = &quot;&quot;,&#10;    val bio: String = &quot;&quot;,&#10;    val joinDate: String = &quot;&quot;,&#10;    val followersCount: Int = 0,&#10;    val followingCount: Int = 0&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/UserProfile.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/UserProfile.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;/**&#10; * Data class representing a user profile with extended information&#10; */&#10;data class UserProfile(&#10;    val user: User,&#10;    val favoriteVenues: List&lt;String&gt; = emptyList(),&#10;    val favoriteBands: List&lt;String&gt; = emptyList(),&#10;    val recentActivity: List&lt;UserActivity&gt; = emptyList(),&#10;    val preferences: UserPreferences = UserPreferences()&#10;)&#10;&#10;/**&#10; * Data class for user activity&#10; */&#10;data class UserActivity(&#10;    val id: String,&#10;    val type: ActivityType,&#10;    val timestamp: String,&#10;    val details: String,&#10;    val relatedEntityId: String? = null&#10;)&#10;&#10;/**&#10; * Enum for different types of user activities&#10; */&#10;enum class ActivityType {&#10;    REVIEW_ADDED,&#10;    VENUE_VISITED,&#10;    BADGE_EARNED,&#10;    FOLLOWED_BAND,&#10;    FOLLOWED_VENUE&#10;}&#10;&#10;/**&#10; * Data class for user preferences&#10; */&#10;data class UserPreferences(&#10;    val notificationsEnabled: Boolean = true,&#10;    val darkModeEnabled: Boolean = false,&#10;    val privacySettings: PrivacySettings = PrivacySettings()&#10;)&#10;&#10;/**&#10; * Data class for privacy settings&#10; */&#10;data class PrivacySettings(&#10;    val profileVisibility: ProfileVisibility = ProfileVisibility.PUBLIC,&#10;    val showRecentActivity: Boolean = true,&#10;    val showFollowers: Boolean = true&#10;)&#10;&#10;/**&#10; * Enum for profile visibility options&#10; */&#10;enum class ProfileVisibility {&#10;    PUBLIC,&#10;    FOLLOWERS_ONLY,&#10;    PRIVATE&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;/**&#10; * Data class representing a user profile with extended information&#10; */&#10;data class UserProfile(&#10;    val user: User,&#10;    val favoriteVenues: List&lt;String&gt; = emptyList(),&#10;    val favoriteBands: List&lt;String&gt; = emptyList(),&#10;    val recentActivity: List&lt;UserActivity&gt; = emptyList(),&#10;    val preferences: UserPreferences = UserPreferences()&#10;)&#10;&#10;/**&#10; * Data class for user activity&#10; */&#10;data class UserActivity(&#10;    val id: String,&#10;    val type: ActivityType,&#10;    val timestamp: String,&#10;    val details: String,&#10;    val relatedEntityId: String? = null&#10;)&#10;&#10;/**&#10; * Enum for different types of user activities&#10; */&#10;enum class ActivityType {&#10;    REVIEW_ADDED,&#10;    BADGE_EARNED&#10;    // Removed unused activity types&#10;}&#10;&#10;/**&#10; * Data class for user preferences&#10; */&#10;data class UserPreferences(&#10;    val notificationsEnabled: Boolean = true,&#10;    val darkModeEnabled: Boolean = false,&#10;    val privacySettings: PrivacySettings = PrivacySettings()&#10;)&#10;&#10;/**&#10; * Data class for privacy settings&#10; */&#10;data class PrivacySettings(&#10;    val profileVisibility: ProfileVisibility = ProfileVisibility.PUBLIC,&#10;    val showRecentActivity: Boolean = true,&#10;    val showFollowers: Boolean = true&#10;)&#10;&#10;/**&#10; * Enum for profile visibility options&#10; */&#10;enum class ProfileVisibility {&#10;    PUBLIC&#10;    // Removed unused visibility options&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Venue.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Venue.kt" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;/**&#10; * Data class representing a music venue&#10; */&#10;data class Venue(&#10;    val id: String,&#10;    val name: String,&#10;    val address: String,&#10;    val city: String,&#10;    val state: String,&#10;    val zipCode: String,&#10;    val description: String,&#10;    val imageUrl: String,&#10;    val rating: Float = 0f,&#10;    val reviewCount: Int = 0,&#10;    val capacity: Int,&#10;    val contactInfo: String,&#10;    val distance: Float = 0f,  // Distance from user's location&#10;    val upcomingEvents: List&lt;Event&gt; = emptyList(),&#10;    val amenities: List&lt;String&gt; = emptyList()  // List of venue amenities/features&#10;) {&#10;    companion object {&#10;        /**&#10;         * Returns a list of sample venues for development and testing&#10;         */&#10;        fun getSampleVenues(): List&lt;Venue&gt; {&#10;            return listOf(&#10;                Venue(&#10;                    id = &quot;v1&quot;,&#10;                    name = &quot;The Sound Garden&quot;,&#10;                    address = &quot;123 Main St&quot;,&#10;                    city = &quot;Brooklyn&quot;,&#10;                    state = &quot;NY&quot;,&#10;                    zipCode = &quot;11201&quot;,&#10;                    description = &quot;A legendary venue known for launching indie bands&quot;,&#10;                    imageUrl = &quot;https://picsum.photos/id/1035/500/300&quot;,&#10;                    rating = 4.5f,&#10;                    reviewCount = 120,&#10;                    capacity = 500,&#10;                    contactInfo = &quot;info@soundgarden.com&quot;,&#10;                    distance = 0.8f,&#10;                    amenities = listOf(&quot;Live Music&quot;, &quot;Full Bar&quot;, &quot;Food Service&quot;, &quot;Outdoor Seating&quot;)&#10;                ),&#10;                Venue(&#10;                    id = &quot;v2&quot;,&#10;                    name = &quot;Electric Avenue&quot;,&#10;                    address = &quot;456 Park Ave&quot;,&#10;                    city = &quot;Brooklyn&quot;,&#10;                    state = &quot;NY&quot;,&#10;                    zipCode = &quot;11205&quot;,&#10;                    description = &quot;Modern venue with great acoustics and lighting&quot;,&#10;                    imageUrl = &quot;https://picsum.photos/id/1036/500/300&quot;,&#10;                    rating = 4.2f,&#10;                    reviewCount = 85,&#10;                    capacity = 350,&#10;                    contactInfo = &quot;contact@electricavenue.com&quot;,&#10;                    distance = 1.2f,&#10;                    amenities = listOf(&quot;DJ Booth&quot;, &quot;Dance Floor&quot;, &quot;Cocktail Bar&quot;, &quot;VIP Area&quot;)&#10;                ),&#10;                Venue(&#10;                    id = &quot;v3&quot;,&#10;                    name = &quot;The Basement&quot;,&#10;                    address = &quot;789 Broadway&quot;,&#10;                    city = &quot;Brooklyn&quot;,&#10;                    state = &quot;NY&quot;,&#10;                    zipCode = &quot;11206&quot;,&#10;                    description = &quot;Underground venue featuring indie bands and craft beer&quot;,&#10;                    imageUrl = &quot;https://picsum.photos/id/1037/500/300&quot;,&#10;                    rating = 4.8f,&#10;                    reviewCount = 210,&#10;                    capacity = 200,&#10;                    contactInfo = &quot;basement@music.com&quot;,&#10;                    distance = 1.5f,&#10;                    amenities = listOf(&quot;Indie Bands&quot;, &quot;Craft Beer&quot;, &quot;Intimate Setting&quot;, &quot;Underground&quot;)&#10;                )&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/repository/Repository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/repository/Repository.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.data.repository&#10;&#10;import com.example.pitpulseandroid.data.model.*&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.flow&#10;&#10;/**&#10; * Repository class that acts as a single source of truth for app data&#10; */&#10;class Repository {&#10;&#10;    // Mock data for development&#10;    private val _venues = MutableStateFlow&lt;List&lt;Venue&gt;&gt;(emptyList())&#10;    private val _bands = MutableStateFlow&lt;List&lt;Band&gt;&gt;(emptyList())&#10;&#10;    // Public accessors&#10;    val venues = _venues.asStateFlow()&#10;    val bands = _bands.asStateFlow()&#10;&#10;    /**&#10;     * Get a list of venues&#10;     */&#10;    fun getVenues(): Flow&lt;List&lt;Venue&gt;&gt; {&#10;        // In a real app, this would call an API or database&#10;        return flow { emit(_venues.value) }&#10;    }&#10;&#10;    /**&#10;     * Get a list of bands&#10;     */&#10;    fun getBands(): Flow&lt;List&lt;Band&gt;&gt; {&#10;        // In a real app, this would call an API or database&#10;        return flow { emit(_bands.value) }&#10;    }&#10;&#10;    /**&#10;     * Search for venues by name or location&#10;     */&#10;    fun searchVenues(query: String): Flow&lt;List&lt;Venue&gt;&gt; {&#10;        val filteredVenues = _venues.value.filter {&#10;            it.name.contains(query, ignoreCase = true) ||&#10;            it.city.contains(query, ignoreCase = true) ||&#10;            it.state.contains(query, ignoreCase = true)&#10;        }&#10;        return flow { emit(filteredVenues) }&#10;    }&#10;&#10;    /**&#10;     * Search for bands by name or genre&#10;     */&#10;    fun searchBands(query: String): Flow&lt;List&lt;Band&gt;&gt; {&#10;        val filteredBands = _bands.value.filter {&#10;            it.name.contains(query, ignoreCase = true) ||&#10;            it.genre.contains(query, ignoreCase = true)&#10;        }&#10;        return flow { emit(filteredBands) }&#10;    }&#10;&#10;    /**&#10;     * Initialize repository with mock data for development&#10;     */&#10;    fun initMockData() {&#10;        // Initialize mock venues&#10;        _venues.value = listOf(&#10;            Venue(&#10;                id = &quot;venue1&quot;,&#10;                name = &quot;The Sound Garden&quot;,&#10;                address = &quot;123 Main St&quot;,&#10;                city = &quot;Seattle&quot;,&#10;                state = &quot;WA&quot;,&#10;                zipCode = &quot;98101&quot;,&#10;                description = &quot;A legendary venue known for launching the careers of many famous grunge bands&quot;,&#10;                imageUrl = &quot;&quot;,&#10;                rating = 4.8f,&#10;                reviewCount = 156,&#10;                capacity = 500,&#10;                contactInfo = &quot;info@soundgarden.com&quot;,&#10;                distance = 1.2f&#10;            ),&#10;            Venue(&#10;                id = &quot;venue2&quot;,&#10;                name = &quot;Electric Ballroom&quot;,&#10;                address = &quot;456 Oak Ave&quot;,&#10;                city = &quot;Portland&quot;,&#10;                state = &quot;OR&quot;,&#10;                zipCode = &quot;97205&quot;,&#10;                description = &quot;A vibrant venue showcasing up-and-coming indie artists&quot;,&#10;                imageUrl = &quot;&quot;,&#10;                rating = 4.5f,&#10;                reviewCount = 98,&#10;                capacity = 350,&#10;                contactInfo = &quot;contact@electricballroom.com&quot;,&#10;                distance = 3.5f&#10;            ),&#10;            Venue(&#10;                id = &quot;venue3&quot;,&#10;                name = &quot;Rhythm House&quot;,&#10;                address = &quot;789 Pine St&quot;,&#10;                city = &quot;San Francisco&quot;,&#10;                state = &quot;CA&quot;,&#10;                zipCode = &quot;94109&quot;,&#10;                description = &quot;An intimate setting perfect for acoustic performances&quot;,&#10;                imageUrl = &quot;&quot;,&#10;                rating = 4.7f,&#10;                reviewCount = 122,&#10;                capacity = 200,&#10;                contactInfo = &quot;info@rhythmhouse.com&quot;,&#10;                distance = 5.1f&#10;            )&#10;        )&#10;&#10;        // Initialize mock bands&#10;        _bands.value = listOf(&#10;            Band(&#10;                id = &quot;band1&quot;,&#10;                name = &quot;Cosmic Drift&quot;,&#10;                genre = &quot;Indie Rock&quot;,&#10;                bio = &quot;A four-piece indie rock band known for their atmospheric sounds and introspective lyrics&quot;,&#10;                imageUrl = &quot;&quot;,&#10;                formationYear = 2018,&#10;                location = &quot;Seattle, WA&quot;,&#10;                rating = 4.6f,&#10;                reviewCount = 87,&#10;                genres = listOf(&quot;Indie Rock&quot;, &quot;Alternative&quot;, &quot;Shoegaze&quot;),&#10;                nextShow = &quot;Aug 15 at The Sound Garden&quot;&#10;            ),&#10;            Band(&#10;                id = &quot;band2&quot;,&#10;                name = &quot;Midnight Revival&quot;,&#10;                genre = &quot;Blues Rock&quot;,&#10;                bio = &quot;A power trio bringing classic blues rock into the modern era&quot;,&#10;                imageUrl = &quot;&quot;,&#10;                formationYear = 2015,&#10;                location = &quot;Chicago, IL&quot;,&#10;                rating = 4.8f,&#10;                reviewCount = 134,&#10;                genres = listOf(&quot;Blues Rock&quot;, &quot;Classic Rock&quot;, &quot;Southern Rock&quot;),&#10;                nextShow = &quot;Aug 22 at Electric Ballroom&quot;&#10;            ),&#10;            Band(&#10;                id = &quot;band3&quot;,&#10;                name = &quot;Synth Collective&quot;,&#10;                genre = &quot;Electronic&quot;,&#10;                bio = &quot;An experimental electronic group pushing the boundaries of synthesized music&quot;,&#10;                imageUrl = &quot;&quot;,&#10;                formationYear = 2020,&#10;                location = &quot;Austin, TX&quot;,&#10;                rating = 4.4f,&#10;                reviewCount = 56,&#10;                genres = listOf(&quot;Electronic&quot;, &quot;Synth-pop&quot;, &quot;Experimental&quot;),&#10;                nextShow = &quot;Sep 5 at Rhythm House&quot;&#10;            )&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.data.repository&#10;&#10;import com.example.pitpulseandroid.data.model.*&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.flow&#10;&#10;/**&#10; * Repository class that acts as a single source of truth for app data&#10; */&#10;class Repository {&#10;&#10;    // Mock data for development&#10;    private val _currentUser = MutableStateFlow&lt;User?&gt;(null)&#10;    private val _venues = MutableStateFlow&lt;List&lt;Venue&gt;&gt;(emptyList())&#10;    private val _bands = MutableStateFlow&lt;List&lt;Band&gt;&gt;(emptyList())&#10;&#10;    // Public accessors&#10;    val venues = _venues.asStateFlow()&#10;    val bands = _bands.asStateFlow()&#10;&#10;    /**&#10;     * Get a list of venues&#10;     */&#10;    fun getVenues(): Flow&lt;List&lt;Venue&gt;&gt; {&#10;        // In a real app, this would call an API or database&#10;        return flow { emit(_venues.value) }&#10;    }&#10;&#10;    /**&#10;     * Get a list of bands&#10;     */&#10;    fun getBands(): Flow&lt;List&lt;Band&gt;&gt; {&#10;        // In a real app, this would call an API or database&#10;        return flow { emit(_bands.value) }&#10;    }&#10;&#10;    /**&#10;     * Get the current logged-in user&#10;     */&#10;    fun getCurrentUser(): Flow&lt;User&gt; {&#10;        // In a real app, this would get from local storage or API&#10;        return flow {&#10;            _currentUser.value?.let {&#10;                emit(it)&#10;            } ?: throw Exception(&quot;User not logged in&quot;)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Search for venues by name or location&#10;     */&#10;    fun searchVenues(query: String): Flow&lt;List&lt;Venue&gt;&gt; {&#10;        val filteredVenues = _venues.value.filter {&#10;            it.name.contains(query, ignoreCase = true) ||&#10;            it.city.contains(query, ignoreCase = true) ||&#10;            it.state.contains(query, ignoreCase = true)&#10;        }&#10;        return flow { emit(filteredVenues) }&#10;    }&#10;&#10;    /**&#10;     * Search for bands by name or genre&#10;     */&#10;    fun searchBands(query: String): Flow&lt;List&lt;Band&gt;&gt; {&#10;        val filteredBands = _bands.value.filter {&#10;            it.name.contains(query, ignoreCase = true) ||&#10;            it.genre.contains(query, ignoreCase = true)&#10;        }&#10;        return flow { emit(filteredBands) }&#10;    }&#10;&#10;    /**&#10;     * Initialize repository with mock data for development&#10;     */&#10;    fun initMockData() {&#10;        // Initialize mock user&#10;        _currentUser.value = User(&#10;            id = &quot;user1&quot;,&#10;            username = &quot;rockfan89&quot;,&#10;            email = &quot;user@example.com&quot;,&#10;            level = 3,&#10;            reviewCount = 15,&#10;            badgeCount = 4,&#10;            badges = listOf(&#10;                Badge(&#10;                    id = &quot;badge1&quot;,&#10;                    name = &quot;Venue Explorer&quot;,&#10;                    description = &quot;Visited 5 different venues&quot;,&#10;                    imageUrl = &quot;&quot;,&#10;                    icon = 0, // Replace with actual resource ID&#10;                    badgeType = BadgeType.VENUE_VISIT,&#10;                    threshold = 5&#10;                ),&#10;                Badge(&#10;                    id = &quot;badge2&quot;,&#10;                    name = &quot;Review Master&quot;,&#10;                    description = &quot;Wrote 10 reviews&quot;,&#10;                    imageUrl = &quot;&quot;,&#10;                    icon = 0, // Replace with actual resource ID&#10;                    badgeType = BadgeType.REVIEW,&#10;                    threshold = 10&#10;                )&#10;            )&#10;        )&#10;&#10;        // Initialize mock venues&#10;        _venues.value = listOf(&#10;            Venue(&#10;                id = &quot;venue1&quot;,&#10;                name = &quot;The Sound Garden&quot;,&#10;                address = &quot;123 Main St&quot;,&#10;                city = &quot;Seattle&quot;,&#10;                state = &quot;WA&quot;,&#10;                zipCode = &quot;98101&quot;,&#10;                description = &quot;A legendary venue known for launching the careers of many famous grunge bands&quot;,&#10;                imageUrl = &quot;&quot;,&#10;                rating = 4.8f,&#10;                reviewCount = 156,&#10;                capacity = 500,&#10;                contactInfo = &quot;info@soundgarden.com&quot;,&#10;                distance = 1.2f&#10;            ),&#10;            Venue(&#10;                id = &quot;venue2&quot;,&#10;                name = &quot;Electric Ballroom&quot;,&#10;                address = &quot;456 Oak Ave&quot;,&#10;                city = &quot;Portland&quot;,&#10;                state = &quot;OR&quot;,&#10;                zipCode = &quot;97205&quot;,&#10;                description = &quot;A vibrant venue showcasing up-and-coming indie artists&quot;,&#10;                imageUrl = &quot;&quot;,&#10;                rating = 4.5f,&#10;                reviewCount = 98,&#10;                capacity = 350,&#10;                contactInfo = &quot;contact@electricballroom.com&quot;,&#10;                distance = 3.5f&#10;            ),&#10;            Venue(&#10;                id = &quot;venue3&quot;,&#10;                name = &quot;Rhythm House&quot;,&#10;                address = &quot;789 Pine St&quot;,&#10;                city = &quot;San Francisco&quot;,&#10;                state = &quot;CA&quot;,&#10;                zipCode = &quot;94109&quot;,&#10;                description = &quot;An intimate setting perfect for acoustic performances&quot;,&#10;                imageUrl = &quot;&quot;,&#10;                rating = 4.7f,&#10;                reviewCount = 122,&#10;                capacity = 200,&#10;                contactInfo = &quot;info@rhythmhouse.com&quot;,&#10;                distance = 5.1f&#10;            )&#10;        )&#10;&#10;        // Initialize mock bands&#10;        _bands.value = listOf(&#10;            Band(&#10;                id = &quot;band1&quot;,&#10;                name = &quot;Cosmic Drift&quot;,&#10;                genre = &quot;Indie Rock&quot;,&#10;                bio = &quot;A four-piece indie rock band known for their atmospheric sounds and introspective lyrics&quot;,&#10;                imageUrl = &quot;&quot;,&#10;                formationYear = 2018,&#10;                location = &quot;Seattle, WA&quot;,&#10;                rating = 4.6f,&#10;                reviewCount = 87,&#10;                genres = listOf(&quot;Indie Rock&quot;, &quot;Alternative&quot;, &quot;Shoegaze&quot;),&#10;                nextShow = &quot;Aug 15 at The Sound Garden&quot;&#10;            ),&#10;            Band(&#10;                id = &quot;band2&quot;,&#10;                name = &quot;Midnight Revival&quot;,&#10;                genre = &quot;Blues Rock&quot;,&#10;                bio = &quot;A power trio bringing classic blues rock into the modern era&quot;,&#10;                imageUrl = &quot;&quot;,&#10;                formationYear = 2015,&#10;                location = &quot;Chicago, IL&quot;,&#10;                rating = 4.8f,&#10;                reviewCount = 134,&#10;                genres = listOf(&quot;Blues Rock&quot;, &quot;Classic Rock&quot;, &quot;Southern Rock&quot;),&#10;                nextShow = &quot;Aug 22 at Electric Ballroom&quot;&#10;            ),&#10;            Band(&#10;                id = &quot;band3&quot;,&#10;                name = &quot;Synth Collective&quot;,&#10;                genre = &quot;Electronic&quot;,&#10;                bio = &quot;An experimental electronic group pushing the boundaries of synthesized music&quot;,&#10;                imageUrl = &quot;&quot;,&#10;                formationYear = 2020,&#10;                location = &quot;Austin, TX&quot;,&#10;                rating = 4.4f,&#10;                reviewCount = 56,&#10;                genres = listOf(&quot;Electronic&quot;, &quot;Synth-pop&quot;, &quot;Experimental&quot;),&#10;                nextShow = &quot;Sep 5 at Rhythm House&quot;&#10;            )&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/navigation/Screen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/navigation/Screen.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.navigation&#10;&#10;/**&#10; * Type-safe route definitions for app navigation.&#10; */&#10;sealed class Screen(val route: String) {&#10;    object Home : Screen(&quot;home&quot;)&#10;    object Venues : Screen(&quot;venues&quot;)&#10;    object Bands : Screen(&quot;bands&quot;)&#10;    object Profile : Screen(&quot;profile&quot;)&#10;&#10;    class VenueDetail(venueId: String) : Screen(&quot;venue/$venueId&quot;) {&#10;        companion object {&#10;            const val route = &quot;venue/{venueId}&quot;&#10;            const val venueIdArg = &quot;venueId&quot;&#10;        }&#10;    }&#10;&#10;    class BandDetail(bandId: String) : Screen(&quot;band/$bandId&quot;) {&#10;        companion object {&#10;            const val route = &quot;band/{bandId}&quot;&#10;            const val bandIdArg = &quot;bandId&quot;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.navigation&#10;&#10;/**&#10; * Type-safe route definitions for app navigation.&#10; */&#10;sealed class Screen(val route: String) {&#10;    object Home : Screen(&quot;home&quot;)&#10;    object Venues : Screen(&quot;venues&quot;)&#10;    object Bands : Screen(&quot;bands&quot;)&#10;    object Profile : Screen(&quot;profile&quot;)&#10;    object Badges : Screen(&quot;badges&quot;)&#10;&#10;    class VenueDetail(venueId: String) : Screen(&quot;venue/$venueId&quot;) {&#10;        companion object {&#10;            const val route = &quot;venue/{venueId}&quot;&#10;            const val venueIdArg = &quot;venueId&quot;&#10;        }&#10;    }&#10;&#10;    class BandDetail(bandId: String) : Screen(&quot;band/$bandId&quot;) {&#10;        companion object {&#10;            const val route = &quot;band/{bandId}&quot;&#10;            const val bandIdArg = &quot;bandId&quot;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/bands/BandDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/bands/BandDetailScreen.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.bands&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material.icons.filled.MusicNote&#10;import androidx.compose.material.icons.filled.Share&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BandDetailScreen(&#10;    bandId: String,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    // In a real app, you would fetch the band by ID from a repository&#10;    val band = Band.getSampleBands().find { it.id == bandId } ?: Band.getSampleBands().first()&#10;    var isFavorite by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(band.name) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { isFavorite = !isFavorite }) {&#10;                        Icon(&#10;                            imageVector = if (isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                            contentDescription = if (isFavorite) &quot;Remove from favorites&quot; else &quot;Add to favorites&quot;&#10;                        )&#10;                    }&#10;                    IconButton(onClick = { /* Handle share */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Share,&#10;                            contentDescription = &quot;Share&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Band image placeholder&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Band Image&quot;,&#10;                        style = MaterialTheme.typography.titleLarge&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Band info&#10;            Column {&#10;                Text(&#10;                    text = band.name,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.MusicNote,&#10;                        contentDescription = &quot;Genre&quot;,&#10;                        modifier = Modifier.padding(end = 4.dp)&#10;                    )&#10;                    Text(&#10;                        text = band.genre,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.LocationOn,&#10;                        contentDescription = &quot;Location&quot;,&#10;                        modifier = Modifier.padding(end = 4.dp)&#10;                    )&#10;                    Text(&#10;                        text = band.location,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Bio&#10;            Column {&#10;                Text(&#10;                    text = &quot;Biography&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = band.bio,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Formation year&#10;            Column {&#10;                Text(&#10;                    text = &quot;Formed&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = band.formationYear.toString(),&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            if (band.socialLinks.isNotEmpty()) {&#10;                HorizontalDivider()&#10;&#10;                // Social links&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Social Media&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    band.socialLinks.forEach { (platform, link) -&gt;&#10;                        Text(&#10;                            text = &quot;• $platform&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            modifier = Modifier.padding(vertical = 2.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Action buttons&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Button(&#10;                    onClick = { /* Handle click */ },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;View Shows&quot;)&#10;                }&#10;&#10;                Button(&#10;                    onClick = { /* Handle click */ },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;Follow&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun BandDetailScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        BandDetailScreen(&#10;            bandId = &quot;band1&quot;,&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.bands&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material.icons.filled.MusicNote&#10;import androidx.compose.material.icons.filled.Share&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BandDetailScreen(&#10;    bandId: String,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    // In a real app, you would fetch the band by ID from a repository&#10;    val band = Band.getSampleBands().find { it.id == bandId } ?: Band.getSampleBands().first()&#10;    var isFavorite by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(band.name) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { isFavorite = !isFavorite }) {&#10;                        Icon(&#10;                            imageVector = if (isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                            contentDescription = if (isFavorite) &quot;Remove from favorites&quot; else &quot;Add to favorites&quot;&#10;                        )&#10;                    }&#10;                    IconButton(onClick = { /* Handle share */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Share,&#10;                            contentDescription = &quot;Share&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Band image placeholder&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Band Image&quot;,&#10;                        style = MaterialTheme.typography.titleLarge&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Band info&#10;            Column {&#10;                Text(&#10;                    text = band.name,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.MusicNote,&#10;                        contentDescription = &quot;Genre&quot;,&#10;                        modifier = Modifier.padding(end = 4.dp)&#10;                    )&#10;                    Text(&#10;                        text = band.genre,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.LocationOn,&#10;                        contentDescription = &quot;Location&quot;,&#10;                        modifier = Modifier.padding(end = 4.dp)&#10;                    )&#10;                    Text(&#10;                        text = band.location,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Bio&#10;            Column {&#10;                Text(&#10;                    text = &quot;Biography&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = band.bio,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Formation year&#10;            Column {&#10;                Text(&#10;                    text = &quot;Formed&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = band.formationYear.toString(),&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            if (band.socialLinks.isNotEmpty()) {&#10;                HorizontalDivider()&#10;&#10;                // Social links&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Social Media&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    band.socialLinks.forEach { (platform, _) -&gt;&#10;                        Text(&#10;                            text = &quot;• $platform&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            modifier = Modifier.padding(vertical = 2.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Action buttons&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Button(&#10;                    onClick = { /* Handle click */ },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;View Shows&quot;)&#10;                }&#10;&#10;                Button(&#10;                    onClick = { /* Handle click */ },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;Follow&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun BandDetailScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        BandDetailScreen(&#10;            bandId = &quot;band1&quot;,&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/bands/BandsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/bands/BandsScreen.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.bands&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BandsScreen(&#10;    onBandClick: (Band) -&gt; Unit,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    val bands = Band.getSampleBands()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Bands&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 8.dp),&#10;                placeholder = { Text(&quot;Search bands...&quot;) },&#10;                trailingIcon = {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Search,&#10;                        contentDescription = &quot;Search&quot;&#10;                    )&#10;                },&#10;                singleLine = true&#10;            )&#10;&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxSize(),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp),&#10;                contentPadding = PaddingValues(vertical = 8.dp)&#10;            ) {&#10;                items(bands.filter {&#10;                    searchQuery.isEmpty() ||&#10;                    it.name.contains(searchQuery, ignoreCase = true) ||&#10;                    it.genre.contains(searchQuery, ignoreCase = true)&#10;                }) { band -&gt;&#10;                    BandListItem(&#10;                        band = band,&#10;                        onClick = { onBandClick(band) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BandListItem(&#10;    band: Band,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Placeholder for band image&#10;            Card(&#10;                modifier = Modifier.size(80.dp)&#10;            ) {&#10;                // This would be an AsyncImage in a real app&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = band.name.take(1),&#10;                        style = MaterialTheme.typography.headlineMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = band.name,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = band.genre,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = band.bio,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun BandsScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        BandsScreen(&#10;            onBandClick = {},&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.bands&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BandsScreen(&#10;    onBandClick: (Band) -&gt; Unit,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    val bands = Band.getSampleBands()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Bands&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 8.dp),&#10;                placeholder = { Text(&quot;Search bands...&quot;) },&#10;                trailingIcon = {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Search,&#10;                        contentDescription = &quot;Search&quot;&#10;                    )&#10;                },&#10;                singleLine = true&#10;            )&#10;&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxSize(),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp),&#10;                contentPadding = PaddingValues(vertical = 8.dp)&#10;            ) {&#10;                items(bands.filter {&#10;                    searchQuery.isEmpty() ||&#10;                    it.name.contains(searchQuery, ignoreCase = true) ||&#10;                    it.genre.contains(searchQuery, ignoreCase = true)&#10;                }) { band -&gt;&#10;                    BandListItem(&#10;                        band = band,&#10;                        onClick = { onBandClick(band) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BandListItem(&#10;    band: Band,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Placeholder for band image&#10;            Card(&#10;                modifier = Modifier.size(80.dp)&#10;            ) {&#10;                // This would be an AsyncImage in a real app&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = band.name.take(1),&#10;                        style = MaterialTheme.typography.headlineMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = band.name,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = band.genre,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = band.bio,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun BandsScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        BandsScreen(&#10;            onBandClick = {},&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/common/LoadingState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/common/LoadingState.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.common&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextAlign&#10;&#10;/**&#10; * Displays a loading indicator centered on the screen.&#10; */&#10;@Composable&#10;fun LoadingIndicator() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        CircularProgressIndicator()&#10;    }&#10;}&#10;&#10;/**&#10; * Displays an error message centered on the screen.&#10; * &#10; * @param message The error message to display&#10; */&#10;@Composable&#10;fun ErrorState(message: String) {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = message,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            textAlign = TextAlign.Center,&#10;            color = MaterialTheme.colorScheme.error&#10;        )&#10;    }&#10;}&#10;&#10;/**&#10; * Displays a loading state with the option to show an error message.&#10; * &#10; * @param isLoading Whether content is loading&#10; * @param error Error message, null if no error&#10; * @param content Content to display when not loading and no error&#10; */&#10;@Composable&#10;fun &lt;T&gt; LoadingState(&#10;    data: T?,&#10;    isLoading: Boolean,&#10;    error: String? = null,&#10;    content: @Composable (T) -&gt; Unit&#10;) {&#10;    when {&#10;        isLoading -&gt; LoadingIndicator()&#10;        error != null -&gt; ErrorState(message = error)&#10;        data != null -&gt; content(data)&#10;        else -&gt; ErrorState(message = &quot;No data available&quot;)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.common&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextAlign&#10;&#10;/**&#10; * Displays a loading indicator centered on the screen.&#10; */&#10;@Composable&#10;fun LoadingIndicator() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        CircularProgressIndicator()&#10;    }&#10;}&#10;&#10;/**&#10; * Displays an error message centered on the screen.&#10; * &#10; * @param message The error message to display&#10; */&#10;@Composable&#10;fun ErrorState(message: String) {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = message,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            textAlign = TextAlign.Center,&#10;            color = MaterialTheme.colorScheme.error&#10;        )&#10;    }&#10;}&#10;&#10;/**&#10; * Displays a loading state with the option to show an error message.&#10; * &#10; * @param isLoading Whether content is loading&#10; * @param error Error message, null if no error&#10; * @param content Content to display when not loading and no error&#10; */&#10;@Composable&#10;@Suppress(&quot;unused&quot;) // Will be used in future implementations&#10;fun &lt;T&gt; LoadingState(&#10;    data: T?,&#10;    isLoading: Boolean,&#10;    error: String? = null,&#10;    content: @Composable (T) -&gt; Unit&#10;) {&#10;    when {&#10;        isLoading -&gt; LoadingIndicator()&#10;        error != null -&gt; ErrorState(message = error)&#10;        data != null -&gt; content(data)&#10;        else -&gt; ErrorState(message = &quot;No data available&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/components/UserStatsCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/components/UserStatsCard.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Badge&#10;import com.example.pitpulseandroid.data.model.User&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;import com.example.pitpulseandroid.ui.theme.Purple600&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Star&#10;&#10;/**&#10; * A card component that displays user statistics.&#10; * &#10; * @param user The user whose stats to display&#10; * @param modifier Modifier to be applied to the card&#10; * @param onClick Callback when the card is clicked&#10; */&#10;@Composable&#10;fun UserStatsCard(&#10;    modifier: Modifier = Modifier,&#10;    user: User,&#10;    onClick: (User) -&gt; Unit = {}&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClick(user) },&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            // User info row&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Avatar&#10;                AvatarComponent(&#10;                    imageUrl = &quot;&quot;,&#10;                    fallbackText = user.username,&#10;                    size = 48.dp&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.width(12.dp))&#10;                &#10;                // User details&#10;                Column {&#10;                    Text(&#10;                        text = user.username,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    &#10;                    Text(&#10;                        text = &quot;Level ${user.level}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            HorizontalDivider()&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            // Stats row&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                // Reviews stat&#10;                StatItem(&#10;                    value = user.reviewCount.toString(),&#10;                    label = &quot;Reviews&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;                &#10;                // Badges stat&#10;                StatItem(&#10;                    value = user.badgeCount.toString(),&#10;                    label = &quot;Badges&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            // Recent badge (if any)&#10;            if (user.badges.isNotEmpty()) {&#10;                val recentBadge = user.badges.first()&#10;                RecentBadgeItem(badge = recentBadge)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatItem(&#10;    value: String,&#10;    label: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        modifier = modifier&#10;    ) {&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = Color.Gray&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun RecentBadgeItem(&#10;    badge: Badge,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Row(&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clip(RoundedCornerShape(8.dp))&#10;            .background(MaterialTheme.colorScheme.surfaceVariant)&#10;            .padding(12.dp)&#10;    ) {&#10;        // Badge icon&#10;        Box(&#10;            contentAlignment = Alignment.Center,&#10;            modifier = Modifier&#10;                .size(40.dp)&#10;                .clip(CircleShape)&#10;                .background(Purple600)&#10;        ) {&#10;            // Using an Icon component instead of directly referencing the icon&#10;            androidx.compose.material3.Icon(&#10;                imageVector = Icons.Filled.Star,&#10;                contentDescription = &quot;Badge icon&quot;,&#10;                tint = androidx.compose.ui.graphics.Color.White&#10;            )&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.width(12.dp))&#10;        &#10;        // Badge details&#10;        Column {&#10;            Text(&#10;                text = &quot;New Badge: ${badge.name}&quot;,&#10;                style = MaterialTheme.typography.titleSmall,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            &#10;            Text(&#10;                text = badge.description,&#10;                style = MaterialTheme.typography.bodySmall&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun UserStatsCardPreview() {&#10;    PitPulseAndroidTheme {&#10;        UserStatsCard(&#10;            user = User(&#10;                id = &quot;user123&quot;,&#10;                username = &quot;rockfan92&quot;,&#10;                email = &quot;rockfan92@example.com&quot;,&#10;                level = 12,&#10;                reviewCount = 47,&#10;                badgeCount = 15,&#10;                badges = listOf(&#10;                    Badge(&#10;                        id = &quot;badge123&quot;,&#10;                        name = &quot;Night Owl&quot;,&#10;                        description = &quot;Attended 5 shows that started after 10pm&quot;,&#10;                        imageUrl = &quot;&quot;,&#10;                        icon = android.R.drawable.ic_dialog_info, // Using a public system icon instead&#10;                        badgeType = com.example.pitpulseandroid.data.model.BadgeType.SPECIAL_EVENT,&#10;                        threshold = 5&#10;                    )&#10;                )&#10;            ),&#10;            modifier = Modifier.padding(16.dp)&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Badge&#10;import com.example.pitpulseandroid.data.model.User&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;import com.example.pitpulseandroid.ui.theme.Purple600&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Star&#10;&#10;/**&#10; * A card component that displays user statistics.&#10; * &#10; * @param user The user whose stats to display&#10; * @param modifier Modifier to be applied to the card&#10; * @param onClick Callback when the card is clicked&#10; */&#10;@Composable&#10;fun UserStatsCard(&#10;    modifier: Modifier = Modifier,&#10;    user: User,&#10;    onClick: (User) -&gt; Unit = {}&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClick(user) },&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            // User info row&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Avatar&#10;                AvatarComponent(&#10;                    imageUrl = &quot;&quot;,&#10;                    fallbackText = user.username,&#10;                    size = 48.dp&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.width(12.dp))&#10;                &#10;                // User details&#10;                Column {&#10;                    Text(&#10;                        text = user.username,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    &#10;                    Text(&#10;                        text = &quot;Level ${user.level}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            HorizontalDivider()&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            // Stats row&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                // Reviews stat&#10;                StatItem(&#10;                    value = user.reviewCount.toString(),&#10;                    label = &quot;Reviews&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;                &#10;                // Badges stat&#10;                StatItem(&#10;                    value = user.badgeCount.toString(),&#10;                    label = &quot;Badges&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            // Recent badge (if any)&#10;            if (user.badges.isNotEmpty()) {&#10;                val recentBadge = user.badges.first()&#10;                RecentBadgeItem(badge = recentBadge)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatItem(&#10;    value: String,&#10;    label: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        modifier = modifier&#10;    ) {&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = Color.Gray&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun RecentBadgeItem(&#10;    badge: Badge,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Row(&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clip(RoundedCornerShape(8.dp))&#10;            .background(MaterialTheme.colorScheme.surfaceVariant)&#10;            .padding(12.dp)&#10;    ) {&#10;        // Badge icon&#10;        Box(&#10;            contentAlignment = Alignment.Center,&#10;            modifier = Modifier&#10;                .size(40.dp)&#10;                .clip(CircleShape)&#10;                .background(Purple600)&#10;        ) {&#10;            // Using an Icon component instead of directly referencing the icon&#10;            androidx.compose.material3.Icon(&#10;                imageVector = Icons.Filled.Star,&#10;                contentDescription = &quot;Badge icon&quot;,&#10;                tint = Color.White&#10;            )&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.width(12.dp))&#10;        &#10;        // Badge details&#10;        Column {&#10;            Text(&#10;                text = &quot;New Badge: ${badge.name}&quot;,&#10;                style = MaterialTheme.typography.titleSmall,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            &#10;            Text(&#10;                text = badge.description,&#10;                style = MaterialTheme.typography.bodySmall&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun UserStatsCardPreview() {&#10;    PitPulseAndroidTheme {&#10;        UserStatsCard(&#10;            user = User(&#10;                id = &quot;user123&quot;,&#10;                username = &quot;rockfan92&quot;,&#10;                email = &quot;rockfan92@example.com&quot;,&#10;                level = 12,&#10;                reviewCount = 47,&#10;                badgeCount = 15,&#10;                badges = listOf(&#10;                    Badge(&#10;                        id = &quot;badge123&quot;,&#10;                        name = &quot;Night Owl&quot;,&#10;                        description = &quot;Attended 5 shows that started after 10pm&quot;,&#10;                        imageUrl = &quot;&quot;,&#10;                        icon = android.R.drawable.ic_dialog_info, // Using a public system icon instead&#10;                        badgeType = com.example.pitpulseandroid.data.model.BadgeType.SPECIAL_EVENT,&#10;                        threshold = 5&#10;                    )&#10;                )&#10;            ),&#10;            modifier = Modifier.padding(16.dp)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeScreen.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.home&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Notifications&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HomeScreen(&#10;    onVenueClick: (Venue) -&gt; Unit,&#10;    onBandClick: (Band) -&gt; Unit,&#10;    onUserClick: () -&gt; Unit,&#10;    onNotificationClick: () -&gt; Unit&#10;) {&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;PitPulse&quot;) },&#10;                actions = {&#10;                    IconButton(onClick = onNotificationClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Notifications,&#10;                            contentDescription = &quot;Notifications&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp),&#10;            contentPadding = PaddingValues(16.dp)&#10;        ) {&#10;            item {&#10;                Text(&#10;                    text = &quot;Featured Venues&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                VenueRow(&#10;                    venues = Venue.getSampleVenues(),&#10;                    onVenueClick = onVenueClick&#10;                )&#10;            }&#10;&#10;            item {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Text(&#10;                    text = &quot;Popular Bands&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                BandRow(&#10;                    bands = Band.getSampleBands(),&#10;                    onBandClick = onBandClick&#10;                )&#10;            }&#10;&#10;            item {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Text(&#10;                    text = &quot;Upcoming Shows&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                UpcomingShowsList()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun VenueRow(&#10;    venues: List&lt;Venue&gt;,&#10;    onVenueClick: (Venue) -&gt; Unit&#10;) {&#10;    LazyRow(&#10;        horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        items(venues) { venue -&gt;&#10;            VenueCard(&#10;                venue = venue,&#10;                onClick = { onVenueClick(venue) }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun VenueCard(&#10;    venue: Venue,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth(0.8f)&#10;            .height(120.dp)&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = venue.name,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = &quot;${venue.city}, ${venue.state}&quot;,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = &quot;Capacity: ${venue.capacity}&quot;,&#10;                style = MaterialTheme.typography.bodySmall&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BandRow(&#10;    bands: List&lt;Band&gt;,&#10;    onBandClick: (Band) -&gt; Unit&#10;) {&#10;    LazyRow(&#10;        horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        items(bands) { band -&gt;&#10;            BandCard(&#10;                band = band,&#10;                onClick = { onBandClick(band) }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BandCard(&#10;    band: Band,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth(0.8f)&#10;            .height(120.dp)&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = band.name,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = band.genre,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = band.location,&#10;                style = MaterialTheme.typography.bodySmall&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun UpcomingShowsList() {&#10;    Column(&#10;        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        // Sample upcoming shows&#10;        for (i in 1..3) {&#10;            UpcomingShowItem(&#10;                bandName = &quot;Band ${i}&quot;,&#10;                venueName = &quot;Venue ${i}&quot;,&#10;                date = &quot;Aug ${i + 10}, 2025&quot;,&#10;                onClick = { /* Handle click */ }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun UpcomingShowItem(&#10;    bandName: String,&#10;    venueName: String,&#10;    date: String,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = bandName,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = venueName,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;            Text(&#10;                text = date,&#10;                style = MaterialTheme.typography.bodySmall&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun HomeScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        HomeScreen(&#10;            onVenueClick = {},&#10;            onBandClick = {},&#10;            onUserClick = {},&#10;            onNotificationClick = {}&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.home&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Notifications&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HomeScreen(&#10;    onVenueClick: (Venue) -&gt; Unit,&#10;    onBandClick: (Band) -&gt; Unit,&#10;    @Suppress(&quot;UNUSED_PARAMETER&quot;) onUserClick: () -&gt; Unit,&#10;    onNotificationClick: () -&gt; Unit&#10;) {&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;PitPulse&quot;) },&#10;                actions = {&#10;                    IconButton(onClick = onNotificationClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Notifications,&#10;                            contentDescription = &quot;Notifications&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp),&#10;            contentPadding = PaddingValues(16.dp)&#10;        ) {&#10;            item {&#10;                Text(&#10;                    text = &quot;Featured Venues&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                VenueRow(&#10;                    venues = Venue.getSampleVenues(),&#10;                    onVenueClick = onVenueClick&#10;                )&#10;            }&#10;&#10;            item {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Text(&#10;                    text = &quot;Popular Bands&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                BandRow(&#10;                    bands = Band.getSampleBands(),&#10;                    onBandClick = onBandClick&#10;                )&#10;            }&#10;&#10;            item {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Text(&#10;                    text = &quot;Upcoming Shows&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                UpcomingShowsList()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun VenueRow(&#10;    venues: List&lt;Venue&gt;,&#10;    onVenueClick: (Venue) -&gt; Unit&#10;) {&#10;    LazyRow(&#10;        horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        items(venues) { venue -&gt;&#10;            VenueCard(&#10;                venue = venue,&#10;                onClick = { onVenueClick(venue) }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun VenueCard(&#10;    venue: Venue,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth(0.8f)&#10;            .height(120.dp)&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = venue.name,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = &quot;${venue.city}, ${venue.state}&quot;,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = &quot;Capacity: ${venue.capacity}&quot;,&#10;                style = MaterialTheme.typography.bodySmall&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BandRow(&#10;    bands: List&lt;Band&gt;,&#10;    onBandClick: (Band) -&gt; Unit&#10;) {&#10;    LazyRow(&#10;        horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        items(bands) { band -&gt;&#10;            BandCard(&#10;                band = band,&#10;                onClick = { onBandClick(band) }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BandCard(&#10;    band: Band,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth(0.8f)&#10;            .height(120.dp)&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = band.name,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = band.genre,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = band.location,&#10;                style = MaterialTheme.typography.bodySmall&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun UpcomingShowsList() {&#10;    Column(&#10;        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        // Sample upcoming shows&#10;        for (i in 1..3) {&#10;            UpcomingShowItem(&#10;                bandName = &quot;Band ${i}&quot;,&#10;                venueName = &quot;Venue ${i}&quot;,&#10;                date = &quot;Aug ${i + 10}, 2025&quot;,&#10;                onClick = { /* Handle click */ }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun UpcomingShowItem(&#10;    bandName: String,&#10;    venueName: String,&#10;    date: String,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = bandName,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = venueName,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;            Text(&#10;                text = date,&#10;                style = MaterialTheme.typography.bodySmall&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun HomeScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        HomeScreen(&#10;            onVenueClick = {},&#10;            onBandClick = {},&#10;            onUserClick = {},&#10;            onNotificationClick = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeViewModel.kt.fixed">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeViewModel.kt.fixed" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.home&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.pitpulseandroid.data.repository.Repository&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.data.model.User&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.catch&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * ViewModel for the Home screen.&#10; * This class is used by the Home screen to display venues, bands, and user information.&#10; */&#10;@Suppress(&quot;unused&quot;)&#10;class HomeViewModel(private val repository: Repository) : ViewModel() {&#10;&#10;    // UI state for the Home screen&#10;    private val _uiState = MutableStateFlow(HomeUiState())&#10;    &#10;    /**&#10;     * Public accessor for the UI state.&#10;     * This is observed by the Home screen to display content and handle loading/error states.&#10;     */&#10;    @Suppress(&quot;unused&quot;)&#10;    val uiState: StateFlow&lt;HomeUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        // Initialize repository with mock data&#10;        repository.initMockData()&#10;        loadData()&#10;    }&#10;&#10;    /**&#10;     * Load all data needed for the Home screen.&#10;     */&#10;    private fun loadData() {&#10;        viewModelScope.launch {&#10;            // Load venues&#10;            repository.getVenues()&#10;                .catch { &#10;                    _uiState.value = _uiState.value.copy(error = it.message)&#10;                    // Load sample venues as fallback&#10;                    _uiState.value = _uiState.value.copy(&#10;                        venues = getSampleVenues(),&#10;                        isLoading = false&#10;                    )&#10;                }&#10;                .collect { venues -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        venues = venues,&#10;                        isLoading = false&#10;                    )&#10;                }&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            // Load bands&#10;            repository.getBands()&#10;                .catch { &#10;                    _uiState.value = _uiState.value.copy(error = it.message)&#10;                    // Load sample bands as fallback&#10;                    _uiState.value = _uiState.value.copy(&#10;                        bands = getSampleBands(),&#10;                        isLoading = false&#10;                    )&#10;                }&#10;                .collect { bands -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        bands = bands,&#10;                        isLoading = false&#10;                    )&#10;                }&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            // Load user&#10;            repository.getCurrentUser()&#10;                .catch { _uiState.value = _uiState.value.copy(error = it.message) }&#10;                .collect { user -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        user = user,&#10;                        isLoading = false&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Search venues and bands.&#10;     */&#10;    @Suppress(&quot;unused&quot;)&#10;    fun search(query: String) {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isSearching = true)&#10;&#10;            repository.searchVenues(query)&#10;                .catch { _uiState.value = _uiState.value.copy(error = it.message) }&#10;                .collect { venues -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        venues = venues,&#10;                        isSearching = false&#10;                    )&#10;                }&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            repository.searchBands(query)&#10;                .catch { _uiState.value = _uiState.value.copy(error = it.message) }&#10;                .collect { bands -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        bands = bands,&#10;                        isSearching = false&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get sample venues data for testing or fallback.&#10;     */&#10;    private fun getSampleVenues(): List&lt;Venue&gt; {&#10;        return listOf(&#10;            Venue(&#10;                id = &quot;v1&quot;,&#10;                name = &quot;The Sound Garden&quot;,&#10;                address = &quot;123 Main St&quot;,&#10;                city = &quot;Brooklyn&quot;,&#10;                state = &quot;NY&quot;,&#10;                zipCode = &quot;11201&quot;,&#10;                description = &quot;A legendary venue known for launching indie bands&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1035/500/300&quot;,&#10;                rating = 4.5f,&#10;                reviewCount = 120,&#10;                capacity = 500,&#10;                contactInfo = &quot;info@soundgarden.com&quot;,&#10;                distance = 0.8f&#10;            ),&#10;            Venue(&#10;                id = &quot;v2&quot;,&#10;                name = &quot;Electric Avenue&quot;,&#10;                address = &quot;456 Park Ave&quot;,&#10;                city = &quot;Brooklyn&quot;,&#10;                state = &quot;NY&quot;,&#10;                zipCode = &quot;11205&quot;,&#10;                description = &quot;Modern venue with great acoustics and lighting&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1036/500/300&quot;,&#10;                rating = 4.2f,&#10;                reviewCount = 85,&#10;                capacity = 350,&#10;                contactInfo = &quot;contact@electricavenue.com&quot;,&#10;                distance = 1.2f&#10;            ),&#10;            Venue(&#10;                id = &quot;v3&quot;,&#10;                name = &quot;The Basement&quot;,&#10;                address = &quot;789 Broadway&quot;,&#10;                city = &quot;Brooklyn&quot;,&#10;                state = &quot;NY&quot;,&#10;                zipCode = &quot;11206&quot;,&#10;                description = &quot;Underground venue featuring indie bands and craft beer&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1037/500/300&quot;,&#10;                rating = 4.8f,&#10;                reviewCount = 210,&#10;                capacity = 200,&#10;                contactInfo = &quot;basement@music.com&quot;,&#10;                distance = 1.5f&#10;            )&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Get sample bands data for testing or fallback.&#10;     */&#10;    private fun getSampleBands(): List&lt;Band&gt; {&#10;        return listOf(&#10;            Band(&#10;                id = &quot;b1&quot;,&#10;                name = &quot;Electric Harmony&quot;,&#10;                genre = &quot;Rock&quot;,&#10;                bio = &quot;A four-piece band known for energetic performances&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1038/500/300&quot;,&#10;                formationYear = 2018,&#10;                location = &quot;Brooklyn, NY&quot;,&#10;                rating = 4.7f,&#10;                reviewCount = 156,&#10;                genres = listOf(&quot;Rock&quot;, &quot;Alternative&quot;, &quot;Indie&quot;),&#10;                nextShow = &quot;Tonight at The Sound Garden&quot;&#10;            ),&#10;            Band(&#10;                id = &quot;b2&quot;,&#10;                name = &quot;Midnight Groove&quot;,&#10;                genre = &quot;R&amp;B&quot;,&#10;                bio = &quot;Soul collective bringing back classic sounds with a modern twist&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1039/500/300&quot;,&#10;                formationYear = 2016,&#10;                location = &quot;Queens, NY&quot;,&#10;                rating = 4.3f,&#10;                reviewCount = 98,&#10;                genres = listOf(&quot;R&amp;B&quot;, &quot;Soul&quot;, &quot;Funk&quot;),&#10;                nextShow = &quot;Tomorrow at Electric Avenue&quot;&#10;            ),&#10;            Band(&#10;                id = &quot;b3&quot;,&#10;                name = &quot;Cosmic Travelers&quot;,&#10;                genre = &quot;Psychedelic&quot;,&#10;                bio = &quot;Experimental space rock outfit pushing musical boundaries&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1040/500/300&quot;,&#10;                formationYear = 2020,&#10;                location = &quot;Manhattan, NY&quot;,&#10;                rating = 4.9f,&#10;                reviewCount = 230,&#10;                genres = listOf(&quot;Psychedelic&quot;, &quot;Space Rock&quot;, &quot;Experimental&quot;),&#10;                nextShow = &quot;Sat at The Basement&quot;&#10;            )&#10;        )&#10;    }&#10;}&#10;&#10;/**&#10; * UI state for the Home screen.&#10; */&#10;data class HomeUiState(&#10;    val venues: List&lt;Venue&gt; = emptyList(),&#10;    val bands: List&lt;Band&gt; = emptyList(),&#10;    val user: User? = null,&#10;    val isLoading: Boolean = true,&#10;    val isSearching: Boolean = false,&#10;    val error: String? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeViewModel.kt.new">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeViewModel.kt.new" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.home&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.pitpulseandroid.data.repository.Repository&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.data.model.User&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.catch&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * ViewModel for the Home screen.&#10; */&#10;class HomeViewModel(private val repository: Repository) : ViewModel() {&#10;&#10;    // UI state for the Home screen&#10;    private val _uiState = MutableStateFlow(HomeUiState())&#10;    val uiState: StateFlow&lt;HomeUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        // Initialize repository with mock data&#10;        repository.initMockData()&#10;        loadData()&#10;    }&#10;&#10;    /**&#10;     * Load all data needed for the Home screen.&#10;     */&#10;    private fun loadData() {&#10;        viewModelScope.launch {&#10;            // Load venues&#10;            repository.getVenues()&#10;                .catch { &#10;                    _uiState.value = _uiState.value.copy(error = it.message)&#10;                    // Load sample venues as fallback&#10;                    _uiState.value = _uiState.value.copy(&#10;                        venues = getSampleVenues(),&#10;                        isLoading = false&#10;                    )&#10;                }&#10;                .collect { venues -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        venues = venues,&#10;                        isLoading = false&#10;                    )&#10;                }&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            // Load bands&#10;            repository.getBands()&#10;                .catch { &#10;                    _uiState.value = _uiState.value.copy(error = it.message)&#10;                    // Load sample bands as fallback&#10;                    _uiState.value = _uiState.value.copy(&#10;                        bands = getSampleBands(),&#10;                        isLoading = false&#10;                    )&#10;                }&#10;                .collect { bands -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        bands = bands,&#10;                        isLoading = false&#10;                    )&#10;                }&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            // Load user&#10;            repository.getCurrentUser()&#10;                .catch { _uiState.value = _uiState.value.copy(error = it.message) }&#10;                .collect { user -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        user = user,&#10;                        isLoading = false&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Search venues and bands.&#10;     */&#10;    fun search(query: String) {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isSearching = true)&#10;&#10;            repository.searchVenues(query)&#10;                .catch { _uiState.value = _uiState.value.copy(error = it.message) }&#10;                .collect { venues -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        venues = venues,&#10;                        isSearching = false&#10;                    )&#10;                }&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            repository.searchBands(query)&#10;                .catch { _uiState.value = _uiState.value.copy(error = it.message) }&#10;                .collect { bands -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        bands = bands,&#10;                        isSearching = false&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get sample venues data for testing or fallback.&#10;     */&#10;    private fun getSampleVenues(): List&lt;Venue&gt; {&#10;        return listOf(&#10;            Venue(&#10;                id = &quot;v1&quot;,&#10;                name = &quot;The Sound Garden&quot;,&#10;                address = &quot;123 Main St&quot;,&#10;                city = &quot;Brooklyn&quot;,&#10;                state = &quot;NY&quot;,&#10;                zipCode = &quot;11201&quot;,&#10;                description = &quot;A legendary venue known for launching indie bands&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1035/500/300&quot;,&#10;                rating = 4.5f,&#10;                reviewCount = 120,&#10;                capacity = 500,&#10;                contactInfo = &quot;info@soundgarden.com&quot;,&#10;                distance = 0.8f&#10;            ),&#10;            Venue(&#10;                id = &quot;v2&quot;,&#10;                name = &quot;Electric Avenue&quot;,&#10;                address = &quot;456 Park Ave&quot;,&#10;                city = &quot;Brooklyn&quot;,&#10;                state = &quot;NY&quot;,&#10;                zipCode = &quot;11205&quot;,&#10;                description = &quot;Modern venue with great acoustics and lighting&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1036/500/300&quot;,&#10;                rating = 4.2f,&#10;                reviewCount = 85,&#10;                capacity = 350,&#10;                contactInfo = &quot;contact@electricavenue.com&quot;,&#10;                distance = 1.2f&#10;            ),&#10;            Venue(&#10;                id = &quot;v3&quot;,&#10;                name = &quot;The Basement&quot;,&#10;                address = &quot;789 Broadway&quot;,&#10;                city = &quot;Brooklyn&quot;,&#10;                state = &quot;NY&quot;,&#10;                zipCode = &quot;11206&quot;,&#10;                description = &quot;Underground venue featuring indie bands and craft beer&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1037/500/300&quot;,&#10;                rating = 4.8f,&#10;                reviewCount = 210,&#10;                capacity = 200,&#10;                contactInfo = &quot;basement@music.com&quot;,&#10;                distance = 1.5f&#10;            )&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Get sample bands data for testing or fallback.&#10;     */&#10;    private fun getSampleBands(): List&lt;Band&gt; {&#10;        return listOf(&#10;            Band(&#10;                id = &quot;b1&quot;,&#10;                name = &quot;Electric Harmony&quot;,&#10;                genre = &quot;Rock&quot;,&#10;                bio = &quot;A four-piece band known for energetic performances&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1038/500/300&quot;,&#10;                formationYear = 2018,&#10;                location = &quot;Brooklyn, NY&quot;,&#10;                rating = 4.7f,&#10;                reviewCount = 156,&#10;                genres = listOf(&quot;Rock&quot;, &quot;Alternative&quot;, &quot;Indie&quot;),&#10;                nextShow = &quot;Tonight at The Sound Garden&quot;&#10;            ),&#10;            Band(&#10;                id = &quot;b2&quot;,&#10;                name = &quot;Midnight Groove&quot;,&#10;                genre = &quot;R&amp;B&quot;,&#10;                bio = &quot;Soul collective bringing back classic sounds with a modern twist&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1039/500/300&quot;,&#10;                formationYear = 2016,&#10;                location = &quot;Queens, NY&quot;,&#10;                rating = 4.3f,&#10;                reviewCount = 98,&#10;                genres = listOf(&quot;R&amp;B&quot;, &quot;Soul&quot;, &quot;Funk&quot;),&#10;                nextShow = &quot;Tomorrow at Electric Avenue&quot;&#10;            ),&#10;            Band(&#10;                id = &quot;b3&quot;,&#10;                name = &quot;Cosmic Travelers&quot;,&#10;                genre = &quot;Psychedelic&quot;,&#10;                bio = &quot;Experimental space rock outfit pushing musical boundaries&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1040/500/300&quot;,&#10;                formationYear = 2020,&#10;                location = &quot;Manhattan, NY&quot;,&#10;                rating = 4.9f,&#10;                reviewCount = 230,&#10;                genres = listOf(&quot;Psychedelic&quot;, &quot;Space Rock&quot;, &quot;Experimental&quot;),&#10;                nextShow = &quot;Sat at The Basement&quot;&#10;            )&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Factory for creating HomeViewModel instances.&#10;     */&#10;    class Factory : ViewModelProvider.Factory {&#10;        @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;        override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;            if (modelClass.isAssignableFrom(HomeViewModel::class.java)) {&#10;                return HomeViewModel(Repository()) as T&#10;            }&#10;            throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * UI state for the Home screen.&#10; */&#10;data class HomeUiState(&#10;    val venues: List&lt;Venue&gt; = emptyList(),&#10;    val bands: List&lt;Band&gt; = emptyList(),&#10;    val user: User? = null,&#10;    val isLoading: Boolean = true,&#10;    val isSearching: Boolean = false,&#10;    val error: String? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeViewModel.kt.updated">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeViewModel.kt.updated" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.home&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.pitpulseandroid.data.repository.Repository&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.data.model.User&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.catch&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * ViewModel for the Home screen.&#10; * This class is used by the Home screen to display venues, bands, and user information.&#10; */&#10;class HomeViewModel(private val repository: Repository) : ViewModel() {&#10;&#10;    // UI state for the Home screen&#10;    private val _uiState = MutableStateFlow(HomeUiState())&#10;    &#10;    /**&#10;     * Public accessor for the UI state.&#10;     * This is observed by the Home screen to display content and handle loading/error states.&#10;     */&#10;    val uiState: StateFlow&lt;HomeUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        // Initialize repository with mock data&#10;        repository.initMockData()&#10;        loadData()&#10;    }&#10;&#10;    /**&#10;     * Load all data needed for the Home screen.&#10;     */&#10;    private fun loadData() {&#10;        viewModelScope.launch {&#10;            // Load venues&#10;            repository.getVenues()&#10;                .catch { &#10;                    _uiState.value = _uiState.value.copy(error = it.message)&#10;                    // Load sample venues as fallback&#10;                    _uiState.value = _uiState.value.copy(&#10;                        venues = getSampleVenues(),&#10;                        isLoading = false&#10;                    )&#10;                }&#10;                .collect { venues -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        venues = venues,&#10;                        isLoading = false&#10;                    )&#10;                }&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            // Load bands&#10;            repository.getBands()&#10;                .catch { &#10;                    _uiState.value = _uiState.value.copy(error = it.message)&#10;                    // Load sample bands as fallback&#10;                    _uiState.value = _uiState.value.copy(&#10;                        bands = getSampleBands(),&#10;                        isLoading = false&#10;                    )&#10;                }&#10;                .collect { bands -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        bands = bands,&#10;                        isLoading = false&#10;                    )&#10;                }&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            // Load user&#10;            repository.getCurrentUser()&#10;                .catch { _uiState.value = _uiState.value.copy(error = it.message) }&#10;                .collect { user -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        user = user,&#10;                        isLoading = false&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Search venues and bands.&#10;     */&#10;    fun search(query: String) {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isSearching = true)&#10;&#10;            repository.searchVenues(query)&#10;                .catch { _uiState.value = _uiState.value.copy(error = it.message) }&#10;                .collect { venues -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        venues = venues,&#10;                        isSearching = false&#10;                    )&#10;                }&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            repository.searchBands(query)&#10;                .catch { _uiState.value = _uiState.value.copy(error = it.message) }&#10;                .collect { bands -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        bands = bands,&#10;                        isSearching = false&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get sample venues data for testing or fallback.&#10;     */&#10;    private fun getSampleVenues(): List&lt;Venue&gt; {&#10;        return listOf(&#10;            Venue(&#10;                id = &quot;v1&quot;,&#10;                name = &quot;The Sound Garden&quot;,&#10;                address = &quot;123 Main St&quot;,&#10;                city = &quot;Brooklyn&quot;,&#10;                state = &quot;NY&quot;,&#10;                zipCode = &quot;11201&quot;,&#10;                description = &quot;A legendary venue known for launching indie bands&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1035/500/300&quot;,&#10;                rating = 4.5f,&#10;                reviewCount = 120,&#10;                capacity = 500,&#10;                contactInfo = &quot;info@soundgarden.com&quot;,&#10;                distance = 0.8f&#10;            ),&#10;            Venue(&#10;                id = &quot;v2&quot;,&#10;                name = &quot;Electric Avenue&quot;,&#10;                address = &quot;456 Park Ave&quot;,&#10;                city = &quot;Brooklyn&quot;,&#10;                state = &quot;NY&quot;,&#10;                zipCode = &quot;11205&quot;,&#10;                description = &quot;Modern venue with great acoustics and lighting&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1036/500/300&quot;,&#10;                rating = 4.2f,&#10;                reviewCount = 85,&#10;                capacity = 350,&#10;                contactInfo = &quot;contact@electricavenue.com&quot;,&#10;                distance = 1.2f&#10;            ),&#10;            Venue(&#10;                id = &quot;v3&quot;,&#10;                name = &quot;The Basement&quot;,&#10;                address = &quot;789 Broadway&quot;,&#10;                city = &quot;Brooklyn&quot;,&#10;                state = &quot;NY&quot;,&#10;                zipCode = &quot;11206&quot;,&#10;                description = &quot;Underground venue featuring indie bands and craft beer&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1037/500/300&quot;,&#10;                rating = 4.8f,&#10;                reviewCount = 210,&#10;                capacity = 200,&#10;                contactInfo = &quot;basement@music.com&quot;,&#10;                distance = 1.5f&#10;            )&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Get sample bands data for testing or fallback.&#10;     */&#10;    private fun getSampleBands(): List&lt;Band&gt; {&#10;        return listOf(&#10;            Band(&#10;                id = &quot;b1&quot;,&#10;                name = &quot;Electric Harmony&quot;,&#10;                genre = &quot;Rock&quot;,&#10;                bio = &quot;A four-piece band known for energetic performances&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1038/500/300&quot;,&#10;                formationYear = 2018,&#10;                location = &quot;Brooklyn, NY&quot;,&#10;                rating = 4.7f,&#10;                reviewCount = 156,&#10;                genres = listOf(&quot;Rock&quot;, &quot;Alternative&quot;, &quot;Indie&quot;),&#10;                nextShow = &quot;Tonight at The Sound Garden&quot;&#10;            ),&#10;            Band(&#10;                id = &quot;b2&quot;,&#10;                name = &quot;Midnight Groove&quot;,&#10;                genre = &quot;R&amp;B&quot;,&#10;                bio = &quot;Soul collective bringing back classic sounds with a modern twist&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1039/500/300&quot;,&#10;                formationYear = 2016,&#10;                location = &quot;Queens, NY&quot;,&#10;                rating = 4.3f,&#10;                reviewCount = 98,&#10;                genres = listOf(&quot;R&amp;B&quot;, &quot;Soul&quot;, &quot;Funk&quot;),&#10;                nextShow = &quot;Tomorrow at Electric Avenue&quot;&#10;            ),&#10;            Band(&#10;                id = &quot;b3&quot;,&#10;                name = &quot;Cosmic Travelers&quot;,&#10;                genre = &quot;Psychedelic&quot;,&#10;                bio = &quot;Experimental space rock outfit pushing musical boundaries&quot;,&#10;                imageUrl = &quot;https://picsum.photos/id/1040/500/300&quot;,&#10;                formationYear = 2020,&#10;                location = &quot;Manhattan, NY&quot;,&#10;                rating = 4.9f,&#10;                reviewCount = 230,&#10;                genres = listOf(&quot;Psychedelic&quot;, &quot;Space Rock&quot;, &quot;Experimental&quot;),&#10;                nextShow = &quot;Sat at The Basement&quot;&#10;            )&#10;        )&#10;    }&#10;}&#10;&#10;/**&#10; * UI state for the Home screen.&#10; */&#10;data class HomeUiState(&#10;    val venues: List&lt;Venue&gt; = emptyList(),&#10;    val bands: List&lt;Band&gt; = emptyList(),&#10;    val user: User? = null,&#10;    val isLoading: Boolean = true,&#10;    val isSearching: Boolean = false,&#10;    val error: String? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/profile/ProfileScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/profile/ProfileScreen.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.profile&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Info&#10;import androidx.compose.material.icons.filled.Notifications&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Divider&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProfileScreen(&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    // This would be user data from a repository in a real app&#10;    val userName = &quot;John Doe&quot;&#10;    val userEmail = &quot;john.doe@example.com&quot;&#10;    var notificationsEnabled by remember { mutableStateOf(true) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Profile&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { /* Open settings */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Settings,&#10;                            contentDescription = &quot;Settings&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Profile header&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // Profile image&#10;                Surface(&#10;                    modifier = Modifier&#10;                        .size(120.dp)&#10;                        .clip(CircleShape),&#10;                    color = MaterialTheme.colorScheme.primaryContainer&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Profile picture&quot;,&#10;                        modifier = Modifier&#10;                            .padding(24.dp)&#10;                            .size(72.dp)&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Text(&#10;                    text = userName,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Text(&#10;                    text = userEmail,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Button(&#10;                    onClick = { /* Edit profile */ }&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Edit,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.padding(end = 8.dp)&#10;                    )&#10;                    Text(&quot;Edit Profile&quot;)&#10;                }&#10;            }&#10;&#10;            Divider()&#10;&#10;            // Profile sections&#10;            ProfileSection(&#10;                title = &quot;Account Settings&quot;,&#10;                items = listOf(&#10;                    ProfileMenuItem(&quot;Notifications&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.SpaceBetween&#10;                        ) {&#10;                            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Notifications,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.padding(end = 16.dp)&#10;                                )&#10;                                Text(&quot;Push Notifications&quot;)&#10;                            }&#10;                            Switch(&#10;                                checked = notificationsEnabled,&#10;                                onCheckedChange = { notificationsEnabled = it }&#10;                            )&#10;                        }&#10;                    },&#10;                    ProfileMenuItem(&quot;Privacy Settings&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Info,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.padding(end = 16.dp)&#10;                            )&#10;                            Text(&quot;Privacy Settings&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            )&#10;&#10;            Divider()&#10;&#10;            ProfileSection(&#10;                title = &quot;Content&quot;,&#10;                items = listOf(&#10;                    ProfileMenuItem(&quot;Favorite Venues&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Favorite,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.padding(end = 16.dp)&#10;                            )&#10;                            Text(&quot;Favorite Venues&quot;)&#10;                        }&#10;                    },&#10;                    ProfileMenuItem(&quot;Following Bands&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Star,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.padding(end = 16.dp)&#10;                            )&#10;                            Text(&quot;Following Bands&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            )&#10;&#10;            Divider()&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = { /* Sign out */ },&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;Sign Out&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileSection(&#10;    title: String,&#10;    items: List&lt;ProfileMenuItem&gt;&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 16.dp)&#10;    ) {&#10;        Text(&#10;            text = title,&#10;            style = MaterialTheme.typography.titleMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        items.forEach { item -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 4.dp)&#10;            ) {&#10;                item.content()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;data class ProfileMenuItem(&#10;    val title: String,&#10;    val content: @Composable () -&gt; Unit&#10;)&#10;&#10;@Preview&#10;@Composable&#10;fun ProfileScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        ProfileScreen(&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.profile&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Info&#10;import androidx.compose.material.icons.filled.Notifications&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProfileScreen(&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    // This would be user data from a repository in a real app&#10;    val userName = &quot;John Doe&quot;&#10;    val userEmail = &quot;john.doe@example.com&quot;&#10;    var notificationsEnabled by remember { mutableStateOf(true) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Profile&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { /* Open settings */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Settings,&#10;                            contentDescription = &quot;Settings&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Profile header&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // Profile image&#10;                Surface(&#10;                    modifier = Modifier&#10;                        .size(120.dp)&#10;                        .clip(CircleShape),&#10;                    color = MaterialTheme.colorScheme.primaryContainer&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Profile picture&quot;,&#10;                        modifier = Modifier&#10;                            .padding(24.dp)&#10;                            .size(72.dp)&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Text(&#10;                    text = userName,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Text(&#10;                    text = userEmail,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Button(&#10;                    onClick = { /* Edit profile */ }&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Edit,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.padding(end = 8.dp)&#10;                    )&#10;                    Text(&quot;Edit Profile&quot;)&#10;                }&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Profile sections&#10;            ProfileSection(&#10;                title = &quot;Account Settings&quot;,&#10;                items = listOf(&#10;                    ProfileMenuItem(&quot;Notifications&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.SpaceBetween&#10;                        ) {&#10;                            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Notifications,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.padding(end = 16.dp)&#10;                                )&#10;                                Text(&quot;Push Notifications&quot;)&#10;                            }&#10;                            Switch(&#10;                                checked = notificationsEnabled,&#10;                                onCheckedChange = { notificationsEnabled = it }&#10;                            )&#10;                        }&#10;                    },&#10;                    ProfileMenuItem(&quot;Privacy Settings&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Info,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.padding(end = 16.dp)&#10;                            )&#10;                            Text(&quot;Privacy Settings&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            )&#10;&#10;            HorizontalDivider()&#10;&#10;            ProfileSection(&#10;                title = &quot;Content&quot;,&#10;                items = listOf(&#10;                    ProfileMenuItem(&quot;Favorite Venues&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Favorite,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.padding(end = 16.dp)&#10;                            )&#10;                            Text(&quot;Favorite Venues&quot;)&#10;                        }&#10;                    },&#10;                    ProfileMenuItem(&quot;Following Bands&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Star,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.padding(end = 16.dp)&#10;                            )&#10;                            Text(&quot;Following Bands&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            )&#10;&#10;            HorizontalDivider()&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = { /* Sign out */ },&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;Sign Out&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileSection(&#10;    title: String,&#10;    items: List&lt;ProfileMenuItem&gt;&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 16.dp)&#10;    ) {&#10;        Text(&#10;            text = title,&#10;            style = MaterialTheme.typography.titleMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        items.forEach { item -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 4.dp)&#10;            ) {&#10;                item.content()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;data class ProfileMenuItem(&#10;    val title: String,&#10;    val content: @Composable () -&gt; Unit&#10;)&#10;&#10;@Preview&#10;@Composable&#10;fun ProfileScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        ProfileScreen(&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/profile/ProfileViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/profile/ProfileViewModel.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.profile&#10;&#10;import androidx.lifecycle.ViewModel&#10;import com.example.pitpulseandroid.data.model.*&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;&#10;/**&#10; * ViewModel for the Profile screen.&#10; * This is used in the Profile screen to display user profile information.&#10; */&#10;class ProfileViewModel : ViewModel() {&#10;    // Mock data for user profile&#10;    private val _userProfile = MutableStateFlow(&#10;        UserProfile(&#10;            user = User(&#10;                id = &quot;u1&quot;,&#10;                username = &quot;alexjmusic&quot;,&#10;                email = &quot;alex.j@example.com&quot;,&#10;                level = 4,&#10;                reviewCount = 42,&#10;                badgeCount = 8,&#10;                badges = listOf(&#10;                    Badge(&#10;                        id = &quot;badge1&quot;,&#10;                        name = &quot;Review Pro&quot;,&#10;                        description = &quot;Posted 25+ reviews&quot;,&#10;                        imageUrl = &quot;&quot;,&#10;                        icon = 0,&#10;                        badgeType = BadgeType.REVIEW,&#10;                        threshold = 25&#10;                    ),&#10;                    Badge(&#10;                        id = &quot;badge2&quot;,&#10;                        name = &quot;Venue Explorer&quot;,&#10;                        description = &quot;Visited 10+ venues&quot;,&#10;                        imageUrl = &quot;&quot;,&#10;                        icon = 0,&#10;                        badgeType = BadgeType.VENUE_VISIT,&#10;                        threshold = 10&#10;                    )&#10;                ),&#10;                profileImageUrl = &quot;https://picsum.photos/id/1012/300/300&quot;,&#10;                bio = &quot;Music enthusiast and concert-goer. Always on the lookout for new sounds and experiences. Based in Brooklyn, NY.&quot;,&#10;                joinDate = &quot;January 2023&quot;&#10;            ),&#10;            favoriteVenues = listOf(&quot;venue1&quot;, &quot;venue2&quot;),&#10;            favoriteBands = listOf(&quot;band1&quot;, &quot;band3&quot;),&#10;            recentActivity = listOf(&#10;                UserActivity(&#10;                    id = &quot;activity1&quot;,&#10;                    type = ActivityType.REVIEW_ADDED,&#10;                    timestamp = &quot;2023-08-15&quot;,&#10;                    details = &quot;Reviewed The Sound Garden&quot;,&#10;                    relatedEntityId = &quot;venue1&quot;&#10;                ),&#10;                UserActivity(&#10;                    id = &quot;activity2&quot;,&#10;                    type = ActivityType.BADGE_EARNED,&#10;                    timestamp = &quot;2023-07-28&quot;,&#10;                    details = &quot;Earned the Review Pro badge&quot;,&#10;                    relatedEntityId = &quot;badge1&quot;&#10;                )&#10;            )&#10;        )&#10;    )&#10;&#10;    /**&#10;     * Public accessor for the user profile.&#10;     * This is observed by the Profile screen to display user information.&#10;     */&#10;    val userProfile: StateFlow&lt;UserProfile&gt; = _userProfile&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.profile&#13;&#10;&#13;&#10;import androidx.lifecycle.ViewModel&#13;&#10;import com.example.pitpulseandroid.data.model.*&#13;&#10;import kotlinx.coroutines.flow.MutableStateFlow&#13;&#10;import kotlinx.coroutines.flow.StateFlow&#13;&#10;&#13;&#10;/**&#13;&#10; * ViewModel for the Profile screen.&#13;&#10; * This is used in the Profile screen to display user profile information.&#13;&#10; */&#13;&#10;@Suppress(&quot;unused&quot;)&#13;&#10;class ProfileViewModel : ViewModel() {&#13;&#10;    // Mock data for user profile&#13;&#10;    private val _userProfile = MutableStateFlow(&#13;&#10;        UserProfile(&#13;&#10;            user = User(&#13;&#10;                id = &quot;u1&quot;,&#13;&#10;                username = &quot;alexjmusic&quot;,&#13;&#10;                email = &quot;alex.j@example.com&quot;,&#13;&#10;                level = 4,&#13;&#10;                reviewCount = 42,&#13;&#10;                badgeCount = 8,&#13;&#10;                badges = listOf(&#13;&#10;                    Badge(&#13;&#10;                        id = &quot;badge1&quot;,&#13;&#10;                        name = &quot;Review Pro&quot;,&#13;&#10;                        description = &quot;Posted 25+ reviews&quot;,&#13;&#10;                        imageUrl = &quot;&quot;,&#13;&#10;                        icon = 0,&#13;&#10;                        badgeType = BadgeType.REVIEW,&#13;&#10;                        threshold = 25&#13;&#10;                    ),&#13;&#10;                    Badge(&#13;&#10;                        id = &quot;badge2&quot;,&#13;&#10;                        name = &quot;Venue Explorer&quot;,&#13;&#10;                        description = &quot;Visited 10+ venues&quot;,&#13;&#10;                        imageUrl = &quot;&quot;,&#13;&#10;                        icon = 0,&#13;&#10;                        badgeType = BadgeType.VENUE_VISIT,&#13;&#10;                        threshold = 10&#13;&#10;                    )&#13;&#10;                ),&#13;&#10;                profileImageUrl = &quot;https://picsum.photos/id/1012/300/300&quot;,&#13;&#10;                bio = &quot;Music enthusiast and concert-goer. Always on the lookout for new sounds and experiences. Based in Brooklyn, NY.&quot;,&#13;&#10;                joinDate = &quot;January 2023&quot;&#13;&#10;            ),&#13;&#10;            favoriteVenues = listOf(&quot;venue1&quot;, &quot;venue2&quot;),&#13;&#10;            favoriteBands = listOf(&quot;band1&quot;, &quot;band3&quot;),&#13;&#10;            recentActivity = listOf(&#13;&#10;                UserActivity(&#13;&#10;                    id = &quot;activity1&quot;,&#13;&#10;                    type = ActivityType.REVIEW_ADDED,&#13;&#10;                    timestamp = &quot;2023-08-15&quot;,&#13;&#10;                    details = &quot;Reviewed The Sound Garden&quot;,&#13;&#10;                    relatedEntityId = &quot;venue1&quot;&#13;&#10;                ),&#13;&#10;                UserActivity(&#13;&#10;                    id = &quot;activity2&quot;,&#13;&#10;                    type = ActivityType.BADGE_EARNED,&#13;&#10;                    timestamp = &quot;2023-07-28&quot;,&#13;&#10;                    details = &quot;Earned the Review Pro badge&quot;,&#13;&#10;                    relatedEntityId = &quot;badge1&quot;&#13;&#10;                )&#13;&#10;            )&#13;&#10;        )&#13;&#10;    )&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Public accessor for the user profile.&#13;&#10;     * This is observed by the Profile screen to display user information.&#13;&#10;     */&#13;&#10;    @Suppress(&quot;unused&quot;)&#13;&#10;    val userProfile: StateFlow&lt;UserProfile&gt; = _userProfile&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/theme/Color.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/theme/Color.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.theme&#10;&#10;import androidx.compose.ui.graphics.Color&#10;&#10;// Primary colors&#10;val Purple200 = Color(0xFFBB86FC)&#10;val Purple500 = Color(0xFF6200EE)&#10;val Purple600 = Color(0xFF4B01D0)  // Adding the missing Purple600 color&#10;val Purple700 = Color(0xFF3700B3)&#10;val Teal200 = Color(0xFF03DAC5)&#10;&#10;// Other colors&#10;val LightGray = Color(0xFFF1F1F1)&#10;val DarkGray = Color(0xFF121212)&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.theme&#13;&#10;&#13;&#10;import androidx.compose.ui.graphics.Color&#13;&#10;&#13;&#10;// Only keeping the colors that are actually used&#13;&#10;val Purple600 = Color(0xFF4B01D0)  // Used in UserStatsCard" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/theme/Theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/theme/Theme.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.theme&#10;&#10;import android.app.Activity&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.SideEffect&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalView&#10;import androidx.core.view.WindowCompat&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Color(0xFF6200EE),&#10;    secondary = Color(0xFF03DAC5),&#10;    tertiary = Color(0xFF3700B3),&#10;    background = Color(0xFF121212),&#10;    surface = Color(0xFF121212),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.Black,&#10;    onTertiary = Color.White,&#10;    onBackground = Color.White,&#10;    onSurface = Color.White&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Color(0xFF6200EE),&#10;    secondary = Color(0xFF03DAC5),&#10;    tertiary = Color(0xFF3700B3),&#10;    background = Color.White,&#10;    surface = Color.White,&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.Black,&#10;    onTertiary = Color.White,&#10;    onBackground = Color.Black,&#10;    onSurface = Color.Black&#10;)&#10;&#10;@Composable&#10;fun PitPulseAndroidTheme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;    val view = LocalView.current&#10;    if (!view.isInEditMode) {&#10;        SideEffect {&#10;            val window = (view.context as Activity).window&#10;            window.statusBarColor = colorScheme.primary.toArgb()&#10;            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = !darkTheme&#10;        }&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.theme&#10;&#10;import android.app.Activity&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.SideEffect&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalView&#10;import androidx.core.view.WindowCompat&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Color(0xFF6200EE),&#10;    secondary = Color(0xFF03DAC5),&#10;    tertiary = Color(0xFF3700B3),&#10;    background = Color(0xFF121212),&#10;    surface = Color(0xFF121212),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.Black,&#10;    onTertiary = Color.White,&#10;    onBackground = Color.White,&#10;    onSurface = Color.White&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Color(0xFF6200EE),&#10;    secondary = Color(0xFF03DAC5),&#10;    tertiary = Color(0xFF3700B3),&#10;    background = Color.White,&#10;    surface = Color.White,&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.Black,&#10;    onTertiary = Color.White,&#10;    onBackground = Color.Black,&#10;    onSurface = Color.Black&#10;)&#10;&#10;@Composable&#10;fun PitPulseAndroidTheme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;    val view = LocalView.current&#10;    if (!view.isInEditMode) {&#10;        SideEffect {&#10;            val window = (view.context as Activity).window&#10;            @Suppress(&quot;DEPRECATION&quot;)&#10;            window.statusBarColor = colorScheme.primary.toArgb()&#10;            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = !darkTheme&#10;        }&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/theme/Type.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/theme/Type.kt" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.theme&#10;&#10;import androidx.compose.material3.Typography&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;&#10;// Set of Material typography styles to start with&#10;val Typography = Typography(&#10;    bodyLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 16.sp,&#10;        lineHeight = 24.sp,&#10;        letterSpacing = 0.5.sp&#10;    ),&#10;    titleLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 22.sp,&#10;        lineHeight = 28.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    labelSmall = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 11.sp,&#10;        lineHeight = 16.sp,&#10;        letterSpacing = 0.5.sp&#10;    )&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/venues/VenueDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/venues/VenueDetailScreen.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.venues&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Share&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Divider&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun VenueDetailScreen(&#10;    venueId: String,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    // In a real app, you would fetch the venue by ID from a repository&#10;    val venue = Venue.getSampleVenues().find { it.id == venueId } ?: Venue.getSampleVenues().first()&#10;    var isFavorite by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(venue.name) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { isFavorite = !isFavorite }) {&#10;                        Icon(&#10;                            imageVector = if (isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                            contentDescription = if (isFavorite) &quot;Remove from favorites&quot; else &quot;Add to favorites&quot;&#10;                        )&#10;                    }&#10;                    IconButton(onClick = { /* Handle share */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Share,&#10;                            contentDescription = &quot;Share&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Venue image placeholder&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Venue Image&quot;,&#10;                        style = MaterialTheme.typography.titleLarge&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Venue info&#10;            Column {&#10;                Text(&#10;                    text = venue.name,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.LocationOn,&#10;                        contentDescription = &quot;Location&quot;,&#10;                        modifier = Modifier.padding(end = 4.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;${venue.address}, ${venue.city}, ${venue.state} ${venue.zipCode}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Capacity&quot;,&#10;                        modifier = Modifier.padding(end = 4.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;Capacity: ${venue.capacity} people&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            Divider()&#10;&#10;            // Description&#10;            Column {&#10;                Text(&#10;                    text = &quot;About&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = venue.description,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            Divider()&#10;&#10;            // Amenities&#10;            Column {&#10;                Text(&#10;                    text = &quot;Amenities&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                venue.amenities.forEach { amenity -&gt;&#10;                    Text(&#10;                        text = &quot;• $amenity&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        modifier = Modifier.padding(vertical = 2.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            Divider()&#10;&#10;            // Contact info&#10;            Column {&#10;                Text(&#10;                    text = &quot;Contact&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = venue.contactInfo,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Action buttons&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Button(&#10;                    onClick = { /* Handle click */ },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;View Shows&quot;)&#10;                }&#10;&#10;                Button(&#10;                    onClick = { /* Handle click */ },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;Get Directions&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun VenueDetailScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        VenueDetailScreen(&#10;            venueId = &quot;venue1&quot;,&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.venues&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Share&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun VenueDetailScreen(&#10;    venueId: String,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    // In a real app, you would fetch the venue by ID from a repository&#10;    val venue = Venue.getSampleVenues().find { it.id == venueId } ?: Venue.getSampleVenues().first()&#10;    var isFavorite by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(venue.name) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { isFavorite = !isFavorite }) {&#10;                        Icon(&#10;                            imageVector = if (isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                            contentDescription = if (isFavorite) &quot;Remove from favorites&quot; else &quot;Add to favorites&quot;&#10;                        )&#10;                    }&#10;                    IconButton(onClick = { /* Handle share */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Share,&#10;                            contentDescription = &quot;Share&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Venue image placeholder&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Venue Image&quot;,&#10;                        style = MaterialTheme.typography.titleLarge&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Venue info&#10;            Column {&#10;                Text(&#10;                    text = venue.name,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.LocationOn,&#10;                        contentDescription = &quot;Location&quot;,&#10;                        modifier = Modifier.padding(end = 4.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;${venue.address}, ${venue.city}, ${venue.state} ${venue.zipCode}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Capacity&quot;,&#10;                        modifier = Modifier.padding(end = 4.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;Capacity: ${venue.capacity} people&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Description&#10;            Column {&#10;                Text(&#10;                    text = &quot;About&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = venue.description,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Amenities&#10;            Column {&#10;                Text(&#10;                    text = &quot;Amenities&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                venue.amenities.forEach { amenity -&gt;&#10;                    Text(&#10;                        text = &quot;• $amenity&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        modifier = Modifier.padding(vertical = 2.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Contact info&#10;            Column {&#10;                Text(&#10;                    text = &quot;Contact&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = venue.contactInfo,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Action buttons&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Button(&#10;                    onClick = { /* Handle click */ },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;View Shows&quot;)&#10;                }&#10;&#10;                Button(&#10;                    onClick = { /* Handle click */ },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;Get Directions&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun VenueDetailScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        VenueDetailScreen(&#10;            venueId = &quot;venue1&quot;,&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/venues/VenuesScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/venues/VenuesScreen.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.venues&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun VenuesScreen(&#10;    onVenueClick: (Venue) -&gt; Unit,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    val venues = Venue.getSampleVenues()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Venues&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 8.dp),&#10;                placeholder = { Text(&quot;Search venues...&quot;) },&#10;                trailingIcon = {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Search,&#10;                        contentDescription = &quot;Search&quot;&#10;                    )&#10;                },&#10;                singleLine = true&#10;            )&#10;&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxSize(),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp),&#10;                contentPadding = PaddingValues(vertical = 8.dp)&#10;            ) {&#10;                items(venues.filter {&#10;                    searchQuery.isEmpty() ||&#10;                    it.name.contains(searchQuery, ignoreCase = true) ||&#10;                    it.city.contains(searchQuery, ignoreCase = true)&#10;                }) { venue -&gt;&#10;                    VenueListItem(&#10;                        venue = venue,&#10;                        onClick = { onVenueClick(venue) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun VenueListItem(&#10;    venue: Venue,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Placeholder for venue image&#10;            Card(&#10;                modifier = Modifier.size(80.dp)&#10;            ) {&#10;                // This would be an AsyncImage in a real app&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = venue.name.take(1),&#10;                        style = MaterialTheme.typography.headlineMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = venue.name,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = &quot;${venue.city}, ${venue.state}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = venue.description,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun VenuesScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        VenuesScreen(&#10;            onVenueClick = {},&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.venues&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun VenuesScreen(&#10;    onVenueClick: (Venue) -&gt; Unit,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    val venues = Venue.getSampleVenues()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Venues&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 8.dp),&#10;                placeholder = { Text(&quot;Search venues...&quot;) },&#10;                trailingIcon = {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Search,&#10;                        contentDescription = &quot;Search&quot;&#10;                    )&#10;                },&#10;                singleLine = true&#10;            )&#10;&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxSize(),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp),&#10;                contentPadding = PaddingValues(vertical = 8.dp)&#10;            ) {&#10;                items(venues.filter {&#10;                    searchQuery.isEmpty() ||&#10;                    it.name.contains(searchQuery, ignoreCase = true) ||&#10;                    it.city.contains(searchQuery, ignoreCase = true)&#10;                }) { venue -&gt;&#10;                    VenueListItem(&#10;                        venue = venue,&#10;                        onClick = { onVenueClick(venue) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun VenueListItem(&#10;    venue: Venue,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Placeholder for venue image&#10;            Card(&#10;                modifier = Modifier.size(80.dp)&#10;            ) {&#10;                // This would be an AsyncImage in a real app&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = venue.name.take(1),&#10;                        style = MaterialTheme.typography.headlineMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = venue.name,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = &quot;${venue.city}, ${venue.state}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = venue.description,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun VenuesScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        VenuesScreen(&#10;            onVenueClick = {},&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/util/NavigationUtils.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/util/NavigationUtils.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.util&#10;&#10;import androidx.navigation.NavController&#10;import androidx.navigation.NavGraph.Companion.findStartDestination&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Utility functions for navigation.&#10; */&#10;object NavigationUtils {&#10;    private var lastNavigationTime = 0L&#10;    private var navigationJob: Job? = null&#10;    private const val NAVIGATION_DEBOUNCE_TIME = 300L&#10;&#10;    /**&#10;     * Navigate to a destination with single top behavior and debouncing to prevent rapid navigation.&#10;     * &#10;     * @param route The route to navigate to&#10;     * @param popUpToRoute The route to pop up to, default is null&#10;     * @param inclusive Whether to include the route in pop up to, default is false&#10;     */&#10;    fun NavController.navigateSingleTop(route: String, popUpToRoute: String? = null, inclusive: Boolean = false) {&#10;        val currentTime = System.currentTimeMillis()&#10;&#10;        // Prevent rapid multiple navigations&#10;        if (currentTime - lastNavigationTime &lt; NAVIGATION_DEBOUNCE_TIME) {&#10;            return&#10;        }&#10;&#10;        lastNavigationTime = currentTime&#10;&#10;        // Cancel any pending navigation&#10;        navigationJob?.cancel()&#10;&#10;        // Start a new navigation job&#10;        navigationJob = CoroutineScope(Dispatchers.Main).launch {&#10;            delay(50) // Small delay to ensure UI stability&#10;            navigate(route) {&#10;                if (popUpToRoute != null) {&#10;                    popUpTo(popUpToRoute) { this.inclusive = inclusive }&#10;                } else {&#10;                    // Pop up to start destination by default for main tab navigation&#10;                    popUpTo(graph.findStartDestination().id) { this.inclusive = false }&#10;                }&#10;                launchSingleTop = true&#10;                restoreState = true&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Safely retrieve a string argument from navigation back stack entry.&#10;     * &#10;     * @param key The argument key&#10;     * @param defaultValue The default value if argument is null&#10;     * @return The argument value or default value&#10;     */&#10;    fun NavController.getStringArgument(key: String, defaultValue: String = &quot;&quot;): String {&#10;        return currentBackStackEntry?.arguments?.getString(key) ?: defaultValue&#10;    }&#10;&#10;    /**&#10;     * Check if current route is equal to given route.&#10;     * &#10;     * @param route The route to check&#10;     * @return True if current destination route equals given route&#10;     */&#10;    fun NavController.isCurrentRoute(route: String): Boolean {&#10;        return currentDestination?.route == route&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.util&#10;&#10;import androidx.navigation.NavController&#10;import androidx.navigation.NavGraph.Companion.findStartDestination&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Utility functions for navigation.&#10; */&#10;object NavigationUtils {&#10;    private var lastNavigationTime = 0L&#10;    private var navigationJob: Job? = null&#10;    private const val NAVIGATION_DEBOUNCE_TIME = 300L&#10;&#10;    /**&#10;     * Navigate to a destination with single top behavior and debouncing to prevent rapid navigation.&#10;     * &#10;     * @param route The route to navigate to&#10;     * @param popUpToRoute The route to pop up to, default is null&#10;     * @param inclusive Whether to include the route in pop up to, default is false&#10;     */&#10;    fun NavController.navigateSingleTop(route: String, popUpToRoute: String? = null, inclusive: Boolean = false) {&#10;        val currentTime = System.currentTimeMillis()&#10;&#10;        // Prevent rapid multiple navigations&#10;        if (currentTime - lastNavigationTime &lt; NAVIGATION_DEBOUNCE_TIME) {&#10;            return&#10;        }&#10;&#10;        lastNavigationTime = currentTime&#10;&#10;        // Cancel any pending navigation&#10;        navigationJob?.cancel()&#10;&#10;        // Start a new navigation job&#10;        navigationJob = CoroutineScope(Dispatchers.Main).launch {&#10;            delay(50) // Small delay to ensure UI stability&#10;            navigate(route) {&#10;                if (popUpToRoute != null) {&#10;                    popUpTo(popUpToRoute) { this.inclusive = inclusive }&#10;                } else {&#10;                    // Pop up to start destination by default for main tab navigation&#10;                    popUpTo(graph.findStartDestination().id) { this.inclusive = false }&#10;                }&#10;                launchSingleTop = true&#10;                restoreState = true&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Safely retrieve a string argument from navigation back stack entry.&#10;     * &#10;     * @param key The argument key&#10;     * @param defaultValue The default value if argument is null&#10;     * @return The argument value or default value&#10;     */&#10;    fun NavController.getStringArgument(key: String, defaultValue: String = &quot;&quot;): String {&#10;        return currentBackStackEntry?.arguments?.getString(key) ?: defaultValue&#10;    }&#10;&#10;    /**&#10;     * Check if current route is equal to given route.&#10;     * &#10;     * @param route The route to check&#10;     * @return True if current destination route equals given route&#10;     */&#10;    @Suppress(&quot;unused&quot;) // Will be used in future for route-based UI updates&#10;    fun NavController.isCurrentRoute(route: String): Boolean {&#10;        return currentDestination?.route == route&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.pitpulseandroid&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.pitpulseandroid&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;    // Accompanist for SystemUiController&#10;    implementation(libs.accompanist.systemuicontroller)&#10;&#10;    // Navigation Compose&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // Material Icons Extended&#10;    implementation(libs.androidx.compose.material.icons.extended)&#10;&#10;    // ViewModel Compose&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;&#10;    // Coil for image loading&#10;    implementation(libs.coil.compose)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.pitpulseandroid&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.pitpulseandroid&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlin {&#10;        compilerOptions {&#10;            jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_11)&#10;        }&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;    // Accompanist for SystemUiController&#10;    implementation(libs.accompanist.systemuicontroller)&#10;&#10;    // Navigation Compose&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // Material Icons Extended&#10;    implementation(libs.androidx.compose.material.icons.extended)&#10;&#10;    // ViewModel Compose&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;&#10;    // Coil for image loading&#10;    implementation(libs.coil.compose)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/MainActivity.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.pitpulseandroid.ui.bands.BandsScreen&#10;import com.example.pitpulseandroid.ui.bands.BandDetailScreen&#10;import com.example.pitpulseandroid.ui.home.HomeScreen&#10;import com.example.pitpulseandroid.ui.profile.ProfileScreen&#10;import com.example.pitpulseandroid.ui.splash.SplashScreen&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;import com.example.pitpulseandroid.ui.venues.VenuesScreen&#10;import com.example.pitpulseandroid.ui.venues.VenueDetailScreen&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.Place&#10;import androidx.compose.material.icons.filled.MusicNote&#10;import androidx.compose.material.icons.filled.Person&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            PitPulseAndroidTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    PitPulseApp()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PitPulseApp() {&#10;    // State to track whether to show splash screen or main app&#10;    var showSplashScreen by remember { mutableStateOf(true) }&#10;    val navController = rememberNavController()&#10;&#10;    if (showSplashScreen) {&#10;        // Show splash screen&#10;        SplashScreen(&#10;            onTimeout = { showSplashScreen = false }&#10;        )&#10;    } else {&#10;        // Main app content with navigation&#10;        Scaffold(&#10;            bottomBar = {&#10;                NavigationBar {&#10;                    // Home&#10;                    NavigationBarItem(&#10;                        icon = { Icon(Icons.Filled.Home, contentDescription = &quot;Home&quot;) },&#10;                        label = { Text(&quot;Home&quot;) },&#10;                        selected = navController.currentDestination?.route == &quot;home&quot;,&#10;                        onClick = { &#10;                            if (navController.currentDestination?.route != &quot;home&quot;) {&#10;                                navController.navigate(&quot;home&quot;) {&#10;                                    popUpTo(&quot;home&quot;) { inclusive = false }&#10;                                    launchSingleTop = true&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;                    // Venues&#10;                    NavigationBarItem(&#10;                        icon = { Icon(Icons.Filled.Place, contentDescription = &quot;Venues&quot;) },&#10;                        label = { Text(&quot;Venues&quot;) },&#10;                        selected = navController.currentDestination?.route == &quot;venues&quot;,&#10;                        onClick = { &#10;                            if (navController.currentDestination?.route != &quot;venues&quot;) {&#10;                                navController.navigate(&quot;venues&quot;) {&#10;                                    launchSingleTop = true&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;                    // Bands&#10;                    NavigationBarItem(&#10;                        icon = { Icon(Icons.Filled.MusicNote, contentDescription = &quot;Bands&quot;) },&#10;                        label = { Text(&quot;Bands&quot;) },&#10;                        selected = navController.currentDestination?.route == &quot;bands&quot;,&#10;                        onClick = { &#10;                            if (navController.currentDestination?.route != &quot;bands&quot;) {&#10;                                navController.navigate(&quot;bands&quot;) {&#10;                                    launchSingleTop = true&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;                    // Profile&#10;                    NavigationBarItem(&#10;                        icon = { Icon(Icons.Filled.Person, contentDescription = &quot;Profile&quot;) },&#10;                        label = { Text(&quot;Profile&quot;) },&#10;                        selected = navController.currentDestination?.route == &quot;profile&quot;,&#10;                        onClick = { &#10;                            if (navController.currentDestination?.route != &quot;profile&quot;) {&#10;                                navController.navigate(&quot;profile&quot;) {&#10;                                    launchSingleTop = true&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        ) { innerPadding -&gt;&#10;            NavHost(&#10;                navController = navController,&#10;                startDestination = &quot;home&quot;,&#10;                modifier = Modifier.padding(innerPadding)&#10;            ) {&#10;                composable(&quot;home&quot;) {&#10;                    HomeScreen(&#10;                        onVenueClick = { venue: Venue -&gt; navController.navigate(&quot;venue/${venue.id}&quot;) },&#10;                        onBandClick = { band: Band -&gt; navController.navigate(&quot;band/${band.id}&quot;) },&#10;                        onUserClick = { navController.navigate(&quot;profile&quot;) },&#10;                        onNotificationClick = { /* Open notifications */ }&#10;                    )&#10;                }&#10;                composable(&quot;venues&quot;) {&#10;                    VenuesScreen(&#10;                        onVenueClick = { venue -&gt; navController.navigate(&quot;venue/${venue.id}&quot;) },&#10;                        onBackClick = { navController.popBackStack() }&#10;                    )&#10;                }&#10;                composable(&quot;venue/{venueId}&quot;) { backStackEntry -&gt;&#10;                    val venueId = backStackEntry.arguments?.getString(&quot;venueId&quot;)&#10;                    VenueDetailScreen(&#10;                        venueId = venueId ?: &quot;&quot;,&#10;                        onBackClick = { navController.popBackStack() }&#10;                    )&#10;                }&#10;                composable(&quot;bands&quot;) {&#10;                    BandsScreen(&#10;                        onBandClick = { band -&gt; navController.navigate(&quot;band/${band.id}&quot;) },&#10;                        onBackClick = { navController.popBackStack() }&#10;                    )&#10;                }&#10;                composable(&quot;band/{bandId}&quot;) { backStackEntry -&gt;&#10;                    val bandId = backStackEntry.arguments?.getString(&quot;bandId&quot;)&#10;                    BandDetailScreen(&#10;                        bandId = bandId ?: &quot;&quot;,&#10;                        onBackClick = { navController.popBackStack() }&#10;                    )&#10;                }&#10;                composable(&quot;profile&quot;) {&#10;                    ProfileScreen(&#10;                        onBackClick = { navController.popBackStack() }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PitPulseAppPreview() {&#10;    PitPulseAndroidTheme {&#10;        PitPulseApp()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.ui.bands.BandsScreen&#10;import com.example.pitpulseandroid.ui.bands.BandDetailScreen&#10;import com.example.pitpulseandroid.ui.home.HomeScreen&#10;import com.example.pitpulseandroid.ui.profile.ProfileScreen&#10;import com.example.pitpulseandroid.ui.splash.SplashScreen&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;import com.example.pitpulseandroid.ui.venues.VenuesScreen&#10;import com.example.pitpulseandroid.ui.venues.VenueDetailScreen&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.Place&#10;import androidx.compose.material.icons.filled.MusicNote&#10;import androidx.compose.material.icons.filled.Person&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            PitPulseAndroidTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    PitPulseApp()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PitPulseApp() {&#10;    // State to track whether to show splash screen or main app&#10;    var showSplashScreen by remember { mutableStateOf(true) }&#10;    val navController = rememberNavController()&#10;&#10;    if (showSplashScreen) {&#10;        // Show splash screen&#10;        SplashScreen(&#10;            onTimeout = { showSplashScreen = false }&#10;        )&#10;    } else {&#10;        // Main app content with navigation&#10;        Scaffold(&#10;            bottomBar = {&#10;                NavigationBar {&#10;                    // Home&#10;                    NavigationBarItem(&#10;                        icon = { Icon(Icons.Filled.Home, contentDescription = &quot;Home&quot;) },&#10;                        label = { Text(&quot;Home&quot;) },&#10;                        selected = navController.currentDestination?.route == &quot;home&quot;,&#10;                        onClick = { &#10;                            if (navController.currentDestination?.route != &quot;home&quot;) {&#10;                                navController.navigate(&quot;home&quot;) {&#10;                                    popUpTo(&quot;home&quot;) { inclusive = false }&#10;                                    launchSingleTop = true&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;                    // Venues&#10;                    NavigationBarItem(&#10;                        icon = { Icon(Icons.Filled.Place, contentDescription = &quot;Venues&quot;) },&#10;                        label = { Text(&quot;Venues&quot;) },&#10;                        selected = navController.currentDestination?.route == &quot;venues&quot;,&#10;                        onClick = { &#10;                            if (navController.currentDestination?.route != &quot;venues&quot;) {&#10;                                navController.navigate(&quot;venues&quot;) {&#10;                                    launchSingleTop = true&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;                    // Bands&#10;                    NavigationBarItem(&#10;                        icon = { Icon(Icons.Filled.MusicNote, contentDescription = &quot;Bands&quot;) },&#10;                        label = { Text(&quot;Bands&quot;) },&#10;                        selected = navController.currentDestination?.route == &quot;bands&quot;,&#10;                        onClick = { &#10;                            if (navController.currentDestination?.route != &quot;bands&quot;) {&#10;                                navController.navigate(&quot;bands&quot;) {&#10;                                    launchSingleTop = true&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;                    // Profile&#10;                    NavigationBarItem(&#10;                        icon = { Icon(Icons.Filled.Person, contentDescription = &quot;Profile&quot;) },&#10;                        label = { Text(&quot;Profile&quot;) },&#10;                        selected = navController.currentDestination?.route == &quot;profile&quot;,&#10;                        onClick = { &#10;                            if (navController.currentDestination?.route != &quot;profile&quot;) {&#10;                                navController.navigate(&quot;profile&quot;) {&#10;                                    launchSingleTop = true&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        ) { innerPadding -&gt;&#10;            NavHost(&#10;                navController = navController,&#10;                startDestination = &quot;home&quot;,&#10;                modifier = Modifier.padding(innerPadding)&#10;            ) {&#10;                composable(&quot;home&quot;) {&#10;                    HomeScreen(&#10;                        onVenueClick = { venue: Venue -&gt; navController.navigate(&quot;venue/${venue.id}&quot;) },&#10;                        onBandClick = { band: Band -&gt; navController.navigate(&quot;band/${band.id}&quot;) },&#10;                        onUserClick = { navController.navigate(&quot;profile&quot;) },&#10;                        onNotificationClick = { /* Open notifications */ }&#10;                    )&#10;                }&#10;                composable(&quot;venues&quot;) {&#10;                    VenuesScreen(&#10;                        onVenueClick = { venue -&gt; navController.navigate(&quot;venue/${venue.id}&quot;) },&#10;                        onBackClick = { navController.popBackStack() }&#10;                    )&#10;                }&#10;                composable(&quot;venue/{venueId}&quot;) { backStackEntry -&gt;&#10;                    val venueId = backStackEntry.arguments?.getString(&quot;venueId&quot;)&#10;                    VenueDetailScreen(&#10;                        venueId = venueId ?: &quot;&quot;,&#10;                        onBackClick = { navController.popBackStack() }&#10;                    )&#10;                }&#10;                composable(&quot;bands&quot;) {&#10;                    BandsScreen(&#10;                        onBandClick = { band -&gt; navController.navigate(&quot;band/${band.id}&quot;) },&#10;                        onBackClick = { navController.popBackStack() }&#10;                    )&#10;                }&#10;                composable(&quot;band/{bandId}&quot;) { backStackEntry -&gt;&#10;                    val bandId = backStackEntry.arguments?.getString(&quot;bandId&quot;)&#10;                    BandDetailScreen(&#10;                        bandId = bandId ?: &quot;&quot;,&#10;                        onBackClick = { navController.popBackStack() }&#10;                    )&#10;                }&#10;                composable(&quot;profile&quot;) {&#10;                    ProfileScreen(&#10;                        onBackClick = { navController.popBackStack() }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PitPulseAppPreview() {&#10;    PitPulseAndroidTheme {&#10;        PitPulseApp()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeScreen.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.home&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Menu&#10;import androidx.compose.material.icons.filled.Notifications&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.ui.components.BandCard&#10;import com.example.pitpulseandroid.ui.components.SearchBarComponent&#10;import com.example.pitpulseandroid.ui.components.UserStatsCard&#10;import com.example.pitpulseandroid.ui.components.VenueCard&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;import com.example.pitpulseandroid.ui.theme.Purple600&#10;&#10;/**&#10; * Home screen of the app.&#10; * &#10; * @param onVenueClick Callback when a venue is clicked&#10; * @param onBandClick Callback when a band is clicked&#10; * @param onUserClick Callback when the user stats card is clicked&#10; * @param onNotificationClick Callback when the notification button is clicked&#10; * @param viewModel ViewModel for the Home screen&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HomeScreen(&#10;    onVenueClick: (Venue) -&gt; Unit = {},&#10;    onBandClick: (Band) -&gt; Unit = {},&#10;    onUserClick: (String) -&gt; Unit = {},&#10;    onNotificationClick: () -&gt; Unit = {},&#10;    viewModel: HomeViewModel = remember { HomeViewModel(com.example.pitpulseandroid.data.Repository.getInstance()) }&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Menu,&#10;                            contentDescription = &quot;Menu&quot;,&#10;                            tint = Purple600&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        // Use text for now, as we're having issues with the logo resource&#10;                        Text(&#10;                            text = &quot;PitPulse&quot;,&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Purple600 // Use the brand color to make it stand out&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = onNotificationClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Notifications,&#10;                            contentDescription = &quot;Notifications&quot;&#10;                        )&#10;                    }&#10;                },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.background,&#10;                    titleContentColor = MaterialTheme.colorScheme.onBackground&#10;                )&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        HomeContent(&#10;            uiState = uiState,&#10;            onVenueClick = onVenueClick,&#10;            onBandClick = onBandClick,&#10;            onUserClick = { onUserClick(it.username) },&#10;            onSearch = { query -&gt;&#10;                searchQuery = query&#10;                viewModel.search(query)&#10;            },&#10;            searchQuery = searchQuery,&#10;            contentPadding = paddingValues&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun HomeContent(&#10;    uiState: HomeUiState,&#10;    onVenueClick: (Venue) -&gt; Unit,&#10;    onBandClick: (Band) -&gt; Unit,&#10;    onUserClick: (com.example.pitpulseandroid.data.model.User) -&gt; Unit,&#10;    onSearch: (String) -&gt; Unit,&#10;    searchQuery: String,&#10;    contentPadding: PaddingValues&#10;) {&#10;    if (uiState.isLoading) {&#10;        Box(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            CircularProgressIndicator(color = Purple600)&#10;        }&#10;        return&#10;    }&#10;&#10;    LazyColumn(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(contentPadding),&#10;        contentPadding = PaddingValues(16.dp)&#10;    ) {&#10;        // Search bar&#10;        item {&#10;            SearchBarComponent(&#10;                onSearch = onSearch,&#10;                initialValue = searchQuery&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;&#10;        // User stats&#10;        item {&#10;            uiState.user?.let { user -&gt;&#10;                UserStatsCard(&#10;                    user = user,&#10;                    onClick = { onUserClick(user) }&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;            }&#10;        }&#10;&#10;        // Nearby venues section&#10;        item {&#10;            SectionHeader(&#10;                title = &quot;Nearby Venues&quot;,&#10;                onViewAllClick = { /* Navigate to venues list */ &#10;                    // This would typically navigate to a venues list screen&#10;                    // For now, we'll just log that it was clicked&#10;                    println(&quot;View All Venues clicked&quot;)&#10;                }&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;        }&#10;&#10;        // Venue cards&#10;        items(uiState.venues.take(2)) { venue -&gt;&#10;            VenueCard(&#10;                venue = venue,&#10;                onClick = onVenueClick,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;        }&#10;&#10;        // Top rated bands section&#10;        item {&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            SectionHeader(&#10;                title = &quot;Top Rated Bands&quot;,&#10;                onViewAllClick = { /* Navigate to bands list */ &#10;                    // This would typically navigate to a bands list screen&#10;                    // For now, we'll just log that it was clicked&#10;                    println(&quot;View All Bands clicked&quot;)&#10;                }&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;        }&#10;&#10;        // Band cards&#10;        items(uiState.bands.take(2)) { band -&gt;&#10;            BandCard(&#10;                band = band,&#10;                onClick = onBandClick,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SectionHeader(&#10;    modifier: Modifier = Modifier,&#10;    title: String,&#10;    onViewAllClick: () -&gt; Unit = {}&#10;) {&#10;    Row(&#10;        modifier = modifier.fillMaxWidth(),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Text(&#10;            text = title,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;        Text(&#10;            text = &quot;View All&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = Purple600,&#10;            modifier = Modifier.clickable(onClick = onViewAllClick)&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun HomeScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        HomeScreen()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.home&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Menu&#10;import androidx.compose.material.icons.filled.Notifications&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.ui.components.BandCard&#10;import com.example.pitpulseandroid.ui.components.SearchBarComponent&#10;import com.example.pitpulseandroid.ui.components.UserStatsCard&#10;import com.example.pitpulseandroid.ui.components.VenueCard&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;import com.example.pitpulseandroid.ui.theme.Purple600&#10;&#10;/**&#10; * Home screen of the app.&#10; * &#10; * @param onVenueClick Callback when a venue is clicked&#10; * @param onBandClick Callback when a band is clicked&#10; * @param onUserClick Callback when the user stats card is clicked&#10; * @param onNotificationClick Callback when the notification button is clicked&#10; * @param viewModel ViewModel for the Home screen&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HomeScreen(&#10;    onVenueClick: (Venue) -&gt; Unit = {},&#10;    onBandClick: (Band) -&gt; Unit = {},&#10;    onUserClick: (String) -&gt; Unit = {},&#10;    onNotificationClick: () -&gt; Unit = {},&#10;    viewModel: HomeViewModel = remember { HomeViewModel(com.example.pitpulseandroid.data.Repository.getInstance()) }&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Menu,&#10;                            contentDescription = &quot;Menu&quot;,&#10;                            tint = Purple600&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        // Use text for now, as we're having issues with the logo resource&#10;                        Text(&#10;                            text = &quot;PitPulse&quot;,&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Purple600 // Use the brand color to make it stand out&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = onNotificationClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Notifications,&#10;                            contentDescription = &quot;Notifications&quot;&#10;                        )&#10;                    }&#10;                },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.background,&#10;                    titleContentColor = MaterialTheme.colorScheme.onBackground&#10;                )&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        HomeContent(&#10;            uiState = uiState,&#10;            onVenueClick = onVenueClick,&#10;            onBandClick = onBandClick,&#10;            onUserClick = { onUserClick(it.username) },&#10;            onSearch = { query -&gt;&#10;                searchQuery = query&#10;                viewModel.search(query)&#10;            },&#10;            searchQuery = searchQuery,&#10;            contentPadding = paddingValues&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun HomeContent(&#10;    uiState: HomeUiState,&#10;    onVenueClick: (Venue) -&gt; Unit,&#10;    onBandClick: (Band) -&gt; Unit,&#10;    onUserClick: (com.example.pitpulseandroid.data.model.User) -&gt; Unit,&#10;    onSearch: (String) -&gt; Unit,&#10;    searchQuery: String,&#10;    contentPadding: PaddingValues&#10;) {&#10;    if (uiState.isLoading) {&#10;        Box(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            CircularProgressIndicator(color = Purple600)&#10;        }&#10;        return&#10;    }&#10;&#10;    LazyColumn(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(contentPadding),&#10;        contentPadding = PaddingValues(16.dp)&#10;    ) {&#10;        // Search bar&#10;        item {&#10;            SearchBarComponent(&#10;                onSearch = onSearch,&#10;                initialValue = searchQuery&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;&#10;        // User stats&#10;        item {&#10;            uiState.user?.let { user -&gt;&#10;                UserStatsCard(&#10;                    user = user,&#10;                    onClick = { onUserClick(user) }&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;            }&#10;        }&#10;&#10;        // Nearby venues section&#10;        item {&#10;            SectionHeader(&#10;                title = &quot;Nearby Venues&quot;,&#10;                onViewAllClick = { /* Navigate to venues list */ &#10;                    // This would typically navigate to a venues list screen&#10;                    // For now, we'll just log that it was clicked&#10;                    println(&quot;View All Venues clicked&quot;)&#10;                }&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;        }&#10;&#10;        // Venue cards&#10;        items(uiState.venues.take(2)) { venue -&gt;&#10;            VenueCard(&#10;                venue = venue,&#10;                onClick = onVenueClick,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;        }&#10;&#10;        // Top rated bands section&#10;        item {&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            SectionHeader(&#10;                title = &quot;Top Rated Bands&quot;,&#10;                onViewAllClick = { /* Navigate to bands list */ &#10;                    // This would typically navigate to a bands list screen&#10;                    // For now, we'll just log that it was clicked&#10;                    println(&quot;View All Bands clicked&quot;)&#10;                }&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;        }&#10;&#10;        // Band cards&#10;        items(uiState.bands.take(2)) { band -&gt;&#10;            BandCard(&#10;                band = band,&#10;                onClick = onBandClick,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SectionHeader(&#10;    modifier: Modifier = Modifier,&#10;    title: String,&#10;    onViewAllClick: () -&gt; Unit = {}&#10;) {&#10;    Row(&#10;        modifier = modifier.fillMaxWidth(),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Text(&#10;            text = title,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;        Text(&#10;            text = &quot;View All&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = Purple600,&#10;            modifier = Modifier.clickable(onClick = onViewAllClick)&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun HomeScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        HomeScreen()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/theme/Theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/theme/Theme.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.theme&#10;&#10;import android.app.Activity&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.SideEffect&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalView&#10;import androidx.core.view.WindowCompat&#10;&#10;// Dark theme color scheme based on the web app's dark mode&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Purple600,&#10;    onPrimary = Color.White,&#10;    primaryContainer = Purple700,&#10;    onPrimaryContainer = Color.White,&#10;    secondary = DarkSecondary,&#10;    onSecondary = DarkSecondaryForeground,&#10;    tertiary = Purple500,&#10;    background = DarkBackground,&#10;    onBackground = DarkForeground,&#10;    surface = DarkCard,&#10;    onSurface = DarkCardForeground,&#10;    surfaceVariant = DarkAccent,&#10;    onSurfaceVariant = DarkAccentForeground,&#10;    outline = DarkBorder,&#10;    outlineVariant = DarkMuted&#10;)&#10;&#10;// Light theme color scheme based on the web app's light mode&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Purple600,&#10;    onPrimary = Color.White,&#10;    primaryContainer = Purple500,&#10;    onPrimaryContainer = Color.White,&#10;    secondary = LightSecondary,&#10;    onSecondary = LightSecondaryForeground,&#10;    tertiary = Purple700,&#10;    background = LightBackground,&#10;    onBackground = LightForeground,&#10;    surface = LightCard,&#10;    onSurface = LightCardForeground,&#10;    surfaceVariant = LightAccent,&#10;    onSurfaceVariant = LightAccentForeground,&#10;    outline = LightBorder,&#10;    outlineVariant = LightMuted&#10;)&#10;&#10;@Composable&#10;fun PitPulseAndroidTheme(&#10;    darkTheme: Boolean = true, // Always use dark theme by default&#10;    dynamicColor: Boolean = false,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;&#10;    val view = LocalView.current&#10;    if (!view.isInEditMode) {&#10;        SideEffect {&#10;            val window = (view.context as Activity).window&#10;            // Use WindowInsetsController instead of deprecated statusBarColor&#10;            WindowCompat.setDecorFitsSystemWindows(window, false)&#10;            WindowCompat.getInsetsController(window, view).apply {&#10;                isAppearanceLightStatusBars = !darkTheme&#10;            }&#10;            // Still set the color for backward compatibility, but use the modern API&#10;            window.statusBarColor = if (darkTheme) DarkBackground.toArgb() else LightBackground.toArgb()&#10;        }&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.theme&#10;&#10;import android.app.Activity&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.SideEffect&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalView&#10;import androidx.core.view.WindowCompat&#10;import androidx.core.view.WindowInsetsControllerCompat&#10;&#10;// Dark theme color scheme based on the web app's dark mode&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Purple600,&#10;    onPrimary = Color.White,&#10;    primaryContainer = Purple700,&#10;    onPrimaryContainer = Color.White,&#10;    secondary = DarkSecondary,&#10;    onSecondary = DarkSecondaryForeground,&#10;    tertiary = Purple500,&#10;    background = DarkBackground,&#10;    onBackground = DarkForeground,&#10;    surface = DarkCard,&#10;    onSurface = DarkCardForeground,&#10;    surfaceVariant = DarkAccent,&#10;    onSurfaceVariant = DarkAccentForeground,&#10;    outline = DarkBorder,&#10;    outlineVariant = DarkMuted&#10;)&#10;&#10;// Light theme color scheme based on the web app's light mode&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Purple600,&#10;    onPrimary = Color.White,&#10;    primaryContainer = Purple500,&#10;    onPrimaryContainer = Color.White,&#10;    secondary = LightSecondary,&#10;    onSecondary = LightSecondaryForeground,&#10;    tertiary = Purple700,&#10;    background = LightBackground,&#10;    onBackground = LightForeground,&#10;    surface = LightCard,&#10;    onSurface = LightCardForeground,&#10;    surfaceVariant = LightAccent,&#10;    onSurfaceVariant = LightAccentForeground,&#10;    outline = LightBorder,&#10;    outlineVariant = LightMuted&#10;)&#10;&#10;@Composable&#10;fun PitPulseAndroidTheme(&#10;    darkTheme: Boolean = true, // Always use dark theme by default&#10;    dynamicColor: Boolean = false,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;&#10;    val view = LocalView.current&#10;    if (!view.isInEditMode) {&#10;        SideEffect {&#10;            val window = (view.context as Activity).window&#10;&#10;            // Set up the modern approach for window insets&#10;            WindowCompat.setDecorFitsSystemWindows(window, false)&#10;&#10;            // Use WindowInsetsControllerCompat for status bar appearance&#10;            WindowInsetsControllerCompat(window, view).apply {&#10;                isAppearanceLightStatusBars = !darkTheme&#10;            }&#10;&#10;            // Setting the status bar color to transparent or a color that matches your design&#10;            // This is the modern approach - setting the color to transparent and letting&#10;            // the content draw under the status bar for a seamless look&#10;            window.statusBarColor = Color.Transparent.toArgb()&#10;        }&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
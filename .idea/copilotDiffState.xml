<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.pitpulseandroid&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.pitpulseandroid&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;    // Accompanist for SystemUiController&#10;    implementation(libs.accompanist.systemuicontroller)&#10;&#10;    // Navigation Compose&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // Material Icons Extended&#10;    implementation(libs.androidx.compose.material.icons.extended)&#10;&#10;    // ViewModel Compose&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;&#10;    // Coil for image loading&#10;    implementation(libs.coil.compose)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.pitpulseandroid&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.pitpulseandroid&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlin {&#10;        compilerOptions {&#10;            jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_11)&#10;        }&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;    // Accompanist for SystemUiController&#10;    implementation(libs.accompanist.systemuicontroller)&#10;&#10;    // Navigation Compose&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // Material Icons Extended&#10;    implementation(libs.androidx.compose.material.icons.extended)&#10;&#10;    // ViewModel Compose&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;&#10;    // Coil for image loading&#10;    implementation(libs.coil.compose)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/MainActivity.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.MusicNote&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Place&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.navigation.navArgument&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.navigation.Screen&#10;import com.example.pitpulseandroid.ui.bands.BandDetailScreen&#10;import com.example.pitpulseandroid.ui.bands.BandsScreen&#10;import com.example.pitpulseandroid.ui.home.HomeScreen&#10;import com.example.pitpulseandroid.ui.profile.ProfileScreen&#10;import com.example.pitpulseandroid.ui.splash.SplashScreen&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;import com.example.pitpulseandroid.ui.venues.VenueDetailScreen&#10;import com.example.pitpulseandroid.ui.venues.VenuesScreen&#10;import com.example.pitpulseandroid.util.NavigationUtils.getStringArgument&#10;import com.example.pitpulseandroid.util.NavigationUtils.navigateSingleTop&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            PitPulseAndroidTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    PitPulseApp()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PitPulseApp() {&#10;    // State to track whether to show splash screen or main app - use rememberSaveable to preserve state&#10;    var showSplashScreen by rememberSaveable { mutableStateOf(true) }&#10;    val navController = rememberNavController()&#10;&#10;    // Clean up any resources when the composable is disposed&#10;    DisposableEffect(Unit) {&#10;        onDispose {}&#10;    }&#10;&#10;    if (showSplashScreen) {&#10;        // Show splash screen&#10;        SplashScreen(&#10;            onTimeout = { showSplashScreen = false }&#10;        )&#10;    } else {&#10;        // Main app content with navigation&#10;        MainContent(navController)&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MainContent(navController: NavHostController) {&#10;    // Observe current back stack entry for navigation state&#10;    val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;    val currentRoute = navBackStackEntry?.destination?.route&#10;&#10;    // Define tabs&#10;    val tabs = listOf(&#10;        TabItem(Screen.Home, Icons.Filled.Home, &quot;Home&quot;),&#10;        TabItem(Screen.Venues, Icons.Filled.Place, &quot;Venues&quot;),&#10;        TabItem(Screen.Bands, Icons.Filled.MusicNote, &quot;Bands&quot;),&#10;        TabItem(Screen.Profile, Icons.Filled.Person, &quot;Profile&quot;)&#10;    )&#10;&#10;    Scaffold(&#10;        bottomBar = {&#10;            NavigationBar {&#10;                tabs.forEach { tab -&gt;&#10;                    val selected = currentRoute == tab.screen.route ||&#10;                            (currentRoute?.startsWith(tab.screen.route) == true &amp;&amp; &#10;                             tab.screen.route != Screen.Home.route)&#10;&#10;                    NavigationBarItem(&#10;                        icon = { &#10;                            Icon(&#10;                                imageVector = tab.icon, &#10;                                contentDescription = tab.title + &quot; Tab&quot;&#10;                            ) &#10;                        },&#10;                        label = { Text(tab.title) },&#10;                        selected = selected,&#10;                        onClick = { &#10;                            if (!selected) {&#10;                                navController.navigateSingleTop(tab.screen.route)&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        NavHost(&#10;            navController = navController,&#10;            startDestination = Screen.Home.route,&#10;            modifier = Modifier.padding(innerPadding)&#10;        ) {&#10;            // Home screen&#10;            composable(Screen.Home.route) {&#10;                HomeScreen(&#10;                    onVenueClick = { venue: Venue -&gt;&#10;                        navController.navigateSingleTop(Screen.VenueDetail(venue.id).route)&#10;                    },&#10;                    onBandClick = { band: Band -&gt;&#10;                        navController.navigateSingleTop(Screen.BandDetail(band.id).route)&#10;                    },&#10;                    onUserClick = {&#10;                        navController.navigateSingleTop(Screen.Profile.route)&#10;                    },&#10;                    onNotificationClick = { /* Open notifications */ }&#10;                )&#10;            }&#10;&#10;            // Venues screen&#10;            composable(Screen.Venues.route) {&#10;                VenuesScreen(&#10;                    onVenueClick = { venue -&gt;&#10;                        navController.navigateSingleTop(Screen.VenueDetail(venue.id).route)&#10;                    },&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;&#10;            // Venue detail screen&#10;            composable(&#10;                route = Screen.VenueDetail.route,&#10;                arguments = listOf(&#10;                    navArgument(Screen.VenueDetail.venueIdArg) {&#10;                        type = NavType.StringType&#10;                        nullable = false&#10;                    }&#10;                )&#10;            ) { backStackEntry -&gt;&#10;                val venueId = navController.getStringArgument(Screen.VenueDetail.venueIdArg)&#10;                VenueDetailScreen(&#10;                    venueId = venueId,&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;&#10;            // Bands screen&#10;            composable(Screen.Bands.route) {&#10;                BandsScreen(&#10;                    onBandClick = { band -&gt;&#10;                        navController.navigateSingleTop(Screen.BandDetail(band.id).route)&#10;                    },&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;&#10;            // Band detail screen&#10;            composable(&#10;                route = Screen.BandDetail.route,&#10;                arguments = listOf(&#10;                    navArgument(Screen.BandDetail.bandIdArg) {&#10;                        type = NavType.StringType&#10;                        nullable = false&#10;                    }&#10;                )&#10;            ) { backStackEntry -&gt;&#10;                val bandId = navController.getStringArgument(Screen.BandDetail.bandIdArg)&#10;                BandDetailScreen(&#10;                    bandId = bandId,&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;&#10;            // Profile screen&#10;            composable(Screen.Profile.route) {&#10;                ProfileScreen(&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Data class representing a navigation tab item.&#10; */&#10;data class TabItem(&#10;    val screen: Screen,&#10;    val icon: ImageVector,&#10;    val title: String&#10;)&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PitPulseAppPreview() {&#10;    PitPulseAndroidTheme {&#10;        PitPulseApp()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.EmojiEvents&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.MusicNote&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Place&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.navigation.navArgument&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.navigation.Screen&#10;import com.example.pitpulseandroid.ui.badges.BadgesScreen&#10;import com.example.pitpulseandroid.ui.bands.BandDetailScreen&#10;import com.example.pitpulseandroid.ui.bands.BandsScreen&#10;import com.example.pitpulseandroid.ui.home.HomeScreen&#10;import com.example.pitpulseandroid.ui.profile.ProfileScreen&#10;import com.example.pitpulseandroid.ui.splash.SplashScreen&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;import com.example.pitpulseandroid.ui.venues.VenueDetailScreen&#10;import com.example.pitpulseandroid.ui.venues.VenuesScreen&#10;import com.example.pitpulseandroid.util.NavigationUtils.getStringArgument&#10;import com.example.pitpulseandroid.util.NavigationUtils.navigateSingleTop&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            PitPulseAndroidTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    PitPulseApp()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PitPulseApp() {&#10;    // State to track whether to show splash screen or main app - use rememberSaveable to preserve state&#10;    var showSplashScreen by rememberSaveable { mutableStateOf(true) }&#10;    val navController = rememberNavController()&#10;&#10;    // Clean up any resources when the composable is disposed&#10;    DisposableEffect(Unit) {&#10;        onDispose {}&#10;    }&#10;&#10;    if (showSplashScreen) {&#10;        // Show splash screen&#10;        SplashScreen(&#10;            onTimeout = { showSplashScreen = false }&#10;        )&#10;    } else {&#10;        // Main app content with navigation&#10;        MainContent(navController)&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MainContent(navController: NavHostController) {&#10;    // Observe current back stack entry for navigation state&#10;    val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;    val currentRoute = navBackStackEntry?.destination?.route&#10;&#10;    // Define tabs&#10;    val tabs = listOf(&#10;        TabItem(Screen.Home, Icons.Filled.Home, &quot;Home&quot;),&#10;        TabItem(Screen.Venues, Icons.Filled.Place, &quot;Venues&quot;),&#10;        TabItem(Screen.Bands, Icons.Filled.MusicNote, &quot;Bands&quot;),&#10;        TabItem(Screen.Profile, Icons.Filled.Person, &quot;Profile&quot;),&#10;        TabItem(Screen.Badges, Icons.Filled.EmojiEvents, &quot;Badges&quot;)&#10;    )&#10;&#10;    Scaffold(&#10;        bottomBar = {&#10;            NavigationBar {&#10;                tabs.forEach { tab -&gt;&#10;                    val selected = currentRoute == tab.screen.route ||&#10;                            (currentRoute?.startsWith(tab.screen.route) == true &amp;&amp; &#10;                             tab.screen.route != Screen.Home.route)&#10;&#10;                    NavigationBarItem(&#10;                        icon = { &#10;                            Icon(&#10;                                imageVector = tab.icon, &#10;                                contentDescription = tab.title + &quot; Tab&quot;&#10;                            ) &#10;                        },&#10;                        label = { Text(tab.title) },&#10;                        selected = selected,&#10;                        onClick = { &#10;                            if (!selected) {&#10;                                navController.navigateSingleTop(tab.screen.route)&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        NavHost(&#10;            navController = navController,&#10;            startDestination = Screen.Home.route,&#10;            modifier = Modifier.padding(innerPadding)&#10;        ) {&#10;            // Home screen&#10;            composable(Screen.Home.route) {&#10;                HomeScreen(&#10;                    onVenueClick = { venue: Venue -&gt;&#10;                        navController.navigateSingleTop(Screen.VenueDetail(venue.id).route)&#10;                    },&#10;                    onBandClick = { band: Band -&gt;&#10;                        navController.navigateSingleTop(Screen.BandDetail(band.id).route)&#10;                    },&#10;                    onUserClick = {&#10;                        navController.navigateSingleTop(Screen.Profile.route)&#10;                    },&#10;                    onNotificationClick = { /* Open notifications */ }&#10;                )&#10;            }&#10;&#10;            // Venues screen&#10;            composable(Screen.Venues.route) {&#10;                VenuesScreen(&#10;                    onVenueClick = { venue -&gt;&#10;                        navController.navigateSingleTop(Screen.VenueDetail(venue.id).route)&#10;                    },&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;&#10;            // Venue detail screen&#10;            composable(&#10;                route = Screen.VenueDetail.route,&#10;                arguments = listOf(&#10;                    navArgument(Screen.VenueDetail.venueIdArg) {&#10;                        type = NavType.StringType&#10;                        nullable = false&#10;                    }&#10;                )&#10;            ) { backStackEntry -&gt;&#10;                val venueId = navController.getStringArgument(Screen.VenueDetail.venueIdArg)&#10;                VenueDetailScreen(&#10;                    venueId = venueId,&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;&#10;            // Bands screen&#10;            composable(Screen.Bands.route) {&#10;                BandsScreen(&#10;                    onBandClick = { band -&gt;&#10;                        navController.navigateSingleTop(Screen.BandDetail(band.id).route)&#10;                    },&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;&#10;            // Band detail screen&#10;            composable(&#10;                route = Screen.BandDetail.route,&#10;                arguments = listOf(&#10;                    navArgument(Screen.BandDetail.bandIdArg) {&#10;                        type = NavType.StringType&#10;                        nullable = false&#10;                    }&#10;                )&#10;            ) { backStackEntry -&gt;&#10;                val bandId = navController.getStringArgument(Screen.BandDetail.bandIdArg)&#10;                BandDetailScreen(&#10;                    bandId = bandId,&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;&#10;            // Profile screen&#10;            composable(Screen.Profile.route) {&#10;                ProfileScreen(&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;&#10;            // Badges screen&#10;            composable(Screen.Badges.route) {&#10;                BadgesScreen(&#10;                    onBackClick = { navController.popBackStack() }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Data class representing a navigation tab item.&#10; */&#10;data class TabItem(&#10;    val screen: Screen,&#10;    val icon: ImageVector,&#10;    val title: String&#10;)&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PitPulseAppPreview() {&#10;    PitPulseAndroidTheme {&#10;        PitPulseApp()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Badge.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Badge.kt" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;import java.time.LocalDateTime&#10;&#10;/**&#10; * Types of badges that can be earned in the app&#10; */&#10;enum class BadgeType {&#10;    REVIEW_COUNT,     // Based on number of reviews written&#10;    VENUE_EXPLORER,   // Based on unique venues visited&#10;    MUSIC_LOVER,      // Based on number of different bands seen&#10;    EVENT_ATTENDANCE, // Based on total events attended&#10;    HELPFUL_COUNT     // Based on &quot;helpful&quot; marks received on reviews&#10;}&#10;&#10;/**&#10; * Data class representing a badge in the application.&#10; */&#10;data class Badge(&#10;    val id: String,&#10;    val name: String,&#10;    val description: String,&#10;    val imageUrl: String,&#10;    val badgeType: BadgeType,&#10;    val threshold: Int,&#10;    val tier: Int = 1&#10;) {&#10;    companion object {&#10;        // Sample data for UI development and testing&#10;        fun getSampleBadges(): List&lt;Badge&gt; = listOf(&#10;            Badge(&#10;                id = &quot;review_bronze&quot;,&#10;                name = &quot;Critic Beginner&quot;,&#10;                description = &quot;Write 5 reviews&quot;,&#10;                imageUrl = &quot;https://example.com/badges/review_bronze.png&quot;,&#10;                badgeType = BadgeType.REVIEW_COUNT,&#10;                threshold = 5,&#10;                tier = 1&#10;            ),&#10;            Badge(&#10;                id = &quot;review_silver&quot;,&#10;                name = &quot;Critic Enthusiast&quot;,&#10;                description = &quot;Write 25 reviews&quot;,&#10;                imageUrl = &quot;https://example.com/badges/review_silver.png&quot;,&#10;                badgeType = BadgeType.REVIEW_COUNT,&#10;                threshold = 25,&#10;                tier = 2&#10;            ),&#10;            Badge(&#10;                id = &quot;review_gold&quot;,&#10;                name = &quot;Master Critic&quot;,&#10;                description = &quot;Write 100 reviews&quot;,&#10;                imageUrl = &quot;https://example.com/badges/review_gold.png&quot;,&#10;                badgeType = BadgeType.REVIEW_COUNT,&#10;                threshold = 100,&#10;                tier = 3&#10;            ),&#10;            Badge(&#10;                id = &quot;venue_bronze&quot;,&#10;                name = &quot;Venue Explorer&quot;,&#10;                description = &quot;Visit 3 different venues&quot;,&#10;                imageUrl = &quot;https://example.com/badges/venue_bronze.png&quot;,&#10;                badgeType = BadgeType.VENUE_EXPLORER,&#10;                threshold = 3,&#10;                tier = 1&#10;            ),&#10;            Badge(&#10;                id = &quot;venue_silver&quot;,&#10;                name = &quot;Venue Enthusiast&quot;,&#10;                description = &quot;Visit 10 different venues&quot;,&#10;                imageUrl = &quot;https://example.com/badges/venue_silver.png&quot;,&#10;                badgeType = BadgeType.VENUE_EXPLORER,&#10;                threshold = 10,&#10;                tier = 2&#10;            ),&#10;            Badge(&#10;                id = &quot;venue_gold&quot;,&#10;                name = &quot;Venue Aficionado&quot;,&#10;                description = &quot;Visit 25 different venues&quot;,&#10;                imageUrl = &quot;https://example.com/badges/venue_gold.png&quot;,&#10;                badgeType = BadgeType.VENUE_EXPLORER,&#10;                threshold = 25,&#10;                tier = 3&#10;            ),&#10;            Badge(&#10;                id = &quot;band_bronze&quot;,&#10;                name = &quot;Music Fan&quot;,&#10;                description = &quot;See 5 different bands&quot;,&#10;                imageUrl = &quot;https://example.com/badges/band_bronze.png&quot;,&#10;                badgeType = BadgeType.MUSIC_LOVER,&#10;                threshold = 5,&#10;                tier = 1&#10;            ),&#10;            Badge(&#10;                id = &quot;band_silver&quot;,&#10;                name = &quot;Music Enthusiast&quot;,&#10;                description = &quot;See 15 different bands&quot;,&#10;                imageUrl = &quot;https://example.com/badges/band_silver.png&quot;,&#10;                badgeType = BadgeType.MUSIC_LOVER,&#10;                threshold = 15,&#10;                tier = 2&#10;            ),&#10;            Badge(&#10;                id = &quot;band_gold&quot;,&#10;                name = &quot;Music Aficionado&quot;,&#10;                description = &quot;See 30 different bands&quot;,&#10;                imageUrl = &quot;https://example.com/badges/band_gold.png&quot;,&#10;                badgeType = BadgeType.MUSIC_LOVER,&#10;                threshold = 30,&#10;                tier = 3&#10;            )&#10;        )&#10;    }&#10;}&#10;&#10;/**&#10; * Data class representing a badge earned by a user.&#10; */&#10;data class UserBadge(&#10;    val id: String,&#10;    val userId: String,&#10;    val badgeId: String,&#10;    val dateEarned: LocalDateTime,&#10;    val badge: Badge? = null,&#10;    val currentProgress: Int = 0&#10;)&#10;&#10;/**&#10; * Data class representing a user's progress toward earning a badge.&#10; */&#10;data class BadgeProgress(&#10;    val badge: Badge,&#10;    val currentValue: Int,&#10;    val isEarned: Boolean,&#10;    val percentComplete: Float = (currentValue.toFloat() / badge.threshold) * 100f&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Band.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Band.kt" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;import java.util.UUID&#10;&#10;/**&#10; * Data class representing a band in the application.&#10; */&#10;data class Band(&#10;    val id: String = UUID.randomUUID().toString(),&#10;    val name: String,&#10;    val genre: String,&#10;    val bio: String,&#10;    val imageUrl: String,&#10;    val formationYear: Int,&#10;    val location: String,&#10;    val socialLinks: Map&lt;String, String&gt; = mapOf(),&#10;    val upcomingShows: List&lt;String&gt; = listOf()&#10;) {&#10;    companion object {&#10;        // Sample data for UI development and testing&#10;        fun getSampleBands(): List&lt;Band&gt; = listOf(&#10;            Band(&#10;                id = &quot;band1&quot;,&#10;                name = &quot;Electric Harmony&quot;,&#10;                genre = &quot;Alternative Rock&quot;,&#10;                bio = &quot;Electric Harmony is a four-piece band known for their energetic performances and melodic hooks.&quot;,&#10;                imageUrl = &quot;https://example.com/electric_harmony.jpg&quot;,&#10;                formationYear = 2018,&#10;                location = &quot;Austin, TX&quot;&#10;            ),&#10;            Band(&#10;                id = &quot;band2&quot;,&#10;                name = &quot;Sonic Wave&quot;,&#10;                genre = &quot;Indie Pop&quot;,&#10;                bio = &quot;Sonic Wave blends catchy pop melodies with introspective lyrics for a unique sound.&quot;,&#10;                imageUrl = &quot;https://example.com/sonic_wave.jpg&quot;,&#10;                formationYear = 2019,&#10;                location = &quot;Portland, OR&quot;&#10;            ),&#10;            Band(&#10;                id = &quot;band3&quot;,&#10;                name = &quot;Midnight Rhythm&quot;,&#10;                genre = &quot;Jazz Fusion&quot;,&#10;                bio = &quot;Midnight Rhythm pushes the boundaries of jazz with elements of funk and electronic music.&quot;,&#10;                imageUrl = &quot;https://example.com/midnight_rhythm.jpg&quot;,&#10;                formationYear = 2015,&#10;                location = &quot;New Orleans, LA&quot;&#10;            )&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Venue.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/data/model/Venue.kt" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.data.model&#10;&#10;import java.util.UUID&#10;&#10;/**&#10; * Data class representing a venue in the application.&#10; */&#10;data class Venue(&#10;    val id: String = UUID.randomUUID().toString(),&#10;    val name: String,&#10;    val address: String,&#10;    val city: String,&#10;    val state: String,&#10;    val zipCode: String,&#10;    val description: String,&#10;    val imageUrl: String,&#10;    val capacity: Int,&#10;    val contactInfo: String,&#10;    val amenities: List&lt;String&gt; = listOf(),&#10;    val upcomingEvents: List&lt;String&gt; = listOf()&#10;) {&#10;    companion object {&#10;        // Sample data for UI development and testing&#10;        fun getSampleVenues(): List&lt;Venue&gt; = listOf(&#10;            Venue(&#10;                id = &quot;venue1&quot;,&#10;                name = &quot;The Soundstage&quot;,&#10;                address = &quot;123 Music Avenue&quot;,&#10;                city = &quot;Austin&quot;,&#10;                state = &quot;TX&quot;,&#10;                zipCode = &quot;78701&quot;,&#10;                description = &quot;A premier music venue featuring state-of-the-art sound systems and multiple performance spaces.&quot;,&#10;                imageUrl = &quot;https://example.com/soundstage.jpg&quot;,&#10;                capacity = 1200,&#10;                contactInfo = &quot;info@soundstage.com&quot;,&#10;                amenities = listOf(&quot;Full Bar&quot;, &quot;VIP Seating&quot;, &quot;Merchandise Shop&quot;)&#10;            ),&#10;            Venue(&#10;                id = &quot;venue2&quot;,&#10;                name = &quot;Echo Lounge&quot;,&#10;                address = &quot;456 Harmony Road&quot;,&#10;                city = &quot;Nashville&quot;,&#10;                state = &quot;TN&quot;,&#10;                zipCode = &quot;37203&quot;,&#10;                description = &quot;An intimate venue known for its perfect acoustics and showcasing emerging artists.&quot;,&#10;                imageUrl = &quot;https://example.com/echo_lounge.jpg&quot;,&#10;                capacity = 350,&#10;                contactInfo = &quot;bookings@echolounge.com&quot;,&#10;                amenities = listOf(&quot;Craft Beer Selection&quot;, &quot;Outdoor Patio&quot;)&#10;            ),&#10;            Venue(&#10;                id = &quot;venue3&quot;,&#10;                name = &quot;Rhythm Hall&quot;,&#10;                address = &quot;789 Beat Street&quot;,&#10;                city = &quot;New Orleans&quot;,&#10;                state = &quot;LA&quot;,&#10;                zipCode = &quot;70116&quot;,&#10;                description = &quot;Historic venue featuring a wide range of musical genres from jazz to rock.&quot;,&#10;                imageUrl = &quot;https://example.com/rhythm_hall.jpg&quot;,&#10;                capacity = 800,&#10;                contactInfo = &quot;events@rhythmhall.com&quot;,&#10;                amenities = listOf(&quot;Full Restaurant&quot;, &quot;Premium Sound System&quot;, &quot;Accessible Facilities&quot;)&#10;            )&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/navigation/Screen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/navigation/Screen.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.navigation&#10;&#10;/**&#10; * Type-safe route definitions for app navigation.&#10; */&#10;sealed class Screen(val route: String) {&#10;    object Home : Screen(&quot;home&quot;)&#10;    object Venues : Screen(&quot;venues&quot;)&#10;    object Bands : Screen(&quot;bands&quot;)&#10;    object Profile : Screen(&quot;profile&quot;)&#10;&#10;    class VenueDetail(venueId: String) : Screen(&quot;venue/$venueId&quot;) {&#10;        companion object {&#10;            const val route = &quot;venue/{venueId}&quot;&#10;            const val venueIdArg = &quot;venueId&quot;&#10;        }&#10;    }&#10;&#10;    class BandDetail(bandId: String) : Screen(&quot;band/$bandId&quot;) {&#10;        companion object {&#10;            const val route = &quot;band/{bandId}&quot;&#10;            const val bandIdArg = &quot;bandId&quot;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.navigation&#10;&#10;/**&#10; * Type-safe route definitions for app navigation.&#10; */&#10;sealed class Screen(val route: String) {&#10;    object Home : Screen(&quot;home&quot;)&#10;    object Venues : Screen(&quot;venues&quot;)&#10;    object Bands : Screen(&quot;bands&quot;)&#10;    object Profile : Screen(&quot;profile&quot;)&#10;    object Badges : Screen(&quot;badges&quot;)&#10;&#10;    class VenueDetail(venueId: String) : Screen(&quot;venue/$venueId&quot;) {&#10;        companion object {&#10;            const val route = &quot;venue/{venueId}&quot;&#10;            const val venueIdArg = &quot;venueId&quot;&#10;        }&#10;    }&#10;&#10;    class BandDetail(bandId: String) : Screen(&quot;band/$bandId&quot;) {&#10;        companion object {&#10;            const val route = &quot;band/{bandId}&quot;&#10;            const val bandIdArg = &quot;bandId&quot;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/badges/BadgesScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/badges/BadgesScreen.kt" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.badges&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.LinearProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Tab&#10;import androidx.compose.material3.TabRow&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Badge&#10;import com.example.pitpulseandroid.data.model.BadgeProgress&#10;import com.example.pitpulseandroid.data.model.BadgeType&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;import kotlin.random.Random&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BadgesScreen(&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    var selectedTabIndex by remember { mutableStateOf(0) }&#10;    val tabs = listOf(&quot;All Badges&quot;, &quot;Earned&quot;, &quot;In Progress&quot;)&#10;    &#10;    // In a real app, these would come from a repository&#10;    val allBadges = Badge.getSampleBadges()&#10;    val badgeProgress = remember {&#10;        allBadges.map { badge -&gt;&#10;            val currentValue = Random.nextInt(0, badge.threshold * 2)&#10;            BadgeProgress(&#10;                badge = badge,&#10;                currentValue = currentValue,&#10;                isEarned = currentValue &gt;= badge.threshold,&#10;                percentComplete = (currentValue.toFloat() / badge.threshold).coerceAtMost(1f) * 100f&#10;            )&#10;        }&#10;    }&#10;    &#10;    val filteredBadges = when (selectedTabIndex) {&#10;        1 -&gt; badgeProgress.filter { it.isEarned }&#10;        2 -&gt; badgeProgress.filter { !it.isEarned }&#10;        else -&gt; badgeProgress&#10;    }&#10;    &#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Badges&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;        ) {&#10;            TabRow(selectedTabIndex = selectedTabIndex) {&#10;                tabs.forEachIndexed { index, title -&gt;&#10;                    Tab(&#10;                        text = { Text(title) },&#10;                        selected = selectedTabIndex == index,&#10;                        onClick = { selectedTabIndex = index }&#10;                    )&#10;                }&#10;            }&#10;            &#10;            if (filteredBadges.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = if (selectedTabIndex == 1) &quot;No badges earned yet&quot; else &quot;No badges in progress&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                }&#10;            } else {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentPadding = PaddingValues(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    items(filteredBadges) { progress -&gt;&#10;                        BadgeItem(progress = progress)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BadgeItem(progress: BadgeProgress) {&#10;    val badge = progress.badge&#10;    val tierColor = when (badge.tier) {&#10;        1 -&gt; Color(0xFFCD7F32) // Bronze&#10;        2 -&gt; Color(0xFFC0C0C0) // Silver&#10;        3 -&gt; Color(0xFFFFD700) // Gold&#10;        else -&gt; MaterialTheme.colorScheme.primary&#10;    }&#10;    &#10;    Card(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Badge icon&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(60.dp)&#10;                    .clip(CircleShape)&#10;                    .background(Color.LightGray.copy(alpha = 0.3f))&#10;                    .border(2.dp, tierColor, CircleShape),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = badge.name.take(1),&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    color = tierColor&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.width(16.dp))&#10;            &#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = badge.name,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                &#10;                Text(&#10;                    text = badge.description,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                &#10;                if (progress.isEarned) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .clip(RoundedCornerShape(4.dp))&#10;                            .background(MaterialTheme.colorScheme.primaryContainer)&#10;                            .padding(horizontal = 8.dp, vertical = 4.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Earned!&quot;,&#10;                            style = MaterialTheme.typography.labelMedium,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                    }&#10;                } else {&#10;                    Column {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.SpaceBetween&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;Progress: ${progress.currentValue}/${badge.threshold}&quot;,&#10;                                style = MaterialTheme.typography.bodySmall&#10;                            )&#10;                            Text(&#10;                                text = &quot;${progress.percentComplete.toInt()}%&quot;,&#10;                                style = MaterialTheme.typography.bodySmall&#10;                            )&#10;                        }&#10;                        &#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                        &#10;                        LinearProgressIndicator(&#10;                            progress = progress.percentComplete / 100f,&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun BadgesScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        BadgesScreen(&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/bands/BandDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/bands/BandDetailScreen.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.bands&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material.icons.filled.MusicNote&#10;import androidx.compose.material.icons.filled.Share&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BandDetailScreen(&#10;    bandId: String,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    // In a real app, you would fetch the band by ID from a repository&#10;    val band = Band.getSampleBands().find { it.id == bandId } ?: Band.getSampleBands().first()&#10;    var isFavorite by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(band.name) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { isFavorite = !isFavorite }) {&#10;                        Icon(&#10;                            imageVector = if (isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                            contentDescription = if (isFavorite) &quot;Remove from favorites&quot; else &quot;Add to favorites&quot;&#10;                        )&#10;                    }&#10;                    IconButton(onClick = { /* Handle share */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Share,&#10;                            contentDescription = &quot;Share&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Band image placeholder&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Band Image&quot;,&#10;                        style = MaterialTheme.typography.titleLarge&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Band info&#10;            Column {&#10;                Text(&#10;                    text = band.name,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.MusicNote,&#10;                        contentDescription = &quot;Genre&quot;,&#10;                        modifier = Modifier.padding(end = 4.dp)&#10;                    )&#10;                    Text(&#10;                        text = band.genre,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.LocationOn,&#10;                        contentDescription = &quot;Location&quot;,&#10;                        modifier = Modifier.padding(end = 4.dp)&#10;                    )&#10;                    Text(&#10;                        text = band.location,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Bio&#10;            Column {&#10;                Text(&#10;                    text = &quot;Biography&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = band.bio,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Formation year&#10;            Column {&#10;                Text(&#10;                    text = &quot;Formed&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = band.formationYear.toString(),&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            if (band.socialLinks.isNotEmpty()) {&#10;                HorizontalDivider()&#10;&#10;                // Social links&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Social Media&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    band.socialLinks.forEach { (platform, link) -&gt;&#10;                        Text(&#10;                            text = &quot;• $platform&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            modifier = Modifier.padding(vertical = 2.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Action buttons&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Button(&#10;                    onClick = { /* Handle click */ },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;View Shows&quot;)&#10;                }&#10;&#10;                Button(&#10;                    onClick = { /* Handle click */ },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;Follow&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun BandDetailScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        BandDetailScreen(&#10;            bandId = &quot;band1&quot;,&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.bands&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material.icons.filled.MusicNote&#10;import androidx.compose.material.icons.filled.Share&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BandDetailScreen(&#10;    bandId: String,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    // In a real app, you would fetch the band by ID from a repository&#10;    val band = Band.getSampleBands().find { it.id == bandId } ?: Band.getSampleBands().first()&#10;    var isFavorite by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(band.name) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { isFavorite = !isFavorite }) {&#10;                        Icon(&#10;                            imageVector = if (isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                            contentDescription = if (isFavorite) &quot;Remove from favorites&quot; else &quot;Add to favorites&quot;&#10;                        )&#10;                    }&#10;                    IconButton(onClick = { /* Handle share */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Share,&#10;                            contentDescription = &quot;Share&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Band image placeholder&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Band Image&quot;,&#10;                        style = MaterialTheme.typography.titleLarge&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Band info&#10;            Column {&#10;                Text(&#10;                    text = band.name,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.MusicNote,&#10;                        contentDescription = &quot;Genre&quot;,&#10;                        modifier = Modifier.padding(end = 4.dp)&#10;                    )&#10;                    Text(&#10;                        text = band.genre,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.LocationOn,&#10;                        contentDescription = &quot;Location&quot;,&#10;                        modifier = Modifier.padding(end = 4.dp)&#10;                    )&#10;                    Text(&#10;                        text = band.location,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Bio&#10;            Column {&#10;                Text(&#10;                    text = &quot;Biography&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = band.bio,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Formation year&#10;            Column {&#10;                Text(&#10;                    text = &quot;Formed&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = band.formationYear.toString(),&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            if (band.socialLinks.isNotEmpty()) {&#10;                HorizontalDivider()&#10;&#10;                // Social links&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Social Media&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    band.socialLinks.forEach { (platform, _) -&gt;&#10;                        Text(&#10;                            text = &quot;• $platform&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            modifier = Modifier.padding(vertical = 2.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Action buttons&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Button(&#10;                    onClick = { /* Handle click */ },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;View Shows&quot;)&#10;                }&#10;&#10;                Button(&#10;                    onClick = { /* Handle click */ },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;Follow&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun BandDetailScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        BandDetailScreen(&#10;            bandId = &quot;band1&quot;,&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/bands/BandsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/bands/BandsScreen.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.bands&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BandsScreen(&#10;    onBandClick: (Band) -&gt; Unit,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    val bands = Band.getSampleBands()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Bands&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 8.dp),&#10;                placeholder = { Text(&quot;Search bands...&quot;) },&#10;                trailingIcon = {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Search,&#10;                        contentDescription = &quot;Search&quot;&#10;                    )&#10;                },&#10;                singleLine = true&#10;            )&#10;&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxSize(),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp),&#10;                contentPadding = PaddingValues(vertical = 8.dp)&#10;            ) {&#10;                items(bands.filter {&#10;                    searchQuery.isEmpty() ||&#10;                    it.name.contains(searchQuery, ignoreCase = true) ||&#10;                    it.genre.contains(searchQuery, ignoreCase = true)&#10;                }) { band -&gt;&#10;                    BandListItem(&#10;                        band = band,&#10;                        onClick = { onBandClick(band) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BandListItem(&#10;    band: Band,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Placeholder for band image&#10;            Card(&#10;                modifier = Modifier.size(80.dp)&#10;            ) {&#10;                // This would be an AsyncImage in a real app&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = band.name.take(1),&#10;                        style = MaterialTheme.typography.headlineMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = band.name,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = band.genre,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = band.bio,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun BandsScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        BandsScreen(&#10;            onBandClick = {},&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.bands&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BandsScreen(&#10;    onBandClick: (Band) -&gt; Unit,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    val bands = Band.getSampleBands()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Bands&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 8.dp),&#10;                placeholder = { Text(&quot;Search bands...&quot;) },&#10;                trailingIcon = {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Search,&#10;                        contentDescription = &quot;Search&quot;&#10;                    )&#10;                },&#10;                singleLine = true&#10;            )&#10;&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxSize(),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp),&#10;                contentPadding = PaddingValues(vertical = 8.dp)&#10;            ) {&#10;                items(bands.filter {&#10;                    searchQuery.isEmpty() ||&#10;                    it.name.contains(searchQuery, ignoreCase = true) ||&#10;                    it.genre.contains(searchQuery, ignoreCase = true)&#10;                }) { band -&gt;&#10;                    BandListItem(&#10;                        band = band,&#10;                        onClick = { onBandClick(band) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BandListItem(&#10;    band: Band,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Placeholder for band image&#10;            Card(&#10;                modifier = Modifier.size(80.dp)&#10;            ) {&#10;                // This would be an AsyncImage in a real app&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = band.name.take(1),&#10;                        style = MaterialTheme.typography.headlineMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = band.name,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = band.genre,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = band.bio,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun BandsScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        BandsScreen(&#10;            onBandClick = {},&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/common/LoadingState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/common/LoadingState.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.common&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextAlign&#10;&#10;/**&#10; * Displays a loading indicator centered on the screen.&#10; */&#10;@Composable&#10;fun LoadingIndicator() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        CircularProgressIndicator()&#10;    }&#10;}&#10;&#10;/**&#10; * Displays an error message centered on the screen.&#10; * &#10; * @param message The error message to display&#10; */&#10;@Composable&#10;fun ErrorState(message: String) {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = message,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            textAlign = TextAlign.Center,&#10;            color = MaterialTheme.colorScheme.error&#10;        )&#10;    }&#10;}&#10;&#10;/**&#10; * Displays a loading state with the option to show an error message.&#10; * &#10; * @param isLoading Whether content is loading&#10; * @param error Error message, null if no error&#10; * @param content Content to display when not loading and no error&#10; */&#10;@Composable&#10;fun &lt;T&gt; LoadingState(&#10;    data: T?,&#10;    isLoading: Boolean,&#10;    error: String? = null,&#10;    content: @Composable (T) -&gt; Unit&#10;) {&#10;    when {&#10;        isLoading -&gt; LoadingIndicator()&#10;        error != null -&gt; ErrorState(message = error)&#10;        data != null -&gt; content(data)&#10;        else -&gt; ErrorState(message = &quot;No data available&quot;)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.common&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextAlign&#10;&#10;/**&#10; * Displays a loading indicator centered on the screen.&#10; */&#10;@Composable&#10;fun LoadingIndicator() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        CircularProgressIndicator()&#10;    }&#10;}&#10;&#10;/**&#10; * Displays an error message centered on the screen.&#10; * &#10; * @param message The error message to display&#10; */&#10;@Composable&#10;fun ErrorState(message: String) {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = message,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            textAlign = TextAlign.Center,&#10;            color = MaterialTheme.colorScheme.error&#10;        )&#10;    }&#10;}&#10;&#10;/**&#10; * Displays a loading state with the option to show an error message.&#10; * &#10; * @param isLoading Whether content is loading&#10; * @param error Error message, null if no error&#10; * @param content Content to display when not loading and no error&#10; */&#10;@Composable&#10;@Suppress(&quot;unused&quot;) // Will be used in future implementations&#10;fun &lt;T&gt; LoadingState(&#10;    data: T?,&#10;    isLoading: Boolean,&#10;    error: String? = null,&#10;    content: @Composable (T) -&gt; Unit&#10;) {&#10;    when {&#10;        isLoading -&gt; LoadingIndicator()&#10;        error != null -&gt; ErrorState(message = error)&#10;        data != null -&gt; content(data)&#10;        else -&gt; ErrorState(message = &quot;No data available&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/home/HomeScreen.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.home&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Notifications&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HomeScreen(&#10;    onVenueClick: (Venue) -&gt; Unit,&#10;    onBandClick: (Band) -&gt; Unit,&#10;    onUserClick: () -&gt; Unit,&#10;    onNotificationClick: () -&gt; Unit&#10;) {&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;PitPulse&quot;) },&#10;                actions = {&#10;                    IconButton(onClick = onNotificationClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Notifications,&#10;                            contentDescription = &quot;Notifications&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp),&#10;            contentPadding = PaddingValues(16.dp)&#10;        ) {&#10;            item {&#10;                Text(&#10;                    text = &quot;Featured Venues&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                VenueRow(&#10;                    venues = Venue.getSampleVenues(),&#10;                    onVenueClick = onVenueClick&#10;                )&#10;            }&#10;&#10;            item {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Text(&#10;                    text = &quot;Popular Bands&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                BandRow(&#10;                    bands = Band.getSampleBands(),&#10;                    onBandClick = onBandClick&#10;                )&#10;            }&#10;&#10;            item {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Text(&#10;                    text = &quot;Upcoming Shows&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                UpcomingShowsList()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun VenueRow(&#10;    venues: List&lt;Venue&gt;,&#10;    onVenueClick: (Venue) -&gt; Unit&#10;) {&#10;    LazyRow(&#10;        horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        items(venues) { venue -&gt;&#10;            VenueCard(&#10;                venue = venue,&#10;                onClick = { onVenueClick(venue) }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun VenueCard(&#10;    venue: Venue,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth(0.8f)&#10;            .height(120.dp)&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = venue.name,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = &quot;${venue.city}, ${venue.state}&quot;,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = &quot;Capacity: ${venue.capacity}&quot;,&#10;                style = MaterialTheme.typography.bodySmall&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BandRow(&#10;    bands: List&lt;Band&gt;,&#10;    onBandClick: (Band) -&gt; Unit&#10;) {&#10;    LazyRow(&#10;        horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        items(bands) { band -&gt;&#10;            BandCard(&#10;                band = band,&#10;                onClick = { onBandClick(band) }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BandCard(&#10;    band: Band,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth(0.8f)&#10;            .height(120.dp)&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = band.name,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = band.genre,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = band.location,&#10;                style = MaterialTheme.typography.bodySmall&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun UpcomingShowsList() {&#10;    Column(&#10;        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        // Sample upcoming shows&#10;        for (i in 1..3) {&#10;            UpcomingShowItem(&#10;                bandName = &quot;Band ${i}&quot;,&#10;                venueName = &quot;Venue ${i}&quot;,&#10;                date = &quot;Aug ${i + 10}, 2025&quot;,&#10;                onClick = { /* Handle click */ }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun UpcomingShowItem(&#10;    bandName: String,&#10;    venueName: String,&#10;    date: String,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = bandName,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = venueName,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;            Text(&#10;                text = date,&#10;                style = MaterialTheme.typography.bodySmall&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun HomeScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        HomeScreen(&#10;            onVenueClick = {},&#10;            onBandClick = {},&#10;            onUserClick = {},&#10;            onNotificationClick = {}&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.home&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Notifications&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Band&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HomeScreen(&#10;    onVenueClick: (Venue) -&gt; Unit,&#10;    onBandClick: (Band) -&gt; Unit,&#10;    @Suppress(&quot;UNUSED_PARAMETER&quot;) onUserClick: () -&gt; Unit,&#10;    onNotificationClick: () -&gt; Unit&#10;) {&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;PitPulse&quot;) },&#10;                actions = {&#10;                    IconButton(onClick = onNotificationClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Notifications,&#10;                            contentDescription = &quot;Notifications&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp),&#10;            contentPadding = PaddingValues(16.dp)&#10;        ) {&#10;            item {&#10;                Text(&#10;                    text = &quot;Featured Venues&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                VenueRow(&#10;                    venues = Venue.getSampleVenues(),&#10;                    onVenueClick = onVenueClick&#10;                )&#10;            }&#10;&#10;            item {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Text(&#10;                    text = &quot;Popular Bands&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                BandRow(&#10;                    bands = Band.getSampleBands(),&#10;                    onBandClick = onBandClick&#10;                )&#10;            }&#10;&#10;            item {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Text(&#10;                    text = &quot;Upcoming Shows&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                UpcomingShowsList()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun VenueRow(&#10;    venues: List&lt;Venue&gt;,&#10;    onVenueClick: (Venue) -&gt; Unit&#10;) {&#10;    LazyRow(&#10;        horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        items(venues) { venue -&gt;&#10;            VenueCard(&#10;                venue = venue,&#10;                onClick = { onVenueClick(venue) }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun VenueCard(&#10;    venue: Venue,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth(0.8f)&#10;            .height(120.dp)&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = venue.name,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = &quot;${venue.city}, ${venue.state}&quot;,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = &quot;Capacity: ${venue.capacity}&quot;,&#10;                style = MaterialTheme.typography.bodySmall&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BandRow(&#10;    bands: List&lt;Band&gt;,&#10;    onBandClick: (Band) -&gt; Unit&#10;) {&#10;    LazyRow(&#10;        horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        items(bands) { band -&gt;&#10;            BandCard(&#10;                band = band,&#10;                onClick = { onBandClick(band) }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BandCard(&#10;    band: Band,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth(0.8f)&#10;            .height(120.dp)&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = band.name,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = band.genre,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = band.location,&#10;                style = MaterialTheme.typography.bodySmall&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun UpcomingShowsList() {&#10;    Column(&#10;        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        // Sample upcoming shows&#10;        for (i in 1..3) {&#10;            UpcomingShowItem(&#10;                bandName = &quot;Band ${i}&quot;,&#10;                venueName = &quot;Venue ${i}&quot;,&#10;                date = &quot;Aug ${i + 10}, 2025&quot;,&#10;                onClick = { /* Handle click */ }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun UpcomingShowItem(&#10;    bandName: String,&#10;    venueName: String,&#10;    date: String,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = bandName,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = venueName,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;            Text(&#10;                text = date,&#10;                style = MaterialTheme.typography.bodySmall&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun HomeScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        HomeScreen(&#10;            onVenueClick = {},&#10;            onBandClick = {},&#10;            onUserClick = {},&#10;            onNotificationClick = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/profile/ProfileScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/profile/ProfileScreen.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.profile&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Info&#10;import androidx.compose.material.icons.filled.Notifications&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Divider&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProfileScreen(&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    // This would be user data from a repository in a real app&#10;    val userName = &quot;John Doe&quot;&#10;    val userEmail = &quot;john.doe@example.com&quot;&#10;    var notificationsEnabled by remember { mutableStateOf(true) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Profile&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { /* Open settings */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Settings,&#10;                            contentDescription = &quot;Settings&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Profile header&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // Profile image&#10;                Surface(&#10;                    modifier = Modifier&#10;                        .size(120.dp)&#10;                        .clip(CircleShape),&#10;                    color = MaterialTheme.colorScheme.primaryContainer&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Profile picture&quot;,&#10;                        modifier = Modifier&#10;                            .padding(24.dp)&#10;                            .size(72.dp)&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Text(&#10;                    text = userName,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Text(&#10;                    text = userEmail,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Button(&#10;                    onClick = { /* Edit profile */ }&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Edit,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.padding(end = 8.dp)&#10;                    )&#10;                    Text(&quot;Edit Profile&quot;)&#10;                }&#10;            }&#10;&#10;            Divider()&#10;&#10;            // Profile sections&#10;            ProfileSection(&#10;                title = &quot;Account Settings&quot;,&#10;                items = listOf(&#10;                    ProfileMenuItem(&quot;Notifications&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.SpaceBetween&#10;                        ) {&#10;                            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Notifications,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.padding(end = 16.dp)&#10;                                )&#10;                                Text(&quot;Push Notifications&quot;)&#10;                            }&#10;                            Switch(&#10;                                checked = notificationsEnabled,&#10;                                onCheckedChange = { notificationsEnabled = it }&#10;                            )&#10;                        }&#10;                    },&#10;                    ProfileMenuItem(&quot;Privacy Settings&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Info,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.padding(end = 16.dp)&#10;                            )&#10;                            Text(&quot;Privacy Settings&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            )&#10;&#10;            Divider()&#10;&#10;            ProfileSection(&#10;                title = &quot;Content&quot;,&#10;                items = listOf(&#10;                    ProfileMenuItem(&quot;Favorite Venues&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Favorite,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.padding(end = 16.dp)&#10;                            )&#10;                            Text(&quot;Favorite Venues&quot;)&#10;                        }&#10;                    },&#10;                    ProfileMenuItem(&quot;Following Bands&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Star,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.padding(end = 16.dp)&#10;                            )&#10;                            Text(&quot;Following Bands&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            )&#10;&#10;            Divider()&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = { /* Sign out */ },&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;Sign Out&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileSection(&#10;    title: String,&#10;    items: List&lt;ProfileMenuItem&gt;&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 16.dp)&#10;    ) {&#10;        Text(&#10;            text = title,&#10;            style = MaterialTheme.typography.titleMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        items.forEach { item -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 4.dp)&#10;            ) {&#10;                item.content()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;data class ProfileMenuItem(&#10;    val title: String,&#10;    val content: @Composable () -&gt; Unit&#10;)&#10;&#10;@Preview&#10;@Composable&#10;fun ProfileScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        ProfileScreen(&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.profile&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Info&#10;import androidx.compose.material.icons.filled.Notifications&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProfileScreen(&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    // This would be user data from a repository in a real app&#10;    val userName = &quot;John Doe&quot;&#10;    val userEmail = &quot;john.doe@example.com&quot;&#10;    var notificationsEnabled by remember { mutableStateOf(true) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Profile&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { /* Open settings */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Settings,&#10;                            contentDescription = &quot;Settings&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Profile header&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // Profile image&#10;                Surface(&#10;                    modifier = Modifier&#10;                        .size(120.dp)&#10;                        .clip(CircleShape),&#10;                    color = MaterialTheme.colorScheme.primaryContainer&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Profile picture&quot;,&#10;                        modifier = Modifier&#10;                            .padding(24.dp)&#10;                            .size(72.dp)&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Text(&#10;                    text = userName,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Text(&#10;                    text = userEmail,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Button(&#10;                    onClick = { /* Edit profile */ }&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Edit,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.padding(end = 8.dp)&#10;                    )&#10;                    Text(&quot;Edit Profile&quot;)&#10;                }&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Profile sections&#10;            ProfileSection(&#10;                title = &quot;Account Settings&quot;,&#10;                items = listOf(&#10;                    ProfileMenuItem(&quot;Notifications&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.SpaceBetween&#10;                        ) {&#10;                            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Notifications,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.padding(end = 16.dp)&#10;                                )&#10;                                Text(&quot;Push Notifications&quot;)&#10;                            }&#10;                            Switch(&#10;                                checked = notificationsEnabled,&#10;                                onCheckedChange = { notificationsEnabled = it }&#10;                            )&#10;                        }&#10;                    },&#10;                    ProfileMenuItem(&quot;Privacy Settings&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Info,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.padding(end = 16.dp)&#10;                            )&#10;                            Text(&quot;Privacy Settings&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            )&#10;&#10;            HorizontalDivider()&#10;&#10;            ProfileSection(&#10;                title = &quot;Content&quot;,&#10;                items = listOf(&#10;                    ProfileMenuItem(&quot;Favorite Venues&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Favorite,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.padding(end = 16.dp)&#10;                            )&#10;                            Text(&quot;Favorite Venues&quot;)&#10;                        }&#10;                    },&#10;                    ProfileMenuItem(&quot;Following Bands&quot;) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Star,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.padding(end = 16.dp)&#10;                            )&#10;                            Text(&quot;Following Bands&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            )&#10;&#10;            HorizontalDivider()&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = { /* Sign out */ },&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;Sign Out&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileSection(&#10;    title: String,&#10;    items: List&lt;ProfileMenuItem&gt;&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 16.dp)&#10;    ) {&#10;        Text(&#10;            text = title,&#10;            style = MaterialTheme.typography.titleMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        items.forEach { item -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 4.dp)&#10;            ) {&#10;                item.content()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;data class ProfileMenuItem(&#10;    val title: String,&#10;    val content: @Composable () -&gt; Unit&#10;)&#10;&#10;@Preview&#10;@Composable&#10;fun ProfileScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        ProfileScreen(&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/theme/Theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/theme/Theme.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.theme&#10;&#10;import android.app.Activity&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.SideEffect&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalView&#10;import androidx.core.view.WindowCompat&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Color(0xFF6200EE),&#10;    secondary = Color(0xFF03DAC5),&#10;    tertiary = Color(0xFF3700B3),&#10;    background = Color(0xFF121212),&#10;    surface = Color(0xFF121212),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.Black,&#10;    onTertiary = Color.White,&#10;    onBackground = Color.White,&#10;    onSurface = Color.White&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Color(0xFF6200EE),&#10;    secondary = Color(0xFF03DAC5),&#10;    tertiary = Color(0xFF3700B3),&#10;    background = Color.White,&#10;    surface = Color.White,&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.Black,&#10;    onTertiary = Color.White,&#10;    onBackground = Color.Black,&#10;    onSurface = Color.Black&#10;)&#10;&#10;@Composable&#10;fun PitPulseAndroidTheme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;    val view = LocalView.current&#10;    if (!view.isInEditMode) {&#10;        SideEffect {&#10;            val window = (view.context as Activity).window&#10;            window.statusBarColor = colorScheme.primary.toArgb()&#10;            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = !darkTheme&#10;        }&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.theme&#10;&#10;import android.app.Activity&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.SideEffect&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalView&#10;import androidx.core.view.WindowCompat&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Color(0xFF6200EE),&#10;    secondary = Color(0xFF03DAC5),&#10;    tertiary = Color(0xFF3700B3),&#10;    background = Color(0xFF121212),&#10;    surface = Color(0xFF121212),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.Black,&#10;    onTertiary = Color.White,&#10;    onBackground = Color.White,&#10;    onSurface = Color.White&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Color(0xFF6200EE),&#10;    secondary = Color(0xFF03DAC5),&#10;    tertiary = Color(0xFF3700B3),&#10;    background = Color.White,&#10;    surface = Color.White,&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.Black,&#10;    onTertiary = Color.White,&#10;    onBackground = Color.Black,&#10;    onSurface = Color.Black&#10;)&#10;&#10;@Composable&#10;fun PitPulseAndroidTheme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;    val view = LocalView.current&#10;    if (!view.isInEditMode) {&#10;        SideEffect {&#10;            val window = (view.context as Activity).window&#10;            @Suppress(&quot;DEPRECATION&quot;)&#10;            window.statusBarColor = colorScheme.primary.toArgb()&#10;            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = !darkTheme&#10;        }&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/theme/Type.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/theme/Type.kt" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.theme&#10;&#10;import androidx.compose.material3.Typography&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;&#10;// Set of Material typography styles to start with&#10;val Typography = Typography(&#10;    bodyLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 16.sp,&#10;        lineHeight = 24.sp,&#10;        letterSpacing = 0.5.sp&#10;    ),&#10;    titleLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 22.sp,&#10;        lineHeight = 28.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    labelSmall = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 11.sp,&#10;        lineHeight = 16.sp,&#10;        letterSpacing = 0.5.sp&#10;    )&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/venues/VenueDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/venues/VenueDetailScreen.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.venues&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Share&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Divider&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun VenueDetailScreen(&#10;    venueId: String,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    // In a real app, you would fetch the venue by ID from a repository&#10;    val venue = Venue.getSampleVenues().find { it.id == venueId } ?: Venue.getSampleVenues().first()&#10;    var isFavorite by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(venue.name) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { isFavorite = !isFavorite }) {&#10;                        Icon(&#10;                            imageVector = if (isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                            contentDescription = if (isFavorite) &quot;Remove from favorites&quot; else &quot;Add to favorites&quot;&#10;                        )&#10;                    }&#10;                    IconButton(onClick = { /* Handle share */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Share,&#10;                            contentDescription = &quot;Share&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Venue image placeholder&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Venue Image&quot;,&#10;                        style = MaterialTheme.typography.titleLarge&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Venue info&#10;            Column {&#10;                Text(&#10;                    text = venue.name,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.LocationOn,&#10;                        contentDescription = &quot;Location&quot;,&#10;                        modifier = Modifier.padding(end = 4.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;${venue.address}, ${venue.city}, ${venue.state} ${venue.zipCode}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Capacity&quot;,&#10;                        modifier = Modifier.padding(end = 4.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;Capacity: ${venue.capacity} people&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            Divider()&#10;&#10;            // Description&#10;            Column {&#10;                Text(&#10;                    text = &quot;About&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = venue.description,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            Divider()&#10;&#10;            // Amenities&#10;            Column {&#10;                Text(&#10;                    text = &quot;Amenities&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                venue.amenities.forEach { amenity -&gt;&#10;                    Text(&#10;                        text = &quot;• $amenity&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        modifier = Modifier.padding(vertical = 2.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            Divider()&#10;&#10;            // Contact info&#10;            Column {&#10;                Text(&#10;                    text = &quot;Contact&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = venue.contactInfo,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Action buttons&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Button(&#10;                    onClick = { /* Handle click */ },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;View Shows&quot;)&#10;                }&#10;&#10;                Button(&#10;                    onClick = { /* Handle click */ },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;Get Directions&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun VenueDetailScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        VenueDetailScreen(&#10;            venueId = &quot;venue1&quot;,&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.venues&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Share&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun VenueDetailScreen(&#10;    venueId: String,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    // In a real app, you would fetch the venue by ID from a repository&#10;    val venue = Venue.getSampleVenues().find { it.id == venueId } ?: Venue.getSampleVenues().first()&#10;    var isFavorite by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(venue.name) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { isFavorite = !isFavorite }) {&#10;                        Icon(&#10;                            imageVector = if (isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                            contentDescription = if (isFavorite) &quot;Remove from favorites&quot; else &quot;Add to favorites&quot;&#10;                        )&#10;                    }&#10;                    IconButton(onClick = { /* Handle share */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Share,&#10;                            contentDescription = &quot;Share&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Venue image placeholder&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Venue Image&quot;,&#10;                        style = MaterialTheme.typography.titleLarge&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Venue info&#10;            Column {&#10;                Text(&#10;                    text = venue.name,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.LocationOn,&#10;                        contentDescription = &quot;Location&quot;,&#10;                        modifier = Modifier.padding(end = 4.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;${venue.address}, ${venue.city}, ${venue.state} ${venue.zipCode}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Capacity&quot;,&#10;                        modifier = Modifier.padding(end = 4.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;Capacity: ${venue.capacity} people&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Description&#10;            Column {&#10;                Text(&#10;                    text = &quot;About&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = venue.description,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Amenities&#10;            Column {&#10;                Text(&#10;                    text = &quot;Amenities&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                venue.amenities.forEach { amenity -&gt;&#10;                    Text(&#10;                        text = &quot;• $amenity&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        modifier = Modifier.padding(vertical = 2.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            HorizontalDivider()&#10;&#10;            // Contact info&#10;            Column {&#10;                Text(&#10;                    text = &quot;Contact&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = venue.contactInfo,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Action buttons&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Button(&#10;                    onClick = { /* Handle click */ },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;View Shows&quot;)&#10;                }&#10;&#10;                Button(&#10;                    onClick = { /* Handle click */ },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;Get Directions&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun VenueDetailScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        VenueDetailScreen(&#10;            venueId = &quot;venue1&quot;,&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/venues/VenuesScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/ui/venues/VenuesScreen.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.ui.venues&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun VenuesScreen(&#10;    onVenueClick: (Venue) -&gt; Unit,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    val venues = Venue.getSampleVenues()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Venues&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 8.dp),&#10;                placeholder = { Text(&quot;Search venues...&quot;) },&#10;                trailingIcon = {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Search,&#10;                        contentDescription = &quot;Search&quot;&#10;                    )&#10;                },&#10;                singleLine = true&#10;            )&#10;&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxSize(),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp),&#10;                contentPadding = PaddingValues(vertical = 8.dp)&#10;            ) {&#10;                items(venues.filter {&#10;                    searchQuery.isEmpty() ||&#10;                    it.name.contains(searchQuery, ignoreCase = true) ||&#10;                    it.city.contains(searchQuery, ignoreCase = true)&#10;                }) { venue -&gt;&#10;                    VenueListItem(&#10;                        venue = venue,&#10;                        onClick = { onVenueClick(venue) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun VenueListItem(&#10;    venue: Venue,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Placeholder for venue image&#10;            Card(&#10;                modifier = Modifier.size(80.dp)&#10;            ) {&#10;                // This would be an AsyncImage in a real app&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = venue.name.take(1),&#10;                        style = MaterialTheme.typography.headlineMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = venue.name,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = &quot;${venue.city}, ${venue.state}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = venue.description,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun VenuesScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        VenuesScreen(&#10;            onVenueClick = {},&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.ui.venues&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.pitpulseandroid.data.model.Venue&#10;import com.example.pitpulseandroid.ui.theme.PitPulseAndroidTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun VenuesScreen(&#10;    onVenueClick: (Venue) -&gt; Unit,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    val venues = Venue.getSampleVenues()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Venues&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 8.dp),&#10;                placeholder = { Text(&quot;Search venues...&quot;) },&#10;                trailingIcon = {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Search,&#10;                        contentDescription = &quot;Search&quot;&#10;                    )&#10;                },&#10;                singleLine = true&#10;            )&#10;&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxSize(),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp),&#10;                contentPadding = PaddingValues(vertical = 8.dp)&#10;            ) {&#10;                items(venues.filter {&#10;                    searchQuery.isEmpty() ||&#10;                    it.name.contains(searchQuery, ignoreCase = true) ||&#10;                    it.city.contains(searchQuery, ignoreCase = true)&#10;                }) { venue -&gt;&#10;                    VenueListItem(&#10;                        venue = venue,&#10;                        onClick = { onVenueClick(venue) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun VenueListItem(&#10;    venue: Venue,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Placeholder for venue image&#10;            Card(&#10;                modifier = Modifier.size(80.dp)&#10;            ) {&#10;                // This would be an AsyncImage in a real app&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = venue.name.take(1),&#10;                        style = MaterialTheme.typography.headlineMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = venue.name,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = &quot;${venue.city}, ${venue.state}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = venue.description,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun VenuesScreenPreview() {&#10;    PitPulseAndroidTheme {&#10;        VenuesScreen(&#10;            onVenueClick = {},&#10;            onBackClick = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/util/NavigationUtils.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pitpulseandroid/util/NavigationUtils.kt" />
              <option name="originalContent" value="package com.example.pitpulseandroid.util&#10;&#10;import androidx.navigation.NavController&#10;import androidx.navigation.NavGraph.Companion.findStartDestination&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Utility functions for navigation.&#10; */&#10;object NavigationUtils {&#10;    private var lastNavigationTime = 0L&#10;    private var navigationJob: Job? = null&#10;    private const val NAVIGATION_DEBOUNCE_TIME = 300L&#10;&#10;    /**&#10;     * Navigate to a destination with single top behavior and debouncing to prevent rapid navigation.&#10;     * &#10;     * @param route The route to navigate to&#10;     * @param popUpToRoute The route to pop up to, default is null&#10;     * @param inclusive Whether to include the route in pop up to, default is false&#10;     */&#10;    fun NavController.navigateSingleTop(route: String, popUpToRoute: String? = null, inclusive: Boolean = false) {&#10;        val currentTime = System.currentTimeMillis()&#10;&#10;        // Prevent rapid multiple navigations&#10;        if (currentTime - lastNavigationTime &lt; NAVIGATION_DEBOUNCE_TIME) {&#10;            return&#10;        }&#10;&#10;        lastNavigationTime = currentTime&#10;&#10;        // Cancel any pending navigation&#10;        navigationJob?.cancel()&#10;&#10;        // Start a new navigation job&#10;        navigationJob = CoroutineScope(Dispatchers.Main).launch {&#10;            delay(50) // Small delay to ensure UI stability&#10;            navigate(route) {&#10;                if (popUpToRoute != null) {&#10;                    popUpTo(popUpToRoute) { this.inclusive = inclusive }&#10;                } else {&#10;                    // Pop up to start destination by default for main tab navigation&#10;                    popUpTo(graph.findStartDestination().id) { this.inclusive = false }&#10;                }&#10;                launchSingleTop = true&#10;                restoreState = true&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Safely retrieve a string argument from navigation back stack entry.&#10;     * &#10;     * @param key The argument key&#10;     * @param defaultValue The default value if argument is null&#10;     * @return The argument value or default value&#10;     */&#10;    fun NavController.getStringArgument(key: String, defaultValue: String = &quot;&quot;): String {&#10;        return currentBackStackEntry?.arguments?.getString(key) ?: defaultValue&#10;    }&#10;&#10;    /**&#10;     * Check if current route is equal to given route.&#10;     * &#10;     * @param route The route to check&#10;     * @return True if current destination route equals given route&#10;     */&#10;    fun NavController.isCurrentRoute(route: String): Boolean {&#10;        return currentDestination?.route == route&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pitpulseandroid.util&#10;&#10;import androidx.navigation.NavController&#10;import androidx.navigation.NavGraph.Companion.findStartDestination&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Utility functions for navigation.&#10; */&#10;object NavigationUtils {&#10;    private var lastNavigationTime = 0L&#10;    private var navigationJob: Job? = null&#10;    private const val NAVIGATION_DEBOUNCE_TIME = 300L&#10;&#10;    /**&#10;     * Navigate to a destination with single top behavior and debouncing to prevent rapid navigation.&#10;     * &#10;     * @param route The route to navigate to&#10;     * @param popUpToRoute The route to pop up to, default is null&#10;     * @param inclusive Whether to include the route in pop up to, default is false&#10;     */&#10;    fun NavController.navigateSingleTop(route: String, popUpToRoute: String? = null, inclusive: Boolean = false) {&#10;        val currentTime = System.currentTimeMillis()&#10;&#10;        // Prevent rapid multiple navigations&#10;        if (currentTime - lastNavigationTime &lt; NAVIGATION_DEBOUNCE_TIME) {&#10;            return&#10;        }&#10;&#10;        lastNavigationTime = currentTime&#10;&#10;        // Cancel any pending navigation&#10;        navigationJob?.cancel()&#10;&#10;        // Start a new navigation job&#10;        navigationJob = CoroutineScope(Dispatchers.Main).launch {&#10;            delay(50) // Small delay to ensure UI stability&#10;            navigate(route) {&#10;                if (popUpToRoute != null) {&#10;                    popUpTo(popUpToRoute) { this.inclusive = inclusive }&#10;                } else {&#10;                    // Pop up to start destination by default for main tab navigation&#10;                    popUpTo(graph.findStartDestination().id) { this.inclusive = false }&#10;                }&#10;                launchSingleTop = true&#10;                restoreState = true&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Safely retrieve a string argument from navigation back stack entry.&#10;     * &#10;     * @param key The argument key&#10;     * @param defaultValue The default value if argument is null&#10;     * @return The argument value or default value&#10;     */&#10;    fun NavController.getStringArgument(key: String, defaultValue: String = &quot;&quot;): String {&#10;        return currentBackStackEntry?.arguments?.getString(key) ?: defaultValue&#10;    }&#10;&#10;    /**&#10;     * Check if current route is equal to given route.&#10;     * &#10;     * @param route The route to check&#10;     * @return True if current destination route equals given route&#10;     */&#10;    @Suppress(&quot;unused&quot;) // Will be used in future for route-based UI updates&#10;    fun NavController.isCurrentRoute(route: String): Boolean {&#10;        return currentDestination?.route == route&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>